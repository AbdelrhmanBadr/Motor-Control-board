
Atmega32A drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800062  00800062  000009ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ed  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000722  00000000  00000000  00001f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000092c  00000000  00000000  00002651  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000798  00000000  00000000  00002f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c6  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001cb3  00000000  00000000  000040de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00005d91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_1>
   8:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_2>
   c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_3>
  10:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__vector_4>
  14:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_5>
  18:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_6>
  1c:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_7>
  20:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_8>
  24:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_9>
  28:	0c 94 42 03 	jmp	0x684	; 0x684 <__vector_10>
  2c:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 da 02 	call	0x5b4	; 0x5b4 <main>
  8a:	0c 94 98 04 	jmp	0x930	; 0x930 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
	return ReturnedError;
}

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	if(GlopalPointer_ADCInterrupt != NULL)
  b4:	e0 91 64 00 	lds	r30, 0x0064
  b8:	f0 91 65 00 	lds	r31, 0x0065
  bc:	30 97       	sbiw	r30, 0x00	; 0
  be:	51 f0       	breq	.+20     	; 0xd4 <__vector_16+0x42>
	{
		/*Get the reading value*/
		#if ADC_NUMBER_OF_BITS == 8
			ADC_ReadingValue = ADCH_REG;
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 63 00 	sts	0x0063, r25
  c8:	80 93 62 00 	sts	0x0062, r24
		#elif ADC_NUMBER_OF_BITS == 10
			ADC_ReadingValue = ADCL_REG | (ADCH_REG << 8);
		#endif /*ADC_NUMBER_OF_BITS*/

		/*Set ADC as idle*/
		ADC_BusyFlag = ADC_IDLE;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	80 93 60 00 	sts	0x0060, r24

		/*Execute ISR*/
		GlopalPointer_ADCInterrupt();
  d2:	09 95       	icall
	}
}
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	bf 91       	pop	r27
  da:	af 91       	pop	r26
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	7f 91       	pop	r23
  e2:	6f 91       	pop	r22
  e4:	5f 91       	pop	r21
  e6:	4f 91       	pop	r20
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <DCMotor_Setup>:
#include "Timers.h"
#include "DCMotor.h"
#include <util/delay.h>

Error_t DCMotor_Setup(DCMotor_t *Motor)
{
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	/*Set motor pins as output pins*/
	ReturnedError = DIO_SetPinDirection(Motor->MotorPort,Motor->MotorPin1,DIO_OUTPUT_PIN);
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	69 81       	ldd	r22, Y+1	; 0x01
 102:	88 81       	ld	r24, Y
 104:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPinDirection>
	ReturnedError = DIO_SetPinDirection(Motor->MotorPort,Motor->MotorPin2,DIO_OUTPUT_PIN);
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	6a 81       	ldd	r22, Y+2	; 0x02
 10c:	88 81       	ld	r24, Y
 10e:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPinDirection>
 112:	18 2f       	mov	r17, r24
	if (Motor->MotorPort == OC0_PORT && ((Motor->MotorPin1 == OC0_PIN) || (Motor->MotorPin2 == OC0_PIN)))
 114:	98 81       	ld	r25, Y
 116:	92 30       	cpi	r25, 0x02	; 2
 118:	49 f4       	brne	.+18     	; 0x12c <DCMotor_Setup+0x36>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	19 f0       	breq	.+6      	; 0x126 <DCMotor_Setup+0x30>
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	69 f4       	brne	.+26     	; 0x140 <DCMotor_Setup+0x4a>
	{
		Timer0_Initiate();
 126:	0e 94 02 03 	call	0x604	; 0x604 <Timer0_Initiate>
 12a:	0a c0       	rjmp	.+20     	; 0x140 <DCMotor_Setup+0x4a>
	} 
	else if (Motor->MotorPort == OC2_PORT && ((Motor->MotorPin1 == OC2_PIN) || (Motor->MotorPin2 == OC2_PIN)))
 12c:	94 30       	cpi	r25, 0x04	; 4
 12e:	41 f4       	brne	.+16     	; 0x140 <DCMotor_Setup+0x4a>
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	87 30       	cpi	r24, 0x07	; 7
 134:	19 f0       	breq	.+6      	; 0x13c <DCMotor_Setup+0x46>
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	87 30       	cpi	r24, 0x07	; 7
 13a:	11 f4       	brne	.+4      	; 0x140 <DCMotor_Setup+0x4a>
	{
		Timer2_Initiate();
 13c:	0e 94 15 04 	call	0x82a	; 0x82a <Timer2_Initiate>
	}
	return ReturnedError;
}
 140:	81 2f       	mov	r24, r17
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	08 95       	ret

0000014a <DCMotor_ControlSpeed>:
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin2,DIO_LOW_PIN);
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_LOW_PIN);
	return ReturnedError;
}
Error_t DCMotor_ControlSpeed(DCMotor_t *Motor , uint8 SpeedValue , uint8 MotorDirection)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	if (MotorDirection == DC_MOTOR_CCW)
 150:	42 30       	cpi	r20, 0x02	; 2
 152:	69 f4       	brne	.+26     	; 0x16e <DCMotor_ControlSpeed+0x24>
	{
		Timer_PWM(Motor->MotorPort,Motor->MotorPin1,SpeedValue);
 154:	46 2f       	mov	r20, r22
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	69 81       	ldd	r22, Y+1	; 0x01
 15a:	88 81       	ld	r24, Y
 15c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Timer_PWM>
		DIO_WritePin(Motor->MotorPort,Motor->MotorPin2,DIO_LOW_PIN);	
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	6a 81       	ldd	r22, Y+2	; 0x02
 164:	88 81       	ld	r24, Y
 166:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_WritePin>
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_LOW_PIN);
	return ReturnedError;
}
Error_t DCMotor_ControlSpeed(DCMotor_t *Motor , uint8 SpeedValue , uint8 MotorDirection)
{
	Error_t ReturnedError = NoError;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	10 c0       	rjmp	.+32     	; 0x18e <DCMotor_ControlSpeed+0x44>
	if (MotorDirection == DC_MOTOR_CCW)
	{
		Timer_PWM(Motor->MotorPort,Motor->MotorPin1,SpeedValue);
		DIO_WritePin(Motor->MotorPort,Motor->MotorPin2,DIO_LOW_PIN);	
	}
	else if (MotorDirection == DC_MOTOR_CW)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	69 f4       	brne	.+26     	; 0x18c <DCMotor_ControlSpeed+0x42>
	{
		Timer_PWM(Motor->MotorPort,Motor->MotorPin2,SpeedValue);
 172:	46 2f       	mov	r20, r22
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	6a 81       	ldd	r22, Y+2	; 0x02
 178:	88 81       	ld	r24, Y
 17a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Timer_PWM>
		DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_LOW_PIN);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	69 81       	ldd	r22, Y+1	; 0x01
 182:	88 81       	ld	r24, Y
 184:	0e 94 c5 01 	call	0x38a	; 0x38a <DIO_WritePin>
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_LOW_PIN);
	return ReturnedError;
}
Error_t DCMotor_ControlSpeed(DCMotor_t *Motor , uint8 SpeedValue , uint8 MotorDirection)
{
	Error_t ReturnedError = NoError;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	01 c0       	rjmp	.+2      	; 0x18e <DCMotor_ControlSpeed+0x44>
		Timer_PWM(Motor->MotorPort,Motor->MotorPin2,SpeedValue);
		DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_LOW_PIN);
	}
	else
	{	
		ReturnedError = FunctionParameterError;  
 18c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ReturnedError;
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <DIO_SetPinDirection>:


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
 194:	68 30       	cpi	r22, 0x08	; 8
 196:	08 f0       	brcs	.+2      	; 0x19a <DIO_SetPinDirection+0x6>
 198:	ee c0       	rjmp	.+476    	; 0x376 <DIO_SetPinDirection+0x1e2>
	{
		ReturnError = FunctionParameterError;
	}
	else
	{
		if(Direction == DIO_OUTPUT_PIN)
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	09 f0       	breq	.+2      	; 0x1a0 <DIO_SetPinDirection+0xc>
 19e:	3f c0       	rjmp	.+126    	; 0x21e <DIO_SetPinDirection+0x8a>
		{
			switch(Port)
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	b1 f0       	breq	.+44     	; 0x1d0 <DIO_SetPinDirection+0x3c>
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <DIO_SetPinDirection+0x18>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <DIO_SetPinDirection+0x22>
 1aa:	e7 c0       	rjmp	.+462    	; 0x37a <DIO_SetPinDirection+0x1e6>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	e9 f0       	breq	.+58     	; 0x1ea <DIO_SetPinDirection+0x56>
 1b0:	84 30       	cpi	r24, 0x04	; 4
 1b2:	41 f1       	breq	.+80     	; 0x204 <DIO_SetPinDirection+0x70>
 1b4:	e2 c0       	rjmp	.+452    	; 0x37a <DIO_SetPinDirection+0x1e6>
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
 1b6:	4a b3       	in	r20, 0x1a	; 26
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	c9 01       	movw	r24, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SetPinDirection+0x30>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SetPinDirection+0x2c>
 1c8:	84 2b       	or	r24, r20
 1ca:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Direction == DIO_OUTPUT_PIN)
		{
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
 1ce:	08 95       	ret
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
 1d0:	47 b3       	in	r20, 0x17	; 23
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	c9 01       	movw	r24, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinDirection+0x4a>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinDirection+0x46>
 1e2:	84 2b       	or	r24, r20
 1e4:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
		if(Direction == DIO_OUTPUT_PIN)
		{
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
 1e8:	08 95       	ret
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
 1ea:	44 b3       	in	r20, 0x14	; 20
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	c9 01       	movw	r24, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_SetPinDirection+0x64>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_SetPinDirection+0x60>
 1fc:	84 2b       	or	r24, r20
 1fe:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 200:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
 202:	08 95       	ret
			case PORTD : SET_BIT(DDRD_REG,PinNumber); break;
 204:	41 b3       	in	r20, 0x11	; 17
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	c9 01       	movw	r24, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_SetPinDirection+0x7e>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_SetPinDirection+0x7a>
 216:	84 2b       	or	r24, r20
 218:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 21a:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
			case PORTD : SET_BIT(DDRD_REG,PinNumber); break;
 21c:	08 95       	ret
			default : ReturnError = FunctionParameterError; break;
			}
		}
		else if (Direction == DIO_INPUT_PIN)
 21e:	42 30       	cpi	r20, 0x02	; 2
 220:	09 f0       	breq	.+2      	; 0x224 <DIO_SetPinDirection+0x90>
 222:	53 c0       	rjmp	.+166    	; 0x2ca <DIO_SetPinDirection+0x136>
		{
			switch(Port)
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	d9 f0       	breq	.+54     	; 0x25e <DIO_SetPinDirection+0xca>
 228:	18 f4       	brcc	.+6      	; 0x230 <DIO_SetPinDirection+0x9c>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	31 f0       	breq	.+12     	; 0x23a <DIO_SetPinDirection+0xa6>
 22e:	a7 c0       	rjmp	.+334    	; 0x37e <DIO_SetPinDirection+0x1ea>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	39 f1       	breq	.+78     	; 0x282 <DIO_SetPinDirection+0xee>
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	b9 f1       	breq	.+110    	; 0x2a6 <DIO_SetPinDirection+0x112>
 238:	a2 c0       	rjmp	.+324    	; 0x37e <DIO_SetPinDirection+0x1ea>
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
 23a:	4a b3       	in	r20, 0x1a	; 26
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	c9 01       	movw	r24, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPinDirection+0xb4>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPinDirection+0xb0>
 24c:	80 95       	com	r24
 24e:	98 2f       	mov	r25, r24
 250:	94 23       	and	r25, r20
 252:	9a bb       	out	0x1a, r25	; 26
 254:	9b b3       	in	r25, 0x1b	; 27
 256:	89 23       	and	r24, r25
 258:	8b bb       	out	0x1b, r24	; 27
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 25a:	80 e0       	ldi	r24, 0x00	; 0
		else if (Direction == DIO_INPUT_PIN)
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
 25c:	08 95       	ret
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
 25e:	47 b3       	in	r20, 0x17	; 23
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	c9 01       	movw	r24, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_SetPinDirection+0xd8>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_SetPinDirection+0xd4>
 270:	80 95       	com	r24
 272:	98 2f       	mov	r25, r24
 274:	94 23       	and	r25, r20
 276:	97 bb       	out	0x17, r25	; 23
 278:	98 b3       	in	r25, 0x18	; 24
 27a:	89 23       	and	r24, r25
 27c:	88 bb       	out	0x18, r24	; 24
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 27e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
 280:	08 95       	ret
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); CLEAR_BIT(PORTC_REG,PinNumber); break;
 282:	44 b3       	in	r20, 0x14	; 20
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	c9 01       	movw	r24, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDirection+0xfc>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDirection+0xf8>
 294:	80 95       	com	r24
 296:	98 2f       	mov	r25, r24
 298:	94 23       	and	r25, r20
 29a:	94 bb       	out	0x14, r25	; 20
 29c:	95 b3       	in	r25, 0x15	; 21
 29e:	89 23       	and	r24, r25
 2a0:	85 bb       	out	0x15, r24	; 21
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); CLEAR_BIT(PORTC_REG,PinNumber); break;
 2a4:	08 95       	ret
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); CLEAR_BIT(PORTD_REG,PinNumber); break;
 2a6:	41 b3       	in	r20, 0x11	; 17
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	c9 01       	movw	r24, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinDirection+0x120>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinDirection+0x11c>
 2b8:	80 95       	com	r24
 2ba:	98 2f       	mov	r25, r24
 2bc:	94 23       	and	r25, r20
 2be:	91 bb       	out	0x11, r25	; 17
 2c0:	92 b3       	in	r25, 0x12	; 18
 2c2:	89 23       	and	r24, r25
 2c4:	82 bb       	out	0x12, r24	; 18
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); CLEAR_BIT(PORTC_REG,PinNumber); break;
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); CLEAR_BIT(PORTD_REG,PinNumber); break;
 2c8:	08 95       	ret
			}
		}
		else if (Direction == DIO_INPUT_PULLUP_PIN)
 2ca:	43 30       	cpi	r20, 0x03	; 3
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <DIO_SetPinDirection+0x13c>
 2ce:	59 c0       	rjmp	.+178    	; 0x382 <DIO_SetPinDirection+0x1ee>
		{
			switch(Port)
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	d9 f0       	breq	.+54     	; 0x30a <DIO_SetPinDirection+0x176>
 2d4:	18 f4       	brcc	.+6      	; 0x2dc <DIO_SetPinDirection+0x148>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	31 f0       	breq	.+12     	; 0x2e6 <DIO_SetPinDirection+0x152>
 2da:	55 c0       	rjmp	.+170    	; 0x386 <DIO_SetPinDirection+0x1f2>
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	39 f1       	breq	.+78     	; 0x32e <DIO_SetPinDirection+0x19a>
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	b9 f1       	breq	.+110    	; 0x352 <DIO_SetPinDirection+0x1be>
 2e4:	50 c0       	rjmp	.+160    	; 0x386 <DIO_SetPinDirection+0x1f2>
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
 2e6:	4a b3       	in	r20, 0x1a	; 26
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	c9 01       	movw	r24, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_SetPinDirection+0x160>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_SetPinDirection+0x15c>
 2f8:	98 2f       	mov	r25, r24
 2fa:	90 95       	com	r25
 2fc:	94 23       	and	r25, r20
 2fe:	9a bb       	out	0x1a, r25	; 26
 300:	9b b3       	in	r25, 0x1b	; 27
 302:	89 2b       	or	r24, r25
 304:	8b bb       	out	0x1b, r24	; 27
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 306:	80 e0       	ldi	r24, 0x00	; 0
		else if (Direction == DIO_INPUT_PULLUP_PIN)
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
 308:	08 95       	ret
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
 30a:	47 b3       	in	r20, 0x17	; 23
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	c9 01       	movw	r24, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_SetPinDirection+0x184>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_SetPinDirection+0x180>
 31c:	98 2f       	mov	r25, r24
 31e:	90 95       	com	r25
 320:	94 23       	and	r25, r20
 322:	97 bb       	out	0x17, r25	; 23
 324:	98 b3       	in	r25, 0x18	; 24
 326:	89 2b       	or	r24, r25
 328:	88 bb       	out	0x18, r24	; 24
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 32a:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
 32c:	08 95       	ret
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); SET_BIT(PORTC_REG,PinNumber); break;
 32e:	44 b3       	in	r20, 0x14	; 20
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	c9 01       	movw	r24, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_SetPinDirection+0x1a8>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_SetPinDirection+0x1a4>
 340:	98 2f       	mov	r25, r24
 342:	90 95       	com	r25
 344:	94 23       	and	r25, r20
 346:	94 bb       	out	0x14, r25	; 20
 348:	95 b3       	in	r25, 0x15	; 21
 34a:	89 2b       	or	r24, r25
 34c:	85 bb       	out	0x15, r24	; 21
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 34e:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); SET_BIT(PORTC_REG,PinNumber); break;
 350:	08 95       	ret
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); SET_BIT(PORTD_REG,PinNumber); break;
 352:	41 b3       	in	r20, 0x11	; 17
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	c9 01       	movw	r24, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_SetPinDirection+0x1cc>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_SetPinDirection+0x1c8>
 364:	98 2f       	mov	r25, r24
 366:	90 95       	com	r25
 368:	94 23       	and	r25, r20
 36a:	91 bb       	out	0x11, r25	; 17
 36c:	92 b3       	in	r25, 0x12	; 18
 36e:	89 2b       	or	r24, r25
 370:	82 bb       	out	0x12, r24	; 18
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 372:	80 e0       	ldi	r24, 0x00	; 0
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); SET_BIT(PORTC_REG,PinNumber); break;
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); SET_BIT(PORTD_REG,PinNumber); break;
 374:	08 95       	ret
Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
	{
		ReturnError = FunctionParameterError;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	08 95       	ret
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
			case PORTD : SET_BIT(DDRD_REG,PinNumber); break;
			default : ReturnError = FunctionParameterError; break;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); SET_BIT(PORTD_REG,PinNumber); break;
			}
		}
		else
		{
			ReturnError = FunctionParameterError;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	08 95       	ret
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
 386:	80 e0       	ldi	r24, 0x00	; 0
			ReturnError = FunctionParameterError;
		}
	}

	return ReturnError;
}
 388:	08 95       	ret

0000038a <DIO_WritePin>:

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;

	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
 38a:	68 30       	cpi	r22, 0x08	; 8
 38c:	08 f0       	brcs	.+2      	; 0x390 <DIO_WritePin+0x6>
 38e:	8f c0       	rjmp	.+286    	; 0x4ae <DIO_WritePin+0x124>
	{
		ReturnError = FunctionParameterError;
	}
	else
	{
		if(VoltageLevel == DIO_HIGH_PIN)
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	09 f0       	breq	.+2      	; 0x396 <DIO_WritePin+0xc>
 394:	43 c0       	rjmp	.+134    	; 0x41c <DIO_WritePin+0x92>
		{
			switch(Port)
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	b9 f0       	breq	.+46     	; 0x3c8 <DIO_WritePin+0x3e>
 39a:	18 f4       	brcc	.+6      	; 0x3a2 <DIO_WritePin+0x18>
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	31 f0       	breq	.+12     	; 0x3ac <DIO_WritePin+0x22>
 3a0:	88 c0       	rjmp	.+272    	; 0x4b2 <DIO_WritePin+0x128>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	f9 f0       	breq	.+62     	; 0x3e4 <DIO_WritePin+0x5a>
 3a6:	84 30       	cpi	r24, 0x04	; 4
 3a8:	59 f1       	breq	.+86     	; 0x400 <DIO_WritePin+0x76>
 3aa:	83 c0       	rjmp	.+262    	; 0x4b2 <DIO_WritePin+0x128>
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
 3ac:	2b b3       	in	r18, 0x1b	; 27
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	ac 01       	movw	r20, r24
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_WritePin+0x30>
 3b6:	44 0f       	add	r20, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_WritePin+0x2c>
 3be:	ba 01       	movw	r22, r20
 3c0:	62 2b       	or	r22, r18
 3c2:	6b bb       	out	0x1b, r22	; 27
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(VoltageLevel == DIO_HIGH_PIN)
		{
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
 3c6:	08 95       	ret
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
 3c8:	28 b3       	in	r18, 0x18	; 24
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	ac 01       	movw	r20, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_WritePin+0x4c>
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_WritePin+0x48>
 3da:	ba 01       	movw	r22, r20
 3dc:	62 2b       	or	r22, r18
 3de:	68 bb       	out	0x18, r22	; 24
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
		if(VoltageLevel == DIO_HIGH_PIN)
		{
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
 3e2:	08 95       	ret
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
 3e4:	25 b3       	in	r18, 0x15	; 21
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	ac 01       	movw	r20, r24
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_WritePin+0x68>
 3ee:	44 0f       	add	r20, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_WritePin+0x64>
 3f6:	ba 01       	movw	r22, r20
 3f8:	62 2b       	or	r22, r18
 3fa:	65 bb       	out	0x15, r22	; 21
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 3fc:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
 3fe:	08 95       	ret
			case PORTD: SET_BIT(PORTD_REG,PinNumber); break;
 400:	22 b3       	in	r18, 0x12	; 18
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	ac 01       	movw	r20, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_WritePin+0x84>
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_WritePin+0x80>
 412:	ba 01       	movw	r22, r20
 414:	62 2b       	or	r22, r18
 416:	62 bb       	out	0x12, r22	; 18
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 418:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
			case PORTD: SET_BIT(PORTD_REG,PinNumber); break;
 41a:	08 95       	ret
			default : ReturnError = FunctionParameterError; break;
			}

		}
		else if (VoltageLevel == DIO_LOW_PIN)
 41c:	41 11       	cpse	r20, r1
 41e:	4b c0       	rjmp	.+150    	; 0x4b6 <DIO_WritePin+0x12c>
		{
			switch(Port)
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	c1 f0       	breq	.+48     	; 0x454 <DIO_WritePin+0xca>
 424:	18 f4       	brcc	.+6      	; 0x42c <DIO_WritePin+0xa2>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	31 f0       	breq	.+12     	; 0x436 <DIO_WritePin+0xac>
 42a:	47 c0       	rjmp	.+142    	; 0x4ba <DIO_WritePin+0x130>
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	09 f1       	breq	.+66     	; 0x472 <DIO_WritePin+0xe8>
 430:	84 30       	cpi	r24, 0x04	; 4
 432:	71 f1       	breq	.+92     	; 0x490 <DIO_WritePin+0x106>
 434:	42 c0       	rjmp	.+132    	; 0x4ba <DIO_WritePin+0x130>
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
 436:	2b b3       	in	r18, 0x1b	; 27
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	ac 01       	movw	r20, r24
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_WritePin+0xba>
 440:	44 0f       	add	r20, r20
 442:	55 1f       	adc	r21, r21
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_WritePin+0xb6>
 448:	ba 01       	movw	r22, r20
 44a:	60 95       	com	r22
 44c:	62 23       	and	r22, r18
 44e:	6b bb       	out	0x1b, r22	; 27
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 450:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (VoltageLevel == DIO_LOW_PIN)
		{
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
 452:	08 95       	ret
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
 454:	28 b3       	in	r18, 0x18	; 24
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	ac 01       	movw	r20, r24
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_WritePin+0xd8>
 45e:	44 0f       	add	r20, r20
 460:	55 1f       	adc	r21, r21
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_WritePin+0xd4>
 466:	ba 01       	movw	r22, r20
 468:	60 95       	com	r22
 46a:	62 23       	and	r22, r18
 46c:	68 bb       	out	0x18, r22	; 24
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 46e:	80 e0       	ldi	r24, 0x00	; 0
		else if (VoltageLevel == DIO_LOW_PIN)
		{
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
 470:	08 95       	ret
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
 472:	25 b3       	in	r18, 0x15	; 21
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	ac 01       	movw	r20, r24
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_WritePin+0xf6>
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_WritePin+0xf2>
 484:	ba 01       	movw	r22, r20
 486:	60 95       	com	r22
 488:	62 23       	and	r22, r18
 48a:	65 bb       	out	0x15, r22	; 21
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 48c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
 48e:	08 95       	ret
			case PORTD: CLEAR_BIT(PORTD_REG,PinNumber); break;
 490:	22 b3       	in	r18, 0x12	; 18
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	ac 01       	movw	r20, r24
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_WritePin+0x114>
 49a:	44 0f       	add	r20, r20
 49c:	55 1f       	adc	r21, r21
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_WritePin+0x110>
 4a2:	ba 01       	movw	r22, r20
 4a4:	60 95       	com	r22
 4a6:	62 23       	and	r22, r18
 4a8:	62 bb       	out	0x12, r22	; 18
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
 4aa:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
			case PORTD: CLEAR_BIT(PORTD_REG,PinNumber); break;
 4ac:	08 95       	ret
{
	Error_t ReturnError = NoError;

	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
	{
		ReturnError = FunctionParameterError;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
			case PORTD: SET_BIT(PORTD_REG,PinNumber); break;
			default : ReturnError = FunctionParameterError; break;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	08 95       	ret
			}

		}
		else
		{
			ReturnError = FunctionParameterError;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	08 95       	ret
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
			case PORTD: CLEAR_BIT(PORTD_REG,PinNumber); break;
			default : ReturnError = FunctionParameterError; break;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
		{
			ReturnError = FunctionParameterError;
		}
	}
	return ReturnError;
}
 4bc:	08 95       	ret

000004be <__vector_1>:
	return ReturnedError;
}

void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	if(GlopalPointer_INT0 != NULL)
 4e0:	e0 91 6a 00 	lds	r30, 0x006A
 4e4:	f0 91 6b 00 	lds	r31, 0x006B
 4e8:	30 97       	sbiw	r30, 0x00	; 0
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__vector_1+0x30>
	{
		GlopalPointer_INT0();
 4ec:	09 95       	icall
	}

}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_2>:
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	if(GlopalPointer_INT1 != NULL)
 532:	e0 91 68 00 	lds	r30, 0x0068
 536:	f0 91 69 00 	lds	r31, 0x0069
 53a:	30 97       	sbiw	r30, 0x00	; 0
 53c:	09 f0       	breq	.+2      	; 0x540 <__vector_2+0x30>
	{
		GlopalPointer_INT1();
 53e:	09 95       	icall
	}
}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_3>:
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	if(GlopalPointer_INT2 != NULL)
 584:	e0 91 66 00 	lds	r30, 0x0066
 588:	f0 91 67 00 	lds	r31, 0x0067
 58c:	30 97       	sbiw	r30, 0x00	; 0
 58e:	09 f0       	breq	.+2      	; 0x592 <__vector_3+0x30>
	{
		GlopalPointer_INT2();
 590:	09 95       	icall
	}
}
 592:	ff 91       	pop	r31
 594:	ef 91       	pop	r30
 596:	bf 91       	pop	r27
 598:	af 91       	pop	r26
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	7f 91       	pop	r23
 5a0:	6f 91       	pop	r22
 5a2:	5f 91       	pop	r21
 5a4:	4f 91       	pop	r20
 5a6:	3f 91       	pop	r19
 5a8:	2f 91       	pop	r18
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <main>:
#include "Servo.h"
#include "Potentiometer.h"
#include "Stepper.h"
#include "DCMotor.h"
int main (void)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <main+0x6>
 5ba:	1f 92       	push	r1
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
	DCMotor_t Motor = {PORTD,PIN7,PIN1};
 5c0:	84 e0       	ldi	r24, 0x04	; 4
 5c2:	89 83       	std	Y+1, r24	; 0x01
 5c4:	87 e0       	ldi	r24, 0x07	; 7
 5c6:	8a 83       	std	Y+2, r24	; 0x02
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	8b 83       	std	Y+3, r24	; 0x03
	DCMotor_Setup(&Motor);
 5cc:	ce 01       	movw	r24, r28
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <DCMotor_Setup>
	Timer2_Initiate();
 5d4:	0e 94 15 04 	call	0x82a	; 0x82a <Timer2_Initiate>
	uint8 i = 0;
	while(1)
	{
		for (i = 0 ; i < 255 ; i+=5)
 5d8:	10 e0       	ldi	r17, 0x00	; 0
 5da:	00 e0       	ldi	r16, 0x00	; 0
		{
			DCMotor_ControlSpeed(&Motor,i,DC_MOTOR_CCW);
 5dc:	42 e0       	ldi	r20, 0x02	; 2
 5de:	61 2f       	mov	r22, r17
 5e0:	ce 01       	movw	r24, r28
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	0e 94 a5 00 	call	0x14a	; 0x14a <DCMotor_ControlSpeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e8:	2f ef       	ldi	r18, 0xFF	; 255
 5ea:	84 e3       	ldi	r24, 0x34	; 52
 5ec:	9c e0       	ldi	r25, 0x0C	; 12
 5ee:	21 50       	subi	r18, 0x01	; 1
 5f0:	80 40       	sbci	r24, 0x00	; 0
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <main+0x3a>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <main+0x44>
 5f8:	00 00       	nop
	DCMotor_Setup(&Motor);
	Timer2_Initiate();
	uint8 i = 0;
	while(1)
	{
		for (i = 0 ; i < 255 ; i+=5)
 5fa:	1b 5f       	subi	r17, 0xFB	; 251
 5fc:	1f 3f       	cpi	r17, 0xFF	; 255
 5fe:	71 f7       	brne	.-36     	; 0x5dc <main+0x28>
 600:	10 2f       	mov	r17, r16
 602:	ec cf       	rjmp	.-40     	; 0x5dc <main+0x28>

00000604 <Timer0_Initiate>:
			CLEAR_BIT(TIMSK_REG,TIMSK_OCIE0_BIT);
		#else
			#error "Error in TIMER0_INTERRUPT_ENABLE config"
		#endif /*TIMER0_INTERRUPT_ENABLE*/
	#elif TIMER0_OPERATION_MODE == TIMER0_FAST_PWM
		SET_BIT(TCCR0_REG,TCCR0_WGM01_BIT);
 604:	83 b7       	in	r24, 0x33	; 51
 606:	88 60       	ori	r24, 0x08	; 8
 608:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG,TCCR0_WGM00_BIT);
 60a:	83 b7       	in	r24, 0x33	; 51
 60c:	80 64       	ori	r24, 0x40	; 64
 60e:	83 bf       	out	0x33, r24	; 51
		#if     TIMER0_COMPARE_OUTPUT_MODE == TIMER0_NON_INVERTING_MODE
			SET_BIT(TCCR0_REG,TCCR0_COM01_BIT);
 610:	83 b7       	in	r24, 0x33	; 51
 612:	80 62       	ori	r24, 0x20	; 32
 614:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0_REG,TCCR0_COM00_BIT);
 616:	83 b7       	in	r24, 0x33	; 51
 618:	8f 7e       	andi	r24, 0xEF	; 239
 61a:	83 bf       	out	0x33, r24	; 51
			SET_BIT(DDRB_REG,PIN3); /*Set pin as output pin*/
 61c:	bb 9a       	sbi	0x17, 3	; 23
	#if TIMER0_FREQUENCY == TIMER0_FOSC
		CLEAR_BIT(TCCR0_REG,TCCR0_CS02_BIT);
		CLEAR_BIT(TCCR0_REG,TCCR0_CS01_BIT);
		SET_BIT(TCCR0_REG,TCCR0_CS00_BIT);
	#elif TIMER0_FREQUENCY == TIMER0_FOSC_OVER_8
		CLEAR_BIT(TCCR0_REG,TCCR0_CS02_BIT);
 61e:	83 b7       	in	r24, 0x33	; 51
 620:	8b 7f       	andi	r24, 0xFB	; 251
 622:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG,TCCR0_CS01_BIT);
 624:	83 b7       	in	r24, 0x33	; 51
 626:	82 60       	ori	r24, 0x02	; 2
 628:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0_REG,TCCR0_CS00_BIT);
 62a:	83 b7       	in	r24, 0x33	; 51
 62c:	8e 7f       	andi	r24, 0xFE	; 254
 62e:	83 bf       	out	0x33, r24	; 51
 630:	08 95       	ret

00000632 <__vector_11>:
}

/* ISR Function for Timer0 OverFlow event */
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
 632:	1f 92       	push	r1
 634:	0f 92       	push	r0
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	0f 92       	push	r0
 63a:	11 24       	eor	r1, r1
 63c:	2f 93       	push	r18
 63e:	3f 93       	push	r19
 640:	4f 93       	push	r20
 642:	5f 93       	push	r21
 644:	6f 93       	push	r22
 646:	7f 93       	push	r23
 648:	8f 93       	push	r24
 64a:	9f 93       	push	r25
 64c:	af 93       	push	r26
 64e:	bf 93       	push	r27
 650:	ef 93       	push	r30
 652:	ff 93       	push	r31
	if(GlobalPointer_Timer0_OverFlowEvent != NULL)
 654:	e0 91 78 00 	lds	r30, 0x0078
 658:	f0 91 79 00 	lds	r31, 0x0079
 65c:	30 97       	sbiw	r30, 0x00	; 0
 65e:	09 f0       	breq	.+2      	; 0x662 <__vector_11+0x30>
	{
		GlobalPointer_Timer0_OverFlowEvent();
 660:	09 95       	icall
	}
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <__vector_10>:

/* ISR Function for Timer0 ComapreMatch event */
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
 684:	1f 92       	push	r1
 686:	0f 92       	push	r0
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	0f 92       	push	r0
 68c:	11 24       	eor	r1, r1
 68e:	2f 93       	push	r18
 690:	3f 93       	push	r19
 692:	4f 93       	push	r20
 694:	5f 93       	push	r21
 696:	6f 93       	push	r22
 698:	7f 93       	push	r23
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	af 93       	push	r26
 6a0:	bf 93       	push	r27
 6a2:	ef 93       	push	r30
 6a4:	ff 93       	push	r31
	if(GlobalPointer_Timer0_CompareMatchEvent != NULL)
 6a6:	e0 91 7a 00 	lds	r30, 0x007A
 6aa:	f0 91 7b 00 	lds	r31, 0x007B
 6ae:	30 97       	sbiw	r30, 0x00	; 0
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <__vector_10+0x30>
	{
		GlobalPointer_Timer0_CompareMatchEvent();
 6b2:	09 95       	icall
	}
}
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <Timer1_PWM_OC1APin>:
}

void Timer1_PWM_OC1APin(uint16 CompareMatchAValue)
{
	/*Set the value*/
	OCR1AH_REG = CompareMatchAValue >> 8;
 6d6:	9b bd       	out	0x2b, r25	; 43
	OCR1AL_REG = (uint8) CompareMatchAValue;
 6d8:	8a bd       	out	0x2a, r24	; 42
 6da:	08 95       	ret

000006dc <Timer1_PWM_OC1BPin>:
}
void Timer1_PWM_OC1BPin(uint16 CompareMatchBValue)
{
	/*Set the value*/
	OCR1BH_REG = CompareMatchBValue >> 8;
 6dc:	99 bd       	out	0x29, r25	; 41
	OCR1BL_REG = (uint8) CompareMatchBValue;
 6de:	88 bd       	out	0x28, r24	; 40
 6e0:	08 95       	ret

000006e2 <__vector_9>:
	}
}
/* ISR Function for Timer1 overflow event */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	if(GlobalPointer_Timer1_OverFlowEvent != NULL)
 704:	e0 91 76 00 	lds	r30, 0x0076
 708:	f0 91 77 00 	lds	r31, 0x0077
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	09 f0       	breq	.+2      	; 0x712 <__vector_9+0x30>
	{
		GlobalPointer_Timer1_OverFlowEvent();
 710:	09 95       	icall
	}
}
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	bf 91       	pop	r27
 718:	af 91       	pop	r26
 71a:	9f 91       	pop	r25
 71c:	8f 91       	pop	r24
 71e:	7f 91       	pop	r23
 720:	6f 91       	pop	r22
 722:	5f 91       	pop	r21
 724:	4f 91       	pop	r20
 726:	3f 91       	pop	r19
 728:	2f 91       	pop	r18
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <__vector_8>:

/* ISR Function for Timer1 ComapreMatch-B event */
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
	if(GlobalPointer_Timer1_CompareMatchBEvent != NULL)
 756:	e0 91 72 00 	lds	r30, 0x0072
 75a:	f0 91 73 00 	lds	r31, 0x0073
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	09 f0       	breq	.+2      	; 0x764 <__vector_8+0x30>
	{
		GlobalPointer_Timer1_CompareMatchBEvent();
 762:	09 95       	icall
	}
}
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <__vector_7>:

/* ISR Function for Timer1 ComapreMatch-A event */
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	4f 93       	push	r20
 796:	5f 93       	push	r21
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31
	if(GlobalPointer_Timer1_CompareMatchAEvent != NULL)
 7a8:	e0 91 74 00 	lds	r30, 0x0074
 7ac:	f0 91 75 00 	lds	r31, 0x0075
 7b0:	30 97       	sbiw	r30, 0x00	; 0
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_7+0x30>
	{
		GlobalPointer_Timer1_CompareMatchAEvent();
 7b4:	09 95       	icall
	}
}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <__vector_6>:
/* ISR Function for Timer1 Capture event */
void __vector_6(void)  __attribute__((signal));
void __vector_6(void)
{
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	2f 93       	push	r18
 7e4:	3f 93       	push	r19
 7e6:	4f 93       	push	r20
 7e8:	5f 93       	push	r21
 7ea:	6f 93       	push	r22
 7ec:	7f 93       	push	r23
 7ee:	8f 93       	push	r24
 7f0:	9f 93       	push	r25
 7f2:	af 93       	push	r26
 7f4:	bf 93       	push	r27
 7f6:	ef 93       	push	r30
 7f8:	ff 93       	push	r31
	if(GlobalPointer_Timer1_CaptureEvent != NULL)
 7fa:	e0 91 70 00 	lds	r30, 0x0070
 7fe:	f0 91 71 00 	lds	r31, 0x0071
 802:	30 97       	sbiw	r30, 0x00	; 0
 804:	09 f0       	breq	.+2      	; 0x808 <__vector_6+0x30>
	{
		GlobalPointer_Timer1_CaptureEvent();
 806:	09 95       	icall
	}
}
 808:	ff 91       	pop	r31
 80a:	ef 91       	pop	r30
 80c:	bf 91       	pop	r27
 80e:	af 91       	pop	r26
 810:	9f 91       	pop	r25
 812:	8f 91       	pop	r24
 814:	7f 91       	pop	r23
 816:	6f 91       	pop	r22
 818:	5f 91       	pop	r21
 81a:	4f 91       	pop	r20
 81c:	3f 91       	pop	r19
 81e:	2f 91       	pop	r18
 820:	0f 90       	pop	r0
 822:	0f be       	out	0x3f, r0	; 63
 824:	0f 90       	pop	r0
 826:	1f 90       	pop	r1
 828:	18 95       	reti

0000082a <Timer2_Initiate>:
			CLEAR_BIT(TIMSK_REG,TIMSK_OCIE2_BIT);
		#else
			#error "Error in TIMER2_INTERRUPT_ENABLE config"
		#endif /*TIMER2_INTERRUPT_ENABLE*/
	#elif TIMER2_OPERATION_MODE == TIMER2_FAST_PWM
		SET_BIT(TCCR2_REG,TCCR2_WGM21_BIT);
 82a:	85 b5       	in	r24, 0x25	; 37
 82c:	88 60       	ori	r24, 0x08	; 8
 82e:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2_REG,TCCR2_WGM20_BIT);
 830:	85 b5       	in	r24, 0x25	; 37
 832:	80 64       	ori	r24, 0x40	; 64
 834:	85 bd       	out	0x25, r24	; 37
		#if     TIMER2_COMPARE_OUTPUT_MODE == TIMER2_NON_INVERTING_MODE
			SET_BIT(TCCR2_REG,TCCR2_COM21_BIT);
 836:	85 b5       	in	r24, 0x25	; 37
 838:	80 62       	ori	r24, 0x20	; 32
 83a:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2_REG,TCCR2_COM20_BIT);
 83c:	85 b5       	in	r24, 0x25	; 37
 83e:	8f 7e       	andi	r24, 0xEF	; 239
 840:	85 bd       	out	0x25, r24	; 37
			SET_BIT(DDRD_REG,PIN7); /*Set pin as output pin*/
 842:	8f 9a       	sbi	0x11, 7	; 17
	#if TIMER2_FREQUENCY == TIMER2_FOSC
		CLEAR_BIT(TCCR2_REG,TCCR2_CS22_BIT);
		CLEAR_BIT(TCCR2_REG,TCCR2_CS21_BIT);
		SET_BIT(TCCR2_REG,TCCR2_CS20_BIT);
	#elif TIMER2_FREQUENCY == TIMER2_FOSC_OVER_8
		CLEAR_BIT(TCCR2_REG,TCCR2_CS22_BIT);
 844:	85 b5       	in	r24, 0x25	; 37
 846:	8b 7f       	andi	r24, 0xFB	; 251
 848:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2_REG,TCCR2_CS21_BIT);
 84a:	85 b5       	in	r24, 0x25	; 37
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2_REG,TCCR2_CS20_BIT);
 850:	85 b5       	in	r24, 0x25	; 37
 852:	8e 7f       	andi	r24, 0xFE	; 254
 854:	85 bd       	out	0x25, r24	; 37
 856:	08 95       	ret

00000858 <__vector_5>:
}

/* ISR Function for Timer2 OverFlow event */
void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	2f 93       	push	r18
 864:	3f 93       	push	r19
 866:	4f 93       	push	r20
 868:	5f 93       	push	r21
 86a:	6f 93       	push	r22
 86c:	7f 93       	push	r23
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
 872:	af 93       	push	r26
 874:	bf 93       	push	r27
 876:	ef 93       	push	r30
 878:	ff 93       	push	r31
	if(GlobalPointer_Timer2_OverFlowEvent != NULL)
 87a:	e0 91 6c 00 	lds	r30, 0x006C
 87e:	f0 91 6d 00 	lds	r31, 0x006D
 882:	30 97       	sbiw	r30, 0x00	; 0
 884:	09 f0       	breq	.+2      	; 0x888 <__stack+0x29>
	{
		GlobalPointer_Timer2_OverFlowEvent();
 886:	09 95       	icall
	}
}
 888:	ff 91       	pop	r31
 88a:	ef 91       	pop	r30
 88c:	bf 91       	pop	r27
 88e:	af 91       	pop	r26
 890:	9f 91       	pop	r25
 892:	8f 91       	pop	r24
 894:	7f 91       	pop	r23
 896:	6f 91       	pop	r22
 898:	5f 91       	pop	r21
 89a:	4f 91       	pop	r20
 89c:	3f 91       	pop	r19
 89e:	2f 91       	pop	r18
 8a0:	0f 90       	pop	r0
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	0f 90       	pop	r0
 8a6:	1f 90       	pop	r1
 8a8:	18 95       	reti

000008aa <__vector_4>:

/* ISR Function for Timer2 ComapreMatch event */
void __vector_4(void)  __attribute__((signal));
void __vector_4(void)
{
 8aa:	1f 92       	push	r1
 8ac:	0f 92       	push	r0
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	0f 92       	push	r0
 8b2:	11 24       	eor	r1, r1
 8b4:	2f 93       	push	r18
 8b6:	3f 93       	push	r19
 8b8:	4f 93       	push	r20
 8ba:	5f 93       	push	r21
 8bc:	6f 93       	push	r22
 8be:	7f 93       	push	r23
 8c0:	8f 93       	push	r24
 8c2:	9f 93       	push	r25
 8c4:	af 93       	push	r26
 8c6:	bf 93       	push	r27
 8c8:	ef 93       	push	r30
 8ca:	ff 93       	push	r31
	if(GlobalPointer_Timer2_CompareMatchEvent != NULL)
 8cc:	e0 91 6e 00 	lds	r30, 0x006E
 8d0:	f0 91 6f 00 	lds	r31, 0x006F
 8d4:	30 97       	sbiw	r30, 0x00	; 0
 8d6:	09 f0       	breq	.+2      	; 0x8da <__vector_4+0x30>
	{
		GlobalPointer_Timer2_CompareMatchEvent();
 8d8:	09 95       	icall
	}
}
 8da:	ff 91       	pop	r31
 8dc:	ef 91       	pop	r30
 8de:	bf 91       	pop	r27
 8e0:	af 91       	pop	r26
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	7f 91       	pop	r23
 8e8:	6f 91       	pop	r22
 8ea:	5f 91       	pop	r21
 8ec:	4f 91       	pop	r20
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
 8f8:	1f 90       	pop	r1
 8fa:	18 95       	reti

000008fc <Timer_PWM>:

void Timer_PWM(uint8 Port, uint8 Pin , uint16 Value)
{
	if(Port == OC0_PORT && Pin == OC0_PIN)
 8fc:	82 30       	cpi	r24, 0x02	; 2
 8fe:	21 f4       	brne	.+8      	; 0x908 <Timer_PWM+0xc>
 900:	63 30       	cpi	r22, 0x03	; 3
 902:	a9 f4       	brne	.+42     	; 0x92e <Timer_PWM+0x32>
	return ReturnedError;
}

void Timer0_PWM_OC0Pin(uint8 CompareMatchValue)
{
	OCR0_REG = CompareMatchValue;
 904:	4c bf       	out	0x3c, r20	; 60
 906:	08 95       	ret
{
	if(Port == OC0_PORT && Pin == OC0_PIN)
	{
		Timer0_PWM_OC0Pin((uint8) Value);
	}
	else if(Port == OC1A_PORT && Pin == OC1A_PIN)
 908:	84 30       	cpi	r24, 0x04	; 4
 90a:	89 f4       	brne	.+34     	; 0x92e <Timer_PWM+0x32>
 90c:	65 30       	cpi	r22, 0x05	; 5
 90e:	29 f4       	brne	.+10     	; 0x91a <Timer_PWM+0x1e>
	{
		Timer1_PWM_OC1APin(Value);
 910:	84 2f       	mov	r24, r20
 912:	95 2f       	mov	r25, r21
 914:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Timer1_PWM_OC1APin>
 918:	08 95       	ret
	}
	else if(Port == OC1B_PORT && Pin == OC1B_PIN)
 91a:	64 30       	cpi	r22, 0x04	; 4
 91c:	29 f4       	brne	.+10     	; 0x928 <Timer_PWM+0x2c>
	{
		Timer1_PWM_OC1BPin(Value);
 91e:	84 2f       	mov	r24, r20
 920:	95 2f       	mov	r25, r21
 922:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Timer1_PWM_OC1BPin>
 926:	08 95       	ret
	}
	else if(Port == OC2_PORT && Pin == OC2_PIN)
 928:	67 30       	cpi	r22, 0x07	; 7
 92a:	09 f4       	brne	.+2      	; 0x92e <Timer_PWM+0x32>
	return ReturnedError;
}

void Timer2_PWM_OC2Pin(uint8 CompareMatchValue)
{
	OCR2_REG = CompareMatchValue;
 92c:	43 bd       	out	0x23, r20	; 35
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
