
Motor dash board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00800060  00001f5a  00001fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800162  00800162  000020f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003f8  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004e97  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fe7  00000000  00000000  000073af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000165c  00000000  00000000  00008396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b40  00000000  00000000  000099f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eb1  00000000  00000000  0000a534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003410  00000000  00000000  0000b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000348  00000000  00000000  0000e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_4>
      14:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_5>
      18:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_6>
      1c:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_7>
      20:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__vector_8>
      24:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__vector_9>
      28:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__vector_10>
      2c:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 05 	call	0xada	; 0xada <main>
      8a:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
	return ReturnedError;
}

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	3f 93       	push	r19
      a0:	4f 93       	push	r20
      a2:	5f 93       	push	r21
      a4:	6f 93       	push	r22
      a6:	7f 93       	push	r23
      a8:	8f 93       	push	r24
      aa:	9f 93       	push	r25
      ac:	af 93       	push	r26
      ae:	bf 93       	push	r27
      b0:	ef 93       	push	r30
      b2:	ff 93       	push	r31
	if(GlopalPointer_ADCInterrupt != NULL)
      b4:	e0 91 64 01 	lds	r30, 0x0164
      b8:	f0 91 65 01 	lds	r31, 0x0165
      bc:	30 97       	sbiw	r30, 0x00	; 0
      be:	51 f0       	breq	.+20     	; 0xd4 <__vector_16+0x42>
	{
		/*Get the reading value*/
		#if ADC_NUMBER_OF_BITS == 8
			ADC_ReadingValue = ADCH_REG;
      c0:	85 b1       	in	r24, 0x05	; 5
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	90 93 63 01 	sts	0x0163, r25
      c8:	80 93 62 01 	sts	0x0162, r24
		#elif ADC_NUMBER_OF_BITS == 10
			ADC_ReadingValue = ADCL_REG | (ADCH_REG << 8);
		#endif /*ADC_NUMBER_OF_BITS*/

		/*Set ADC as idle*/
		ADC_BusyFlag = ADC_IDLE;
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	80 93 60 00 	sts	0x0060, r24

		/*Execute ISR*/
		GlopalPointer_ADCInterrupt();
      d2:	09 95       	icall
	}
}
      d4:	ff 91       	pop	r31
      d6:	ef 91       	pop	r30
      d8:	bf 91       	pop	r27
      da:	af 91       	pop	r26
      dc:	9f 91       	pop	r25
      de:	8f 91       	pop	r24
      e0:	7f 91       	pop	r23
      e2:	6f 91       	pop	r22
      e4:	5f 91       	pop	r21
      e6:	4f 91       	pop	r20
      e8:	3f 91       	pop	r19
      ea:	2f 91       	pop	r18
      ec:	0f 90       	pop	r0
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	0f 90       	pop	r0
      f2:	1f 90       	pop	r1
      f4:	18 95       	reti

000000f6 <Buzzer_Setup>:

Error_t Buzzer_Setup(Buzzer_t *MyBuzzer)
{
	Error_t ReturnedError = NoError;
	/*Set buzzer pin as output pin*/
	ReturnedError =  DIO_SetPinDirection(MyBuzzer->BuzzerPort , MyBuzzer->BuzzerPin ,DIO_OUTPUT_PIN);
      f6:	41 e0       	ldi	r20, 0x01	; 1
      f8:	fc 01       	movw	r30, r24
      fa:	61 81       	ldd	r22, Z+1	; 0x01
      fc:	80 81       	ld	r24, Z
      fe:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	return ReturnedError;
}
     102:	08 95       	ret

00000104 <Buzzer_TurnOn>:
Error_t Buzzer_TurnOn(Buzzer_t *MyBuzzer)
{
	Error_t ReturnedError = NoError;
	/*Drive buzzer pin with high signal*/
	ReturnedError = DIO_WritePin(MyBuzzer->BuzzerPort, MyBuzzer->BuzzerPin, DIO_HIGH_PIN);
     104:	41 e0       	ldi	r20, 0x01	; 1
     106:	fc 01       	movw	r30, r24
     108:	61 81       	ldd	r22, Z+1	; 0x01
     10a:	80 81       	ld	r24, Z
     10c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
	return ReturnedError;
}
     110:	08 95       	ret

00000112 <Buzzer_TurnOff>:
Error_t Buzzer_TurnOff(Buzzer_t *MyBuzzer)
{
	Error_t ReturnedError = NoError;
	/*Drive buzzer pin with low signal*/
	ReturnedError = DIO_WritePin(MyBuzzer->BuzzerPort, MyBuzzer->BuzzerPin, DIO_LOW_PIN);
     112:	40 e0       	ldi	r20, 0x00	; 0
     114:	fc 01       	movw	r30, r24
     116:	61 81       	ldd	r22, Z+1	; 0x01
     118:	80 81       	ld	r24, Z
     11a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
	return ReturnedError;
}
     11e:	08 95       	ret

00000120 <CLCD_SendEnablePulse>:
#include "CLCD.h"
#include "util/delay.h"

static void CLCD_SendEnablePulse(void)
{
	DIO_WritePin(CLCD_EN_PORT,CLCD_EN_PIN,DIO_LOW_PIN);
     120:	40 e0       	ldi	r20, 0x00	; 0
     122:	62 e0       	ldi	r22, 0x02	; 2
     124:	83 e0       	ldi	r24, 0x03	; 3
     126:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	82 e0       	ldi	r24, 0x02	; 2
     12c:	8a 95       	dec	r24
     12e:	f1 f7       	brne	.-4      	; 0x12c <CLCD_SendEnablePulse+0xc>
     130:	00 c0       	rjmp	.+0      	; 0x132 <CLCD_SendEnablePulse+0x12>
	_delay_us(1);
	DIO_WritePin(CLCD_EN_PORT,CLCD_EN_PIN,DIO_HIGH_PIN);
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	62 e0       	ldi	r22, 0x02	; 2
     136:	83 e0       	ldi	r24, 0x03	; 3
     138:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	8a 95       	dec	r24
     140:	f1 f7       	brne	.-4      	; 0x13e <CLCD_SendEnablePulse+0x1e>
     142:	00 c0       	rjmp	.+0      	; 0x144 <CLCD_SendEnablePulse+0x24>
	_delay_us(1);
	DIO_WritePin(CLCD_EN_PORT,CLCD_EN_PIN,DIO_LOW_PIN);
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	62 e0       	ldi	r22, 0x02	; 2
     148:	83 e0       	ldi	r24, 0x03	; 3
     14a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
     14e:	08 95       	ret

00000150 <CLCD_SendInstruction>:
		DIO_SetPinDirection(CLCD_PORT,PIN0,DIO_OUTPUT_PIN);
	#endif /*CLCD_DATA_MODE*/
}

static void CLCD_SendInstruction(uint8 Instruction)
{
     150:	cf 93       	push	r28
     152:	c8 2f       	mov	r28, r24
		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();

	#elif (CLCD_DATA_MODE == CLCD_4BitMode_Upper)
		/*set the RS and RW to zero*/
		DIO_WritePin(CLCD_RS_PORT,CLCD_RS_PIN,DIO_LOW_PIN);
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		DIO_WritePin(CLCD_RW_PORT,CLCD_RW_PIN,DIO_LOW_PIN);
     15e:	40 e0       	ldi	r20, 0x00	; 0
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	83 e0       	ldi	r24, 0x03	; 3
     164:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
static void CLCD_SendMSB(uint8 DataModeConnection, uint8 Data)
{
	switch(DataModeConnection)
	{
		case UPPER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN7,GET_BIT(Data,7));
     168:	4c 2f       	mov	r20, r28
     16a:	44 1f       	adc	r20, r20
     16c:	44 27       	eor	r20, r20
     16e:	44 1f       	adc	r20, r20
     170:	67 e0       	ldi	r22, 0x07	; 7
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN6,GET_BIT(Data,6));
     178:	c6 fb       	bst	r28, 6
     17a:	44 27       	eor	r20, r20
     17c:	40 f9       	bld	r20, 0
     17e:	66 e0       	ldi	r22, 0x06	; 6
     180:	83 e0       	ldi	r24, 0x03	; 3
     182:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN5,GET_BIT(Data,5));
     186:	c5 fb       	bst	r28, 5
     188:	44 27       	eor	r20, r20
     18a:	40 f9       	bld	r20, 0
     18c:	65 e0       	ldi	r22, 0x05	; 5
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN4,GET_BIT(Data,4));
     194:	c4 fb       	bst	r28, 4
     196:	44 27       	eor	r20, r20
     198:	40 f9       	bld	r20, 0
     19a:	64 e0       	ldi	r22, 0x04	; 4
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		/*Send the instruction*/
		/*Send the 4 MSB*/
		CLCD_SendMSB(UPPER_DATA_CONNECTION , Instruction);

		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();
     1a2:	0e 94 90 00 	call	0x120	; 0x120 <CLCD_SendEnablePulse>
static void CLCD_SendLSB(uint8 DataModeConnection , uint8 Data)
{
	switch(DataModeConnection)
	{
		case UPPER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN7,GET_BIT(Data,3));
     1a6:	c3 fb       	bst	r28, 3
     1a8:	44 27       	eor	r20, r20
     1aa:	40 f9       	bld	r20, 0
     1ac:	67 e0       	ldi	r22, 0x07	; 7
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN6,GET_BIT(Data,2));
     1b4:	c2 fb       	bst	r28, 2
     1b6:	44 27       	eor	r20, r20
     1b8:	40 f9       	bld	r20, 0
     1ba:	66 e0       	ldi	r22, 0x06	; 6
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN5,GET_BIT(Data,1));
     1c2:	c1 fb       	bst	r28, 1
     1c4:	44 27       	eor	r20, r20
     1c6:	40 f9       	bld	r20, 0
     1c8:	65 e0       	ldi	r22, 0x05	; 5
     1ca:	83 e0       	ldi	r24, 0x03	; 3
     1cc:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN4,GET_BIT(Data,0));
     1d0:	4c 2f       	mov	r20, r28
     1d2:	41 70       	andi	r20, 0x01	; 1
     1d4:	64 e0       	ldi	r22, 0x04	; 4
     1d6:	83 e0       	ldi	r24, 0x03	; 3
     1d8:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>

		/*Send the 4 LSB*/
		CLCD_SendLSB(UPPER_DATA_CONNECTION , Instruction);

		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();
     1dc:	0e 94 90 00 	call	0x120	; 0x120 <CLCD_SendEnablePulse>
		CLCD_SendLSB(LOWER_DATA_CONNECTION , Instruction);
		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();

	#endif/*CLCD_DATAMODE*/
}
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <CLCD_SendData>:
static void CLCD_SendData(uint8 Data)
{
     1e4:	cf 93       	push	r28
     1e6:	c8 2f       	mov	r28, r24
		 /*set enable pulse __||||__  */
		 CLCD_SendEnablePulse();

	#elif (CLCD_DATA_MODE == CLCD_4BitMode_Upper)
		 /*set the RS to one and RW to zero*/
		 DIO_WritePin(CLCD_RS_PORT,CLCD_RS_PIN,DIO_HIGH_PIN);
     1e8:	41 e0       	ldi	r20, 0x01	; 1
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		 DIO_WritePin(CLCD_RW_PORT,CLCD_RW_PIN,DIO_LOW_PIN);
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	83 e0       	ldi	r24, 0x03	; 3
     1f8:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
static void CLCD_SendMSB(uint8 DataModeConnection, uint8 Data)
{
	switch(DataModeConnection)
	{
		case UPPER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN7,GET_BIT(Data,7));
     1fc:	4c 2f       	mov	r20, r28
     1fe:	44 1f       	adc	r20, r20
     200:	44 27       	eor	r20, r20
     202:	44 1f       	adc	r20, r20
     204:	67 e0       	ldi	r22, 0x07	; 7
     206:	83 e0       	ldi	r24, 0x03	; 3
     208:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN6,GET_BIT(Data,6));
     20c:	c6 fb       	bst	r28, 6
     20e:	44 27       	eor	r20, r20
     210:	40 f9       	bld	r20, 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN5,GET_BIT(Data,5));
     21a:	c5 fb       	bst	r28, 5
     21c:	44 27       	eor	r20, r20
     21e:	40 f9       	bld	r20, 0
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN4,GET_BIT(Data,4));
     228:	c4 fb       	bst	r28, 4
     22a:	44 27       	eor	r20, r20
     22c:	40 f9       	bld	r20, 0
     22e:	64 e0       	ldi	r22, 0x04	; 4
     230:	83 e0       	ldi	r24, 0x03	; 3
     232:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>

	     /*Send the 4 MSB*/
	     CLCD_SendMSB(UPPER_DATA_CONNECTION,Data);

	     /*set enable pulse __||||__  */
	     CLCD_SendEnablePulse();
     236:	0e 94 90 00 	call	0x120	; 0x120 <CLCD_SendEnablePulse>
static void CLCD_SendLSB(uint8 DataModeConnection , uint8 Data)
{
	switch(DataModeConnection)
	{
		case UPPER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN7,GET_BIT(Data,3));
     23a:	c3 fb       	bst	r28, 3
     23c:	44 27       	eor	r20, r20
     23e:	40 f9       	bld	r20, 0
     240:	67 e0       	ldi	r22, 0x07	; 7
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN6,GET_BIT(Data,2));
     248:	c2 fb       	bst	r28, 2
     24a:	44 27       	eor	r20, r20
     24c:	40 f9       	bld	r20, 0
     24e:	66 e0       	ldi	r22, 0x06	; 6
     250:	83 e0       	ldi	r24, 0x03	; 3
     252:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN5,GET_BIT(Data,1));
     256:	c1 fb       	bst	r28, 1
     258:	44 27       	eor	r20, r20
     25a:	40 f9       	bld	r20, 0
     25c:	65 e0       	ldi	r22, 0x05	; 5
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN4,GET_BIT(Data,0));
     264:	4c 2f       	mov	r20, r28
     266:	41 70       	andi	r20, 0x01	; 1
     268:	64 e0       	ldi	r22, 0x04	; 4
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>

	     /*Send the 4 LSB*/
	     CLCD_SendLSB(UPPER_DATA_CONNECTION,Data);

	     /*set enable pulse __||||__  */
	     CLCD_SendEnablePulse();
     270:	0e 94 90 00 	call	0x120	; 0x120 <CLCD_SendEnablePulse>
		CLCD_SendLSB(LOWER_DATA_CONNECTION,Data);

		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();
	#endif/*_dataBitMode*/
}
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <CLCD_Setup>:
	}
}

static void InitiateLCDControlPins(void)
{
	DIO_SetPinDirection(CLCD_RS_PORT,CLCD_RS_PIN,DIO_OUTPUT_PIN);
     278:	41 e0       	ldi	r20, 0x01	; 1
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_RW_PORT,CLCD_RW_PIN,DIO_OUTPUT_PIN);
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	83 e0       	ldi	r24, 0x03	; 3
     288:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_EN_PORT,CLCD_EN_PIN,DIO_OUTPUT_PIN);
     28c:	41 e0       	ldi	r20, 0x01	; 1
     28e:	62 e0       	ldi	r22, 0x02	; 2
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
static void InitiateLCDDataPins(void)
{
	#if (CLCD_DATA_MODE == CLCD_8BitMode)
		DIO_SetPortDirection(CLCD_PORT,DIO_OUTPUT_PORT);
	#elif (CLCD_DATA_MODE == CLCD_4BitMode_Upper)
		DIO_SetPinDirection(CLCD_PORT,PIN7,DIO_OUTPUT_PIN);
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	67 e0       	ldi	r22, 0x07	; 7
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(CLCD_PORT,PIN6,DIO_OUTPUT_PIN);
     2a0:	41 e0       	ldi	r20, 0x01	; 1
     2a2:	66 e0       	ldi	r22, 0x06	; 6
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(CLCD_PORT,PIN5,DIO_OUTPUT_PIN);
     2aa:	41 e0       	ldi	r20, 0x01	; 1
     2ac:	65 e0       	ldi	r22, 0x05	; 5
     2ae:	83 e0       	ldi	r24, 0x03	; 3
     2b0:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(CLCD_PORT,PIN4,DIO_OUTPUT_PIN);
     2b4:	41 e0       	ldi	r20, 0x01	; 1
     2b6:	64 e0       	ldi	r22, 0x04	; 4
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2be:	2f ef       	ldi	r18, 0xFF	; 255
     2c0:	89 ef       	ldi	r24, 0xF9	; 249
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	21 50       	subi	r18, 0x01	; 1
     2c6:	80 40       	sbci	r24, 0x00	; 0
     2c8:	90 40       	sbci	r25, 0x00	; 0
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <CLCD_Setup+0x4c>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <CLCD_Setup+0x56>
     2ce:	00 00       	nop
		/*Wait for more than 30mS after VDD rises to 4.5Volt*/
		_delay_ms(40);
		/*send function set and wait for excution time*/
		/*Sets to 4-bit operation.In this case, operation is handled as 8 bits by initialization,and only this instruction
		  completes with one write.*/
		CLCD_SendInstruction(0x02);
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d6:	25 e8       	ldi	r18, 0x85	; 133
     2d8:	2a 95       	dec	r18
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <CLCD_Setup+0x60>
     2dc:	00 00       	nop
		_delay_us(50);
		CLCD_SendInstruction(CLCD_FUNCTION_SET | (CLCD_4BITMODE << 4) | (CLCD_NUMBER_OF_LINES <<3) | (CLCD_FONT << 2));
     2de:	88 e2       	ldi	r24, 0x28	; 40
     2e0:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
     2e4:	85 e8       	ldi	r24, 0x85	; 133
     2e6:	8a 95       	dec	r24
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <CLCD_Setup+0x6e>
     2ea:	00 00       	nop
		_delay_us(50);
		/*send display on/off instruction*/
		/*With initial states blink and cursor are off ,, display are on*/
		CLCD_SendInstruction(CLCD_DISPLAY_CONTROL | (CLCD_BlinkOff) | (CLCD_CursorOff << 1) |(CLCD_DisplayOn << 2));
     2ec:	8c e0       	ldi	r24, 0x0C	; 12
     2ee:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
     2f2:	95 e8       	ldi	r25, 0x85	; 133
     2f4:	9a 95       	dec	r25
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <CLCD_Setup+0x7c>
     2f8:	00 00       	nop
		_delay_us(50);
		/*send clear display instruction*/
		CLCD_SendInstruction(CLCD_CLEAR_DISPLAY);
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     300:	8f e6       	ldi	r24, 0x6F	; 111
     302:	97 e1       	ldi	r25, 0x17	; 23
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <CLCD_Setup+0x8c>
     308:	00 c0       	rjmp	.+0      	; 0x30a <CLCD_Setup+0x92>
     30a:	00 00       	nop
     30c:	08 95       	ret

0000030e <CLCD_PrintString>:
		/*CLCD_SendInstruction(CLCD_ENTRY_MODE_SET);*/
	#endif
}

void CLCD_PrintString(char *str)
{
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ec 01       	movw	r28, r24
	uint8 iterator;
	for(iterator = 0 ; str[iterator] != '\0'; iterator++)
     316:	88 81       	ld	r24, Y
     318:	88 23       	and	r24, r24
     31a:	51 f0       	breq	.+20     	; 0x330 <CLCD_PrintString+0x22>
     31c:	10 e0       	ldi	r17, 0x00	; 0
	{
		CLCD_SendData(str[iterator]);
     31e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <CLCD_SendData>
}

void CLCD_PrintString(char *str)
{
	uint8 iterator;
	for(iterator = 0 ; str[iterator] != '\0'; iterator++)
     322:	1f 5f       	subi	r17, 0xFF	; 255
     324:	fe 01       	movw	r30, r28
     326:	e1 0f       	add	r30, r17
     328:	f1 1d       	adc	r31, r1
     32a:	80 81       	ld	r24, Z
     32c:	81 11       	cpse	r24, r1
     32e:	f7 cf       	rjmp	.-18     	; 0x31e <CLCD_PrintString+0x10>
	{
		CLCD_SendData(str[iterator]);
	}
}
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	08 95       	ret

00000338 <CLCD_SetCursor>:
void CLCD_SetCursor(uint8 x_position , uint8 y_position)
{
	if(y_position == 0)
     338:	61 11       	cpse	r22, r1
     33a:	08 c0       	rjmp	.+16     	; 0x34c <CLCD_SetCursor+0x14>
	{
		CLCD_SendInstruction(CLCD_DDRAM_ADDRESS + x_position);
     33c:	80 58       	subi	r24, 0x80	; 128
     33e:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     342:	85 e8       	ldi	r24, 0x85	; 133
     344:	8a 95       	dec	r24
     346:	f1 f7       	brne	.-4      	; 0x344 <CLCD_SetCursor+0xc>
     348:	00 00       	nop
     34a:	08 95       	ret
		_delay_us(50);
	}
	else if (y_position == 1)
     34c:	61 30       	cpi	r22, 0x01	; 1
     34e:	39 f4       	brne	.+14     	; 0x35e <CLCD_SetCursor+0x26>
	{
		CLCD_SendInstruction(CLCD_DDRAM_ADDRESS + x_position + 0X40);
     350:	80 54       	subi	r24, 0x40	; 64
     352:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
     356:	85 e8       	ldi	r24, 0x85	; 133
     358:	8a 95       	dec	r24
     35a:	f1 f7       	brne	.-4      	; 0x358 <CLCD_SetCursor+0x20>
     35c:	00 00       	nop
     35e:	08 95       	ret

00000360 <CLCD_PrintChar>:
	_delay_us(50);
}

void CLCD_PrintChar(char Ch)
{
	CLCD_SendData(Ch);
     360:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <CLCD_SendData>
     364:	08 95       	ret

00000366 <CLCD_ClearCLCD>:
	CLCD_SendData(Location);
}

void CLCD_ClearCLCD(void)
{
	CLCD_SendInstruction(CLCD_DDRAM_ADDRESS);
     366:	80 e8       	ldi	r24, 0x80	; 128
     368:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
	CLCD_SendInstruction(CLCD_CLEAR_DISPLAY);
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 a8 00 	call	0x150	; 0x150 <CLCD_SendInstruction>
     372:	8f e8       	ldi	r24, 0x8F	; 143
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <CLCD_ClearCLCD+0x10>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <CLCD_ClearCLCD+0x16>
     37c:	00 00       	nop
     37e:	08 95       	ret

00000380 <DCMotor_Setup>:
#include "Timers.h"
#include "DCMotor.h"
#include <util/delay.h>

Error_t DCMotor_Setup(DCMotor_t *Motor)
{
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	/*Set motor pins as output pins*/
	ReturnedError = DIO_SetPinDirection(Motor->MotorPort,Motor->MotorPin1,DIO_OUTPUT_PIN);
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	69 81       	ldd	r22, Y+1	; 0x01
     38c:	88 81       	ld	r24, Y
     38e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	ReturnedError = DIO_SetPinDirection(Motor->MotorPort,Motor->MotorPin2,DIO_OUTPUT_PIN);
     392:	41 e0       	ldi	r20, 0x01	; 1
     394:	6a 81       	ldd	r22, Y+2	; 0x02
     396:	88 81       	ld	r24, Y
     398:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
     39c:	18 2f       	mov	r17, r24
	if (Motor->MotorPort == OC0_PORT && ((Motor->MotorPin1 == OC0_PIN) || (Motor->MotorPin2 == OC0_PIN)))
     39e:	88 81       	ld	r24, Y
     3a0:	82 30       	cpi	r24, 0x02	; 2
     3a2:	41 f4       	brne	.+16     	; 0x3b4 <DCMotor_Setup+0x34>
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	83 30       	cpi	r24, 0x03	; 3
     3a8:	19 f0       	breq	.+6      	; 0x3b0 <DCMotor_Setup+0x30>
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	19 f5       	brne	.+70     	; 0x3f6 <DCMotor_Setup+0x76>
	{
		Timer0_Initiate();
     3b0:	0e 94 02 0c 	call	0x1804	; 0x1804 <Timer0_Initiate>
	}
	if (Motor->MotorPort == OC2_PORT && ((Motor->MotorPin1 == OC2_PIN) || (Motor->MotorPin2 == OC2_PIN)))
     3b4:	88 81       	ld	r24, Y
     3b6:	84 30       	cpi	r24, 0x04	; 4
     3b8:	f1 f4       	brne	.+60     	; 0x3f6 <DCMotor_Setup+0x76>
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	87 30       	cpi	r24, 0x07	; 7
     3be:	19 f0       	breq	.+6      	; 0x3c6 <DCMotor_Setup+0x46>
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	87 30       	cpi	r24, 0x07	; 7
     3c4:	29 f4       	brne	.+10     	; 0x3d0 <DCMotor_Setup+0x50>
	{
		Timer2_Initiate();
     3c6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Timer2_Initiate>
	}
	if (Motor->MotorPort == OC1A_PORT && ((Motor->MotorPin1 == OC1A_PIN) || (Motor->MotorPin2 == OC1A_PIN)))
     3ca:	88 81       	ld	r24, Y
     3cc:	84 30       	cpi	r24, 0x04	; 4
     3ce:	99 f4       	brne	.+38     	; 0x3f6 <DCMotor_Setup+0x76>
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	85 30       	cpi	r24, 0x05	; 5
     3d4:	19 f0       	breq	.+6      	; 0x3dc <DCMotor_Setup+0x5c>
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	85 30       	cpi	r24, 0x05	; 5
     3da:	29 f4       	brne	.+10     	; 0x3e6 <DCMotor_Setup+0x66>
	{
		Timer1_Initiate();
     3dc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Timer1_Initiate>
	}
	if (Motor->MotorPort == OC1B_PORT && ((Motor->MotorPin1 == OC1B_PIN) || (Motor->MotorPin2 == OC1B_PIN)))
     3e0:	88 81       	ld	r24, Y
     3e2:	84 30       	cpi	r24, 0x04	; 4
     3e4:	41 f4       	brne	.+16     	; 0x3f6 <DCMotor_Setup+0x76>
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	84 30       	cpi	r24, 0x04	; 4
     3ea:	19 f0       	breq	.+6      	; 0x3f2 <DCMotor_Setup+0x72>
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	84 30       	cpi	r24, 0x04	; 4
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <DCMotor_Setup+0x76>
	{
		Timer1_Initiate();
     3f2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Timer1_Initiate>
	}
	return ReturnedError;
}
     3f6:	81 2f       	mov	r24, r17
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	08 95       	ret

00000400 <DCMotor_MoveCW>:
Error_t DCMotor_MoveCW(DCMotor_t *Motor)
{
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_HIGH_PIN);
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	69 81       	ldd	r22, Y+1	; 0x01
     40c:	88 81       	ld	r24, Y
     40e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin2,DIO_LOW_PIN);
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	6a 81       	ldd	r22, Y+2	; 0x02
     416:	88 81       	ld	r24, Y
     418:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
     41c:	18 2f       	mov	r17, r24
	if (Motor->MotorPort == OC0_PORT && ((Motor->MotorPin1 == OC0_PIN) || (Motor->MotorPin2 == OC0_PIN)))
     41e:	88 81       	ld	r24, Y
     420:	82 30       	cpi	r24, 0x02	; 2
     422:	41 f4       	brne	.+16     	; 0x434 <DCMotor_MoveCW+0x34>
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	19 f0       	breq	.+6      	; 0x430 <DCMotor_MoveCW+0x30>
     42a:	8a 81       	ldd	r24, Y+2	; 0x02
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	19 f5       	brne	.+70     	; 0x476 <DCMotor_MoveCW+0x76>
	{
		Timer0_DisableOC0();
     430:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Timer0_DisableOC0>
	}
	if (Motor->MotorPort == OC2_PORT && ((Motor->MotorPin1 == OC2_PIN) || (Motor->MotorPin2 == OC2_PIN)))
     434:	88 81       	ld	r24, Y
     436:	84 30       	cpi	r24, 0x04	; 4
     438:	f1 f4       	brne	.+60     	; 0x476 <DCMotor_MoveCW+0x76>
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	87 30       	cpi	r24, 0x07	; 7
     43e:	19 f0       	breq	.+6      	; 0x446 <DCMotor_MoveCW+0x46>
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	87 30       	cpi	r24, 0x07	; 7
     444:	29 f4       	brne	.+10     	; 0x450 <DCMotor_MoveCW+0x50>
	{
		Timer2_DisableOC2();
     446:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Timer2_DisableOC2>
	}
	if (Motor->MotorPort == OC1A_PORT && ((Motor->MotorPin1 == OC1A_PIN) || (Motor->MotorPin2 == OC1A_PIN)))
     44a:	88 81       	ld	r24, Y
     44c:	84 30       	cpi	r24, 0x04	; 4
     44e:	99 f4       	brne	.+38     	; 0x476 <DCMotor_MoveCW+0x76>
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	85 30       	cpi	r24, 0x05	; 5
     454:	19 f0       	breq	.+6      	; 0x45c <DCMotor_MoveCW+0x5c>
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	85 30       	cpi	r24, 0x05	; 5
     45a:	29 f4       	brne	.+10     	; 0x466 <DCMotor_MoveCW+0x66>
	{
		Timer1_DisableOC1A();
     45c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Timer1_DisableOC1A>
	}
	if (Motor->MotorPort == OC1B_PORT && ((Motor->MotorPin1 == OC1B_PIN) || (Motor->MotorPin2 == OC1B_PIN)))
     460:	88 81       	ld	r24, Y
     462:	84 30       	cpi	r24, 0x04	; 4
     464:	41 f4       	brne	.+16     	; 0x476 <DCMotor_MoveCW+0x76>
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	19 f0       	breq	.+6      	; 0x472 <DCMotor_MoveCW+0x72>
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	84 30       	cpi	r24, 0x04	; 4
     470:	11 f4       	brne	.+4      	; 0x476 <DCMotor_MoveCW+0x76>
	{
		Timer1_DisableOC1B();
     472:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Timer1_DisableOC1B>
	}
	return ReturnedError;
}
     476:	81 2f       	mov	r24, r17
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	08 95       	ret

00000480 <DCMotor_MoveCCW>:
Error_t DCMotor_MoveCCW(DCMotor_t *Motor)
{
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin2,DIO_HIGH_PIN);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	6a 81       	ldd	r22, Y+2	; 0x02
     48c:	88 81       	ld	r24, Y
     48e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_LOW_PIN);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	69 81       	ldd	r22, Y+1	; 0x01
     496:	88 81       	ld	r24, Y
     498:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
     49c:	18 2f       	mov	r17, r24
	if (Motor->MotorPort == OC0_PORT && ((Motor->MotorPin1 == OC0_PIN) || (Motor->MotorPin2 == OC0_PIN)))
     49e:	88 81       	ld	r24, Y
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	41 f4       	brne	.+16     	; 0x4b4 <DCMotor_MoveCCW+0x34>
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	19 f0       	breq	.+6      	; 0x4b0 <DCMotor_MoveCCW+0x30>
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	83 30       	cpi	r24, 0x03	; 3
     4ae:	19 f5       	brne	.+70     	; 0x4f6 <DCMotor_MoveCCW+0x76>
	{
		Timer0_DisableOC0();
     4b0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Timer0_DisableOC0>
	}
	if (Motor->MotorPort == OC2_PORT && ((Motor->MotorPin1 == OC2_PIN) || (Motor->MotorPin2 == OC2_PIN)))
     4b4:	88 81       	ld	r24, Y
     4b6:	84 30       	cpi	r24, 0x04	; 4
     4b8:	f1 f4       	brne	.+60     	; 0x4f6 <DCMotor_MoveCCW+0x76>
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	87 30       	cpi	r24, 0x07	; 7
     4be:	19 f0       	breq	.+6      	; 0x4c6 <DCMotor_MoveCCW+0x46>
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	87 30       	cpi	r24, 0x07	; 7
     4c4:	29 f4       	brne	.+10     	; 0x4d0 <DCMotor_MoveCCW+0x50>
	{
		Timer2_DisableOC2();
     4c6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Timer2_DisableOC2>
	}
	if (Motor->MotorPort == OC1A_PORT && ((Motor->MotorPin1 == OC1A_PIN) || (Motor->MotorPin2 == OC1A_PIN)))
     4ca:	88 81       	ld	r24, Y
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	99 f4       	brne	.+38     	; 0x4f6 <DCMotor_MoveCCW+0x76>
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	85 30       	cpi	r24, 0x05	; 5
     4d4:	19 f0       	breq	.+6      	; 0x4dc <DCMotor_MoveCCW+0x5c>
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	29 f4       	brne	.+10     	; 0x4e6 <DCMotor_MoveCCW+0x66>
	{
		Timer1_DisableOC1A();
     4dc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Timer1_DisableOC1A>
	}
	if (Motor->MotorPort == OC1B_PORT && ((Motor->MotorPin1 == OC1B_PIN) || (Motor->MotorPin2 == OC1B_PIN)))
     4e0:	88 81       	ld	r24, Y
     4e2:	84 30       	cpi	r24, 0x04	; 4
     4e4:	41 f4       	brne	.+16     	; 0x4f6 <DCMotor_MoveCCW+0x76>
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	84 30       	cpi	r24, 0x04	; 4
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <DCMotor_MoveCCW+0x72>
     4ec:	8a 81       	ldd	r24, Y+2	; 0x02
     4ee:	84 30       	cpi	r24, 0x04	; 4
     4f0:	11 f4       	brne	.+4      	; 0x4f6 <DCMotor_MoveCCW+0x76>
	{
		Timer1_DisableOC1B();
     4f2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Timer1_DisableOC1B>
	}
	return ReturnedError;	
}
     4f6:	81 2f       	mov	r24, r17
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	08 95       	ret

00000500 <DCMotor_Stop>:
Error_t DCMotor_Stop(DCMotor_t *Motor)
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin2,DIO_LOW_PIN);
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	6a 81       	ldd	r22, Y+2	; 0x02
     50a:	88 81       	ld	r24, Y
     50c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
	ReturnedError = DIO_WritePin(Motor->MotorPort,Motor->MotorPin1,DIO_LOW_PIN);
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	69 81       	ldd	r22, Y+1	; 0x01
     514:	88 81       	ld	r24, Y
     516:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
	return ReturnedError;
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <DIO_SetPinDirection>:


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
     520:	68 30       	cpi	r22, 0x08	; 8
     522:	08 f0       	brcs	.+2      	; 0x526 <DIO_SetPinDirection+0x6>
     524:	ee c0       	rjmp	.+476    	; 0x702 <DIO_SetPinDirection+0x1e2>
	{
		ReturnError = FunctionParameterError;
	}
	else
	{
		if(Direction == DIO_OUTPUT_PIN)
     526:	41 30       	cpi	r20, 0x01	; 1
     528:	09 f0       	breq	.+2      	; 0x52c <DIO_SetPinDirection+0xc>
     52a:	3f c0       	rjmp	.+126    	; 0x5aa <DIO_SetPinDirection+0x8a>
		{
			switch(Port)
     52c:	82 30       	cpi	r24, 0x02	; 2
     52e:	b1 f0       	breq	.+44     	; 0x55c <DIO_SetPinDirection+0x3c>
     530:	18 f4       	brcc	.+6      	; 0x538 <DIO_SetPinDirection+0x18>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	31 f0       	breq	.+12     	; 0x542 <DIO_SetPinDirection+0x22>
     536:	e7 c0       	rjmp	.+462    	; 0x706 <DIO_SetPinDirection+0x1e6>
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	e9 f0       	breq	.+58     	; 0x576 <DIO_SetPinDirection+0x56>
     53c:	84 30       	cpi	r24, 0x04	; 4
     53e:	41 f1       	breq	.+80     	; 0x590 <DIO_SetPinDirection+0x70>
     540:	e2 c0       	rjmp	.+452    	; 0x706 <DIO_SetPinDirection+0x1e6>
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
     542:	4a b3       	in	r20, 0x1a	; 26
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	c9 01       	movw	r24, r18
     54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_SetPinDirection+0x30>
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	6a 95       	dec	r22
     552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_SetPinDirection+0x2c>
     554:	84 2b       	or	r24, r20
     556:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     558:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Direction == DIO_OUTPUT_PIN)
		{
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
     55a:	08 95       	ret
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
     55c:	47 b3       	in	r20, 0x17	; 23
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	c9 01       	movw	r24, r18
     564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_SetPinDirection+0x4a>
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_SetPinDirection+0x46>
     56e:	84 2b       	or	r24, r20
     570:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     572:	80 e0       	ldi	r24, 0x00	; 0
		if(Direction == DIO_OUTPUT_PIN)
		{
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
     574:	08 95       	ret
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
     576:	44 b3       	in	r20, 0x14	; 20
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	c9 01       	movw	r24, r18
     57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_SetPinDirection+0x64>
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	6a 95       	dec	r22
     586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_SetPinDirection+0x60>
     588:	84 2b       	or	r24, r20
     58a:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     58c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
     58e:	08 95       	ret
			case PORTD : SET_BIT(DDRD_REG,PinNumber); break;
     590:	41 b3       	in	r20, 0x11	; 17
     592:	21 e0       	ldi	r18, 0x01	; 1
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	c9 01       	movw	r24, r18
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_SetPinDirection+0x7e>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	6a 95       	dec	r22
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_SetPinDirection+0x7a>
     5a2:	84 2b       	or	r24, r20
     5a4:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
			case PORTD : SET_BIT(DDRD_REG,PinNumber); break;
     5a8:	08 95       	ret
			default : ReturnError = FunctionParameterError; break;
			}
		}
		else if (Direction == DIO_INPUT_PIN)
     5aa:	42 30       	cpi	r20, 0x02	; 2
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <DIO_SetPinDirection+0x90>
     5ae:	53 c0       	rjmp	.+166    	; 0x656 <DIO_SetPinDirection+0x136>
		{
			switch(Port)
     5b0:	82 30       	cpi	r24, 0x02	; 2
     5b2:	d9 f0       	breq	.+54     	; 0x5ea <DIO_SetPinDirection+0xca>
     5b4:	18 f4       	brcc	.+6      	; 0x5bc <DIO_SetPinDirection+0x9c>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <DIO_SetPinDirection+0xa6>
     5ba:	a7 c0       	rjmp	.+334    	; 0x70a <DIO_SetPinDirection+0x1ea>
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	39 f1       	breq	.+78     	; 0x60e <DIO_SetPinDirection+0xee>
     5c0:	84 30       	cpi	r24, 0x04	; 4
     5c2:	b9 f1       	breq	.+110    	; 0x632 <DIO_SetPinDirection+0x112>
     5c4:	a2 c0       	rjmp	.+324    	; 0x70a <DIO_SetPinDirection+0x1ea>
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
     5c6:	4a b3       	in	r20, 0x1a	; 26
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	c9 01       	movw	r24, r18
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_SetPinDirection+0xb4>
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	6a 95       	dec	r22
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_SetPinDirection+0xb0>
     5d8:	80 95       	com	r24
     5da:	98 2f       	mov	r25, r24
     5dc:	94 23       	and	r25, r20
     5de:	9a bb       	out	0x1a, r25	; 26
     5e0:	9b b3       	in	r25, 0x1b	; 27
     5e2:	89 23       	and	r24, r25
     5e4:	8b bb       	out	0x1b, r24	; 27
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
		else if (Direction == DIO_INPUT_PIN)
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
     5e8:	08 95       	ret
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
     5ea:	47 b3       	in	r20, 0x17	; 23
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	c9 01       	movw	r24, r18
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_SetPinDirection+0xd8>
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	6a 95       	dec	r22
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_SetPinDirection+0xd4>
     5fc:	80 95       	com	r24
     5fe:	98 2f       	mov	r25, r24
     600:	94 23       	and	r25, r20
     602:	97 bb       	out	0x17, r25	; 23
     604:	98 b3       	in	r25, 0x18	; 24
     606:	89 23       	and	r24, r25
     608:	88 bb       	out	0x18, r24	; 24
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     60a:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
     60c:	08 95       	ret
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); CLEAR_BIT(PORTC_REG,PinNumber); break;
     60e:	44 b3       	in	r20, 0x14	; 20
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	c9 01       	movw	r24, r18
     616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_SetPinDirection+0xfc>
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	6a 95       	dec	r22
     61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_SetPinDirection+0xf8>
     620:	80 95       	com	r24
     622:	98 2f       	mov	r25, r24
     624:	94 23       	and	r25, r20
     626:	94 bb       	out	0x14, r25	; 20
     628:	95 b3       	in	r25, 0x15	; 21
     62a:	89 23       	and	r24, r25
     62c:	85 bb       	out	0x15, r24	; 21
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     62e:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); CLEAR_BIT(PORTC_REG,PinNumber); break;
     630:	08 95       	ret
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); CLEAR_BIT(PORTD_REG,PinNumber); break;
     632:	41 b3       	in	r20, 0x11	; 17
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	c9 01       	movw	r24, r18
     63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_SetPinDirection+0x120>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	6a 95       	dec	r22
     642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_SetPinDirection+0x11c>
     644:	80 95       	com	r24
     646:	98 2f       	mov	r25, r24
     648:	94 23       	and	r25, r20
     64a:	91 bb       	out	0x11, r25	; 17
     64c:	92 b3       	in	r25, 0x12	; 18
     64e:	89 23       	and	r24, r25
     650:	82 bb       	out	0x12, r24	; 18
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     652:	80 e0       	ldi	r24, 0x00	; 0
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); CLEAR_BIT(PORTC_REG,PinNumber); break;
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); CLEAR_BIT(PORTD_REG,PinNumber); break;
     654:	08 95       	ret
			}
		}
		else if (Direction == DIO_INPUT_PULLUP_PIN)
     656:	43 30       	cpi	r20, 0x03	; 3
     658:	09 f0       	breq	.+2      	; 0x65c <DIO_SetPinDirection+0x13c>
     65a:	59 c0       	rjmp	.+178    	; 0x70e <DIO_SetPinDirection+0x1ee>
		{
			switch(Port)
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	d9 f0       	breq	.+54     	; 0x696 <DIO_SetPinDirection+0x176>
     660:	18 f4       	brcc	.+6      	; 0x668 <DIO_SetPinDirection+0x148>
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	31 f0       	breq	.+12     	; 0x672 <DIO_SetPinDirection+0x152>
     666:	55 c0       	rjmp	.+170    	; 0x712 <DIO_SetPinDirection+0x1f2>
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	39 f1       	breq	.+78     	; 0x6ba <DIO_SetPinDirection+0x19a>
     66c:	84 30       	cpi	r24, 0x04	; 4
     66e:	b9 f1       	breq	.+110    	; 0x6de <DIO_SetPinDirection+0x1be>
     670:	50 c0       	rjmp	.+160    	; 0x712 <DIO_SetPinDirection+0x1f2>
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
     672:	4a b3       	in	r20, 0x1a	; 26
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	c9 01       	movw	r24, r18
     67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_SetPinDirection+0x160>
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	6a 95       	dec	r22
     682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_SetPinDirection+0x15c>
     684:	98 2f       	mov	r25, r24
     686:	90 95       	com	r25
     688:	94 23       	and	r25, r20
     68a:	9a bb       	out	0x1a, r25	; 26
     68c:	9b b3       	in	r25, 0x1b	; 27
     68e:	89 2b       	or	r24, r25
     690:	8b bb       	out	0x1b, r24	; 27
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     692:	80 e0       	ldi	r24, 0x00	; 0
		else if (Direction == DIO_INPUT_PULLUP_PIN)
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
     694:	08 95       	ret
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
     696:	47 b3       	in	r20, 0x17	; 23
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	c9 01       	movw	r24, r18
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_SetPinDirection+0x184>
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	6a 95       	dec	r22
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_SetPinDirection+0x180>
     6a8:	98 2f       	mov	r25, r24
     6aa:	90 95       	com	r25
     6ac:	94 23       	and	r25, r20
     6ae:	97 bb       	out	0x17, r25	; 23
     6b0:	98 b3       	in	r25, 0x18	; 24
     6b2:	89 2b       	or	r24, r25
     6b4:	88 bb       	out	0x18, r24	; 24
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
     6b8:	08 95       	ret
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); SET_BIT(PORTC_REG,PinNumber); break;
     6ba:	44 b3       	in	r20, 0x14	; 20
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	c9 01       	movw	r24, r18
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_SetPinDirection+0x1a8>
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	6a 95       	dec	r22
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_SetPinDirection+0x1a4>
     6cc:	98 2f       	mov	r25, r24
     6ce:	90 95       	com	r25
     6d0:	94 23       	and	r25, r20
     6d2:	94 bb       	out	0x14, r25	; 20
     6d4:	95 b3       	in	r25, 0x15	; 21
     6d6:	89 2b       	or	r24, r25
     6d8:	85 bb       	out	0x15, r24	; 21
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     6da:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); SET_BIT(PORTC_REG,PinNumber); break;
     6dc:	08 95       	ret
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); SET_BIT(PORTD_REG,PinNumber); break;
     6de:	41 b3       	in	r20, 0x11	; 17
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	c9 01       	movw	r24, r18
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_SetPinDirection+0x1cc>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	6a 95       	dec	r22
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_SetPinDirection+0x1c8>
     6f0:	98 2f       	mov	r25, r24
     6f2:	90 95       	com	r25
     6f4:	94 23       	and	r25, r20
     6f6:	91 bb       	out	0x11, r25	; 17
     6f8:	92 b3       	in	r25, 0x12	; 18
     6fa:	89 2b       	or	r24, r25
     6fc:	82 bb       	out	0x12, r24	; 18
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); SET_BIT(PORTC_REG,PinNumber); break;
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); SET_BIT(PORTD_REG,PinNumber); break;
     700:	08 95       	ret
Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
	{
		ReturnError = FunctionParameterError;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	08 95       	ret
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
			case PORTD : SET_BIT(DDRD_REG,PinNumber); break;
			default : ReturnError = FunctionParameterError; break;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	08 95       	ret
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	08 95       	ret
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); SET_BIT(PORTD_REG,PinNumber); break;
			}
		}
		else
		{
			ReturnError = FunctionParameterError;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	08 95       	ret
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8 Port ,uint8 PinNumber , uint8 Direction)
{
	Error_t ReturnError = NoError;
     712:	80 e0       	ldi	r24, 0x00	; 0
			ReturnError = FunctionParameterError;
		}
	}

	return ReturnError;
}
     714:	08 95       	ret

00000716 <DIO_WritePin>:

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;

	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
     716:	68 30       	cpi	r22, 0x08	; 8
     718:	08 f0       	brcs	.+2      	; 0x71c <DIO_WritePin+0x6>
     71a:	8f c0       	rjmp	.+286    	; 0x83a <DIO_WritePin+0x124>
	{
		ReturnError = FunctionParameterError;
	}
	else
	{
		if(VoltageLevel == DIO_HIGH_PIN)
     71c:	41 30       	cpi	r20, 0x01	; 1
     71e:	09 f0       	breq	.+2      	; 0x722 <DIO_WritePin+0xc>
     720:	43 c0       	rjmp	.+134    	; 0x7a8 <DIO_WritePin+0x92>
		{
			switch(Port)
     722:	82 30       	cpi	r24, 0x02	; 2
     724:	b9 f0       	breq	.+46     	; 0x754 <DIO_WritePin+0x3e>
     726:	18 f4       	brcc	.+6      	; 0x72e <DIO_WritePin+0x18>
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	31 f0       	breq	.+12     	; 0x738 <DIO_WritePin+0x22>
     72c:	88 c0       	rjmp	.+272    	; 0x83e <DIO_WritePin+0x128>
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	f9 f0       	breq	.+62     	; 0x770 <DIO_WritePin+0x5a>
     732:	84 30       	cpi	r24, 0x04	; 4
     734:	59 f1       	breq	.+86     	; 0x78c <DIO_WritePin+0x76>
     736:	83 c0       	rjmp	.+262    	; 0x83e <DIO_WritePin+0x128>
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
     738:	2b b3       	in	r18, 0x1b	; 27
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	ac 01       	movw	r20, r24
     740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_WritePin+0x30>
     742:	44 0f       	add	r20, r20
     744:	55 1f       	adc	r21, r21
     746:	6a 95       	dec	r22
     748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_WritePin+0x2c>
     74a:	ba 01       	movw	r22, r20
     74c:	62 2b       	or	r22, r18
     74e:	6b bb       	out	0x1b, r22	; 27
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     750:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(VoltageLevel == DIO_HIGH_PIN)
		{
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
     752:	08 95       	ret
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
     754:	28 b3       	in	r18, 0x18	; 24
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	ac 01       	movw	r20, r24
     75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_WritePin+0x4c>
     75e:	44 0f       	add	r20, r20
     760:	55 1f       	adc	r21, r21
     762:	6a 95       	dec	r22
     764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_WritePin+0x48>
     766:	ba 01       	movw	r22, r20
     768:	62 2b       	or	r22, r18
     76a:	68 bb       	out	0x18, r22	; 24
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     76c:	80 e0       	ldi	r24, 0x00	; 0
		if(VoltageLevel == DIO_HIGH_PIN)
		{
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
     76e:	08 95       	ret
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
     770:	25 b3       	in	r18, 0x15	; 21
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	ac 01       	movw	r20, r24
     778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_WritePin+0x68>
     77a:	44 0f       	add	r20, r20
     77c:	55 1f       	adc	r21, r21
     77e:	6a 95       	dec	r22
     780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_WritePin+0x64>
     782:	ba 01       	movw	r22, r20
     784:	62 2b       	or	r22, r18
     786:	65 bb       	out	0x15, r22	; 21
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     788:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
     78a:	08 95       	ret
			case PORTD: SET_BIT(PORTD_REG,PinNumber); break;
     78c:	22 b3       	in	r18, 0x12	; 18
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	ac 01       	movw	r20, r24
     794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_WritePin+0x84>
     796:	44 0f       	add	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	6a 95       	dec	r22
     79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_WritePin+0x80>
     79e:	ba 01       	movw	r22, r20
     7a0:	62 2b       	or	r22, r18
     7a2:	62 bb       	out	0x12, r22	; 18
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
			case PORTD: SET_BIT(PORTD_REG,PinNumber); break;
     7a6:	08 95       	ret
			default : ReturnError = FunctionParameterError; break;
			}

		}
		else if (VoltageLevel == DIO_LOW_PIN)
     7a8:	41 11       	cpse	r20, r1
     7aa:	4b c0       	rjmp	.+150    	; 0x842 <DIO_WritePin+0x12c>
		{
			switch(Port)
     7ac:	82 30       	cpi	r24, 0x02	; 2
     7ae:	c1 f0       	breq	.+48     	; 0x7e0 <DIO_WritePin+0xca>
     7b0:	18 f4       	brcc	.+6      	; 0x7b8 <DIO_WritePin+0xa2>
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	31 f0       	breq	.+12     	; 0x7c2 <DIO_WritePin+0xac>
     7b6:	47 c0       	rjmp	.+142    	; 0x846 <DIO_WritePin+0x130>
     7b8:	83 30       	cpi	r24, 0x03	; 3
     7ba:	09 f1       	breq	.+66     	; 0x7fe <DIO_WritePin+0xe8>
     7bc:	84 30       	cpi	r24, 0x04	; 4
     7be:	71 f1       	breq	.+92     	; 0x81c <DIO_WritePin+0x106>
     7c0:	42 c0       	rjmp	.+132    	; 0x846 <DIO_WritePin+0x130>
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
     7c2:	2b b3       	in	r18, 0x1b	; 27
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	ac 01       	movw	r20, r24
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_WritePin+0xba>
     7cc:	44 0f       	add	r20, r20
     7ce:	55 1f       	adc	r21, r21
     7d0:	6a 95       	dec	r22
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_WritePin+0xb6>
     7d4:	ba 01       	movw	r22, r20
     7d6:	60 95       	com	r22
     7d8:	62 23       	and	r22, r18
     7da:	6b bb       	out	0x1b, r22	; 27
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (VoltageLevel == DIO_LOW_PIN)
		{
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
     7de:	08 95       	ret
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
     7e0:	28 b3       	in	r18, 0x18	; 24
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	ac 01       	movw	r20, r24
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_WritePin+0xd8>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	6a 95       	dec	r22
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_WritePin+0xd4>
     7f2:	ba 01       	movw	r22, r20
     7f4:	60 95       	com	r22
     7f6:	62 23       	and	r22, r18
     7f8:	68 bb       	out	0x18, r22	; 24
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
		else if (VoltageLevel == DIO_LOW_PIN)
		{
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
     7fc:	08 95       	ret
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
     7fe:	25 b3       	in	r18, 0x15	; 21
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	ac 01       	movw	r20, r24
     806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_WritePin+0xf6>
     808:	44 0f       	add	r20, r20
     80a:	55 1f       	adc	r21, r21
     80c:	6a 95       	dec	r22
     80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_WritePin+0xf2>
     810:	ba 01       	movw	r22, r20
     812:	60 95       	com	r22
     814:	62 23       	and	r22, r18
     816:	65 bb       	out	0x15, r22	; 21
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     818:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
     81a:	08 95       	ret
			case PORTD: CLEAR_BIT(PORTD_REG,PinNumber); break;
     81c:	22 b3       	in	r18, 0x12	; 18
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	ac 01       	movw	r20, r24
     824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_WritePin+0x114>
     826:	44 0f       	add	r20, r20
     828:	55 1f       	adc	r21, r21
     82a:	6a 95       	dec	r22
     82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_WritePin+0x110>
     82e:	ba 01       	movw	r22, r20
     830:	60 95       	com	r22
     832:	62 23       	and	r22, r18
     834:	62 bb       	out	0x12, r22	; 18
	return ReturnError;
}

Error_t DIO_WritePin(uint8 Port , uint8 PinNumber ,uint8 VoltageLevel)
{
	Error_t ReturnError = NoError;
     836:	80 e0       	ldi	r24, 0x00	; 0
			switch(Port)
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
			case PORTD: CLEAR_BIT(PORTD_REG,PinNumber); break;
     838:	08 95       	ret
{
	Error_t ReturnError = NoError;

	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
	{
		ReturnError = FunctionParameterError;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	08 95       	ret
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
			case PORTD: SET_BIT(PORTD_REG,PinNumber); break;
			default : ReturnError = FunctionParameterError; break;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	08 95       	ret
			}

		}
		else
		{
			ReturnError = FunctionParameterError;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	08 95       	ret
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
			case PORTD: CLEAR_BIT(PORTD_REG,PinNumber); break;
			default : ReturnError = FunctionParameterError; break;
     846:	81 e0       	ldi	r24, 0x01	; 1
		{
			ReturnError = FunctionParameterError;
		}
	}
	return ReturnError;
}
     848:	08 95       	ret

0000084a <DIO_ReadPin>:
}

Error_t DIO_ReadPin(uint8 Port , uint8 PinNumber , uint8 * PinVal)
{
	Error_t ReturnError = NoError;
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
     84a:	68 30       	cpi	r22, 0x08	; 8
     84c:	08 f0       	brcs	.+2      	; 0x850 <DIO_ReadPin+0x6>
     84e:	64 c0       	rjmp	.+200    	; 0x918 <__stack+0xb9>
	{
		ReturnError = FunctionParameterError;
	}
	else
	{
		switch(Port)
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	01 f1       	breq	.+64     	; 0x894 <__stack+0x35>
     854:	18 f4       	brcc	.+6      	; 0x85c <DIO_ReadPin+0x12>
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	39 f0       	breq	.+14     	; 0x868 <__stack+0x9>
     85a:	60 c0       	rjmp	.+192    	; 0x91c <__stack+0xbd>
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	81 f1       	breq	.+96     	; 0x8c0 <__stack+0x61>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x7>
     864:	43 c0       	rjmp	.+134    	; 0x8ec <__stack+0x8d>
     866:	5a c0       	rjmp	.+180    	; 0x91c <__stack+0xbd>
		{
		case PORTA: *PinVal = GET_BIT(PINA_REG,PinNumber); break;
     868:	89 b3       	in	r24, 0x19	; 25
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	06 2e       	mov	r0, r22
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	22 0f       	add	r18, r18
     874:	33 1f       	adc	r19, r19
     876:	0a 94       	dec	r0
     878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	82 23       	and	r24, r18
     87e:	93 23       	and	r25, r19
     880:	9c 01       	movw	r18, r24
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
     884:	35 95       	asr	r19
     886:	27 95       	ror	r18
     888:	6a 95       	dec	r22
     88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
     88c:	fa 01       	movw	r30, r20
     88e:	20 83       	st	Z, r18
	return ReturnError;
}

Error_t DIO_ReadPin(uint8 Port , uint8 PinNumber , uint8 * PinVal)
{
	Error_t ReturnError = NoError;
     890:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		switch(Port)
		{
		case PORTA: *PinVal = GET_BIT(PINA_REG,PinNumber); break;
     892:	08 95       	ret
		case PORTB: *PinVal = GET_BIT(PINB_REG,PinNumber); break;
     894:	86 b3       	in	r24, 0x16	; 22
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	06 2e       	mov	r0, r22
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	22 0f       	add	r18, r18
     8a0:	33 1f       	adc	r19, r19
     8a2:	0a 94       	dec	r0
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	82 23       	and	r24, r18
     8aa:	93 23       	and	r25, r19
     8ac:	9c 01       	movw	r18, r24
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
     8b0:	35 95       	asr	r19
     8b2:	27 95       	ror	r18
     8b4:	6a 95       	dec	r22
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	fa 01       	movw	r30, r20
     8ba:	20 83       	st	Z, r18
	return ReturnError;
}

Error_t DIO_ReadPin(uint8 Port , uint8 PinNumber , uint8 * PinVal)
{
	Error_t ReturnError = NoError;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		switch(Port)
		{
		case PORTA: *PinVal = GET_BIT(PINA_REG,PinNumber); break;
		case PORTB: *PinVal = GET_BIT(PINB_REG,PinNumber); break;
     8be:	08 95       	ret
		case PORTC: *PinVal = GET_BIT(PINC_REG,PinNumber); break;
     8c0:	83 b3       	in	r24, 0x13	; 19
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	06 2e       	mov	r0, r22
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
     8ca:	22 0f       	add	r18, r18
     8cc:	33 1f       	adc	r19, r19
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	82 23       	and	r24, r18
     8d6:	93 23       	and	r25, r19
     8d8:	9c 01       	movw	r18, r24
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
     8dc:	35 95       	asr	r19
     8de:	27 95       	ror	r18
     8e0:	6a 95       	dec	r22
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
     8e4:	fa 01       	movw	r30, r20
     8e6:	20 83       	st	Z, r18
	return ReturnError;
}

Error_t DIO_ReadPin(uint8 Port , uint8 PinNumber , uint8 * PinVal)
{
	Error_t ReturnError = NoError;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Port)
		{
		case PORTA: *PinVal = GET_BIT(PINA_REG,PinNumber); break;
		case PORTB: *PinVal = GET_BIT(PINB_REG,PinNumber); break;
		case PORTC: *PinVal = GET_BIT(PINC_REG,PinNumber); break;
     8ea:	08 95       	ret
		case PORTD: *PinVal = GET_BIT(PIND_REG,PinNumber); break;
     8ec:	80 b3       	in	r24, 0x10	; 16
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	06 2e       	mov	r0, r22
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
     8fa:	0a 94       	dec	r0
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__stack+0x97>
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	82 23       	and	r24, r18
     902:	93 23       	and	r25, r19
     904:	9c 01       	movw	r18, r24
     906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
     908:	35 95       	asr	r19
     90a:	27 95       	ror	r18
     90c:	6a 95       	dec	r22
     90e:	e2 f7       	brpl	.-8      	; 0x908 <__stack+0xa9>
     910:	fa 01       	movw	r30, r20
     912:	20 83       	st	Z, r18
	return ReturnError;
}

Error_t DIO_ReadPin(uint8 Port , uint8 PinNumber , uint8 * PinVal)
{
	Error_t ReturnError = NoError;
     914:	80 e0       	ldi	r24, 0x00	; 0
		switch(Port)
		{
		case PORTA: *PinVal = GET_BIT(PINA_REG,PinNumber); break;
		case PORTB: *PinVal = GET_BIT(PINB_REG,PinNumber); break;
		case PORTC: *PinVal = GET_BIT(PINC_REG,PinNumber); break;
		case PORTD: *PinVal = GET_BIT(PIND_REG,PinNumber); break;
     916:	08 95       	ret
Error_t DIO_ReadPin(uint8 Port , uint8 PinNumber , uint8 * PinVal)
{
	Error_t ReturnError = NoError;
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
	{
		ReturnError = FunctionParameterError;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	08 95       	ret
		{
		case PORTA: *PinVal = GET_BIT(PINA_REG,PinNumber); break;
		case PORTB: *PinVal = GET_BIT(PINB_REG,PinNumber); break;
		case PORTC: *PinVal = GET_BIT(PINC_REG,PinNumber); break;
		case PORTD: *PinVal = GET_BIT(PIND_REG,PinNumber); break;
		default : ReturnError = FunctionParameterError; break;
     91c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return ReturnError;
}
     91e:	08 95       	ret

00000920 <KeyPad_Setup>:
		#elif (KEYPAD_COL0 > PIN7) || (KEYPAD_COL1 > PIN7) || (KEYPAD_COL2 > PIN7) || (KEYPAD_COL3 > PIN7)|| (KEYPAD_ROW0 > PIN7) || (KEYPAD_ROW1 > PIN7) || (KEYPAD_ROW2 > PIN7) || (KEYPAD_ROW3> PIN7)
			#error "One of keypad pin in KeyPad_Config.h is not defined correctly"
		#endif /*Error handling*/

		/*Set keypad rows as input*/
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW0,DIO_INPUT_PULLUP_PIN);
     920:	43 e0       	ldi	r20, 0x03	; 3
     922:	64 e0       	ldi	r22, 0x04	; 4
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW1,DIO_INPUT_PULLUP_PIN);
     92a:	43 e0       	ldi	r20, 0x03	; 3
     92c:	65 e0       	ldi	r22, 0x05	; 5
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW2,DIO_INPUT_PULLUP_PIN);
     934:	43 e0       	ldi	r20, 0x03	; 3
     936:	66 e0       	ldi	r22, 0x06	; 6
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW3,DIO_INPUT_PULLUP_PIN);
     93e:	43 e0       	ldi	r20, 0x03	; 3
     940:	67 e0       	ldi	r22, 0x07	; 7
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		/*Set keypad col as output*/
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL0,DIO_OUTPUT_PIN);
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL1,DIO_OUTPUT_PIN);
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL2,DIO_OUTPUT_PIN);
     95c:	41 e0       	ldi	r20, 0x01	; 1
     95e:	62 e0       	ldi	r22, 0x02	; 2
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL3,DIO_OUTPUT_PIN);
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	63 e0       	ldi	r22, 0x03	; 3
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
		/*Set keypad rows as high initial state*/
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL0,DIO_HIGH_PIN);
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL1,DIO_HIGH_PIN);
     97a:	41 e0       	ldi	r20, 0x01	; 1
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL2,DIO_HIGH_PIN);
     984:	41 e0       	ldi	r20, 0x01	; 1
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL3,DIO_HIGH_PIN);
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	63 e0       	ldi	r22, 0x03	; 3
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
     998:	08 95       	ret

0000099a <KeyPad_GetValue>:
	#endif /*KEYPAD_TYPE*/
}
void KeyPad_GetValue(uint8 *ReturnedValue)
{
     99a:	2f 92       	push	r2
     99c:	3f 92       	push	r3
     99e:	4f 92       	push	r4
     9a0:	5f 92       	push	r5
     9a2:	6f 92       	push	r6
     9a4:	7f 92       	push	r7
     9a6:	8f 92       	push	r8
     9a8:	9f 92       	push	r9
     9aa:	af 92       	push	r10
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	6b 97       	sbiw	r28, 0x1b	; 27
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	9b 8f       	std	Y+27, r25	; 0x1b
     9d0:	8a 8f       	std	Y+26, r24	; 0x1a
	*ReturnedValue = KEYPAD_NOT_PRESSED;
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	ea 8d       	ldd	r30, Y+26	; 0x1a
     9d6:	fb 8d       	ldd	r31, Y+27	; 0x1b
     9d8:	80 83       	st	Z, r24
	#if KEYPAD_TYPE == KeyPad_4x4
		uint8 KeyPad_Arr[4][4] = KEYPAD_CHARACTERS;
     9da:	80 e1       	ldi	r24, 0x10	; 16
     9dc:	e1 e6       	ldi	r30, 0x61	; 97
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	de 01       	movw	r26, r28
     9e2:	11 96       	adiw	r26, 0x01	; 1
     9e4:	01 90       	ld	r0, Z+
     9e6:	0d 92       	st	X+, r0
     9e8:	8a 95       	dec	r24
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <KeyPad_GetValue+0x4a>
		const uint8 Col_Arr[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
     9ec:	19 8a       	std	Y+17, r1	; 0x11
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	8a 8b       	std	Y+18, r24	; 0x12
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	9b 8b       	std	Y+19, r25	; 0x13
     9f6:	93 e0       	ldi	r25, 0x03	; 3
     9f8:	9c 8b       	std	Y+20, r25	; 0x14
		const uint8 Row_Arr[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	9d 8b       	std	Y+21, r25	; 0x15
     9fe:	95 e0       	ldi	r25, 0x05	; 5
     a00:	9e 8b       	std	Y+22, r25	; 0x16
     a02:	96 e0       	ldi	r25, 0x06	; 6
     a04:	9f 8b       	std	Y+23, r25	; 0x17
     a06:	97 e0       	ldi	r25, 0x07	; 7
     a08:	98 8f       	std	Y+24, r25	; 0x18
		uint8 ColIterator = 0;
		uint8 RowIterator = 0;
		uint8 RowVal = DIO_HIGH_PIN;
     a0a:	89 8f       	std	Y+25, r24	; 0x19
     a0c:	4e 01       	movw	r8, r28
     a0e:	f1 e1       	ldi	r31, 0x11	; 17
     a10:	8f 0e       	add	r8, r31
     a12:	91 1c       	adc	r9, r1
     a14:	c1 2c       	mov	r12, r1
     a16:	d1 2c       	mov	r13, r1
		for(ColIterator = 0 ; ColIterator < 4 ; ColIterator++)
		{
			/*Drive a high signal for required col*/
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_LOW_PIN);
     a18:	41 2c       	mov	r4, r1
     a1a:	51 2c       	mov	r5, r1
     a1c:	36 01       	movw	r6, r12
     a1e:	f4 01       	movw	r30, r8
     a20:	21 90       	ld	r2, Z+
     a22:	4f 01       	movw	r8, r30
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	62 2d       	mov	r22, r2
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
     a2e:	ce 01       	movw	r24, r28
     a30:	45 96       	adiw	r24, 0x15	; 21
     a32:	7c 01       	movw	r14, r24
     a34:	04 2d       	mov	r16, r4
     a36:	15 2d       	mov	r17, r5
			/*Check if the high signal dirved to row*/
			for(RowIterator = 0 ; RowIterator < 4 ; RowIterator++)
			{
				DIO_ReadPin(KEYPAD_PORT,Row_Arr[RowIterator],&RowVal);
     a38:	f7 01       	movw	r30, r14
     a3a:	31 90       	ld	r3, Z+
     a3c:	7f 01       	movw	r14, r30
     a3e:	ae 01       	movw	r20, r28
     a40:	47 5e       	subi	r20, 0xE7	; 231
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	63 2d       	mov	r22, r3
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_ReadPin>
				if(RowVal == DIO_LOW_PIN)
     a4c:	89 8d       	ldd	r24, Y+25	; 0x19
     a4e:	81 11       	cpse	r24, r1
     a50:	19 c0       	rjmp	.+50     	; 0xa84 <KeyPad_GetValue+0xea>
				{
					*ReturnedValue = KeyPad_Arr[RowIterator][ColIterator];
     a52:	f8 01       	movw	r30, r16
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	6e 0e       	add	r6, r30
     a5e:	7f 1e       	adc	r7, r31
     a60:	e1 e0       	ldi	r30, 0x01	; 1
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ec 0f       	add	r30, r28
     a66:	fd 1f       	adc	r31, r29
     a68:	e6 0d       	add	r30, r6
     a6a:	f7 1d       	adc	r31, r7
     a6c:	80 81       	ld	r24, Z
     a6e:	ea 8d       	ldd	r30, Y+26	; 0x1a
     a70:	fb 8d       	ldd	r31, Y+27	; 0x1b
     a72:	80 83       	st	Z, r24
					DIO_ReadPin(KEYPAD_PORT,Row_Arr[RowIterator],&RowVal);
     a74:	ae 01       	movw	r20, r28
     a76:	47 5e       	subi	r20, 0xE7	; 231
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	63 2d       	mov	r22, r3
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_ReadPin>
					break;
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <KeyPad_GetValue+0xf4>
     a84:	0f 5f       	subi	r16, 0xFF	; 255
     a86:	1f 4f       	sbci	r17, 0xFF	; 255
		for(ColIterator = 0 ; ColIterator < 4 ; ColIterator++)
		{
			/*Drive a high signal for required col*/
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_LOW_PIN);
			/*Check if the high signal dirved to row*/
			for(RowIterator = 0 ; RowIterator < 4 ; RowIterator++)
     a88:	04 30       	cpi	r16, 0x04	; 4
     a8a:	11 05       	cpc	r17, r1
     a8c:	a9 f6       	brne	.-86     	; 0xa38 <KeyPad_GetValue+0x9e>
					*ReturnedValue = KeyPad_Arr[RowIterator][ColIterator];
					DIO_ReadPin(KEYPAD_PORT,Row_Arr[RowIterator],&RowVal);
					break;
				}
			}
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_HIGH_PIN);
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	62 2d       	mov	r22, r2
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
     a98:	ff ef       	ldi	r31, 0xFF	; 255
     a9a:	cf 1a       	sub	r12, r31
     a9c:	df 0a       	sbc	r13, r31
		const uint8 Col_Arr[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
		const uint8 Row_Arr[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
		uint8 ColIterator = 0;
		uint8 RowIterator = 0;
		uint8 RowVal = DIO_HIGH_PIN;
		for(ColIterator = 0 ; ColIterator < 4 ; ColIterator++)
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	c8 16       	cp	r12, r24
     aa2:	d1 04       	cpc	r13, r1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <KeyPad_GetValue+0x10e>
     aa6:	ba cf       	rjmp	.-140    	; 0xa1c <KeyPad_GetValue+0x82>
				}
			}
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_HIGH_PIN);
		}
	#endif /*KEYPAD_TYPE*/
}
     aa8:	6b 96       	adiw	r28, 0x1b	; 27
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	9f 90       	pop	r9
     aca:	8f 90       	pop	r8
     acc:	7f 90       	pop	r7
     ace:	6f 90       	pop	r6
     ad0:	5f 90       	pop	r5
     ad2:	4f 90       	pop	r4
     ad4:	3f 90       	pop	r3
     ad6:	2f 90       	pop	r2
     ad8:	08 95       	ret

00000ada <main>:
#include "Potentiometer.h"
#include "MotorDashBoard_Config.h"
#include "MotorDashBoard.h"

int main(void)
{
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	61 97       	sbiw	r28, 0x11	; 17
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
	/*Define variables*/
	DCMotor_t DcMotor      = {PORTD,PIN6,PIN7};
     aee:	84 e0       	ldi	r24, 0x04	; 4
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	96 e0       	ldi	r25, 0x06	; 6
     af4:	9a 83       	std	Y+2, r25	; 0x02
     af6:	97 e0       	ldi	r25, 0x07	; 7
     af8:	9b 83       	std	Y+3, r25	; 0x03
	Stepper_t StepperMotor = {PORTD,PIN0,PIN1,PIN2,PIN3,STEPPER_FULL_STEP_MODE};
     afa:	96 e0       	ldi	r25, 0x06	; 6
     afc:	e1 e7       	ldi	r30, 0x71	; 113
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	de 01       	movw	r26, r28
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	01 90       	ld	r0, Z+
     b06:	0d 92       	st	X+, r0
     b08:	9a 95       	dec	r25
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <main+0x2a>
	Servo_t	  ServoMotor   = {PORTD,PIN5};
     b0c:	8a 87       	std	Y+10, r24	; 0x0a
     b0e:	95 e0       	ldi	r25, 0x05	; 5
     b10:	9b 87       	std	Y+11, r25	; 0x0b
	Buzzer_t  Buzzer	   = {PORTD,PIN4};
     b12:	8c 87       	std	Y+12, r24	; 0x0c
     b14:	8d 87       	std	Y+13, r24	; 0x0d
	uint8	  UserID = 0;	
     b16:	1e 86       	std	Y+14, r1	; 0x0e
	uint8     EnterdOption = 0;
     b18:	1f 86       	std	Y+15, r1	; 0x0f
	uint16    MotorAngle = 0; /*For servo and stepper angles*/
     b1a:	19 8a       	std	Y+17, r1	; 0x11
     b1c:	18 8a       	std	Y+16, r1	; 0x10
	
	/*Initiate Hardware*/
	CLCD_Setup();
     b1e:	0e 94 3c 01 	call	0x278	; 0x278 <CLCD_Setup>
	KeyPad_Setup();
     b22:	0e 94 90 04 	call	0x920	; 0x920 <KeyPad_Setup>
	DCMotor_Setup(&DcMotor);
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	0e 94 c0 01 	call	0x380	; 0x380 <DCMotor_Setup>
	Stepper_Setup(&StepperMotor);
     b2e:	ce 01       	movw	r24, r28
     b30:	04 96       	adiw	r24, 0x04	; 4
     b32:	0e 94 73 09 	call	0x12e6	; 0x12e6 <Stepper_Setup>
	Servo_Setup(&ServoMotor);
     b36:	ce 01       	movw	r24, r28
     b38:	0a 96       	adiw	r24, 0x0a	; 10
     b3a:	0e 94 28 09 	call	0x1250	; 0x1250 <Servo_Setup>
	Buzzer_Setup(&Buzzer);
     b3e:	ce 01       	movw	r24, r28
     b40:	0c 96       	adiw	r24, 0x0c	; 12
     b42:	0e 94 7b 00 	call	0xf6	; 0xf6 <Buzzer_Setup>

	while (1)
	{
		LoginSystem();
     b46:	0e 94 a3 06 	call	0xd46	; 0xd46 <LoginSystem>
		GetUserID(&UserID,&Buzzer);
     b4a:	be 01       	movw	r22, r28
     b4c:	64 5f       	subi	r22, 0xF4	; 244
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	0e 96       	adiw	r24, 0x0e	; 14
     b54:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GetUserID>
		PrintUserName(UserID);
     b58:	8e 85       	ldd	r24, Y+14	; 0x0e
     b5a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <PrintUserName>
		
		/*For right user name*/
		if(UserID == MASTER_ID || UserID == ASSISTANT1_ID || UserID == ASSISTANT2_ID || UserID == ASSISTANT3_ID)
     b5e:	8e 85       	ldd	r24, Y+14	; 0x0e
     b60:	8b 37       	cpi	r24, 0x7B	; 123
     b62:	41 f0       	breq	.+16     	; 0xb74 <main+0x9a>
     b64:	89 31       	cpi	r24, 0x19	; 25
     b66:	41 f0       	breq	.+16     	; 0xb78 <main+0x9e>
     b68:	8b 3d       	cpi	r24, 0xDB	; 219
     b6a:	31 f0       	breq	.+12     	; 0xb78 <main+0x9e>
     b6c:	84 36       	cpi	r24, 0x64	; 100
     b6e:	09 f0       	breq	.+2      	; 0xb72 <main+0x98>
     b70:	cf c0       	rjmp	.+414    	; 0xd10 <main+0x236>
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <main+0x9e>
		{
			if(UserID == MASTER_ID)
			{
				PrintMasterMsg();
     b74:	0e 94 3c 07 	call	0xe78	; 0xe78 <PrintMasterMsg>
			}
			while(EnterdOption == 0)
     b78:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7a:	81 11       	cpse	r24, r1
     b7c:	0a c0       	rjmp	.+20     	; 0xb92 <main+0xb8>
			{
				GetChoice(&EnterdOption , &Buzzer);
     b7e:	be 01       	movw	r22, r28
     b80:	64 5f       	subi	r22, 0xF4	; 244
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	ce 01       	movw	r24, r28
     b86:	0f 96       	adiw	r24, 0x0f	; 15
     b88:	0e 94 19 08 	call	0x1032	; 0x1032 <GetChoice>
		{
			if(UserID == MASTER_ID)
			{
				PrintMasterMsg();
			}
			while(EnterdOption == 0)
     b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8e:	88 23       	and	r24, r24
     b90:	b1 f3       	breq	.-20     	; 0xb7e <main+0xa4>
			{
				GetChoice(&EnterdOption , &Buzzer);
			}
			
			/*DC motor*/
			if (EnterdOption == DC_MOTOR_CHOICE || UserID == ASSISTANT1_ID)
     b92:	81 33       	cpi	r24, 0x31	; 49
     b94:	09 f4       	brne	.+2      	; 0xb98 <main+0xbe>
     b96:	ce c0       	rjmp	.+412    	; 0xd34 <main+0x25a>
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	99 31       	cpi	r25, 0x19	; 25
     b9c:	09 f0       	breq	.+2      	; 0xba0 <main+0xc6>
     b9e:	4f c0       	rjmp	.+158    	; 0xc3e <main+0x164>
			{
				PrintScreen(DC_MOTOR_TYPE,SCREEN_1);
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
				EnterdOption = 0;
     ba8:	1f 86       	std	Y+15, r1	; 0x0f
				while(EnterdOption == 0)
				{
					GetChoice(&EnterdOption , &Buzzer);
     baa:	be 01       	movw	r22, r28
     bac:	64 5f       	subi	r22, 0xF4	; 244
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	ce 01       	movw	r24, r28
     bb2:	0f 96       	adiw	r24, 0x0f	; 15
     bb4:	0e 94 19 08 	call	0x1032	; 0x1032 <GetChoice>
			/*DC motor*/
			if (EnterdOption == DC_MOTOR_CHOICE || UserID == ASSISTANT1_ID)
			{
				PrintScreen(DC_MOTOR_TYPE,SCREEN_1);
				EnterdOption = 0;
				while(EnterdOption == 0)
     bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bba:	88 23       	and	r24, r24
     bbc:	b1 f3       	breq	.-20     	; 0xbaa <main+0xd0>
				{
					GetChoice(&EnterdOption , &Buzzer);
				}
				if(EnterdOption == TURN_ON_CHOICE)
     bbe:	81 33       	cpi	r24, 0x31	; 49
     bc0:	b1 f5       	brne	.+108    	; 0xc2e <main+0x154>
				{
					EnterdOption = 0;
     bc2:	1f 86       	std	Y+15, r1	; 0x0f
					PrintScreen(DC_MOTOR_TYPE,SCREEN_2);
     bc4:	62 e0       	ldi	r22, 0x02	; 2
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
					while(EnterdOption == 0)
     bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bce:	81 11       	cpse	r24, r1
     bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <main+0x10c>
					{
						GetChoice(&EnterdOption , &Buzzer);
     bd2:	be 01       	movw	r22, r28
     bd4:	64 5f       	subi	r22, 0xF4	; 244
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	ce 01       	movw	r24, r28
     bda:	0f 96       	adiw	r24, 0x0f	; 15
     bdc:	0e 94 19 08 	call	0x1032	; 0x1032 <GetChoice>
				}
				if(EnterdOption == TURN_ON_CHOICE)
				{
					EnterdOption = 0;
					PrintScreen(DC_MOTOR_TYPE,SCREEN_2);
					while(EnterdOption == 0)
     be0:	8f 85       	ldd	r24, Y+15	; 0x0f
     be2:	88 23       	and	r24, r24
     be4:	b1 f3       	breq	.-20     	; 0xbd2 <main+0xf8>
					{
						GetChoice(&EnterdOption , &Buzzer);
					}
					if (EnterdOption == FULL_SPEED_CHOICE)
     be6:	81 33       	cpi	r24, 0x31	; 49
     be8:	09 f0       	breq	.+2      	; 0xbec <main+0x112>
     bea:	8d c0       	rjmp	.+282    	; 0xd06 <main+0x22c>
					{
						EnterdOption = 0;
     bec:	1f 86       	std	Y+15, r1	; 0x0f
						PrintScreen(DC_MOTOR_TYPE,SCREEN_3);
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
						while(EnterdOption == 0)
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	81 11       	cpse	r24, r1
     bfa:	0a c0       	rjmp	.+20     	; 0xc10 <main+0x136>
						{
							GetChoice(&EnterdOption , &Buzzer);
     bfc:	be 01       	movw	r22, r28
     bfe:	64 5f       	subi	r22, 0xF4	; 244
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	ce 01       	movw	r24, r28
     c04:	0f 96       	adiw	r24, 0x0f	; 15
     c06:	0e 94 19 08 	call	0x1032	; 0x1032 <GetChoice>
					}
					if (EnterdOption == FULL_SPEED_CHOICE)
					{
						EnterdOption = 0;
						PrintScreen(DC_MOTOR_TYPE,SCREEN_3);
						while(EnterdOption == 0)
     c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0c:	88 23       	and	r24, r24
     c0e:	b1 f3       	breq	.-20     	; 0xbfc <main+0x122>
						{
							GetChoice(&EnterdOption , &Buzzer);
						}
						switch(EnterdOption)
     c10:	81 33       	cpi	r24, 0x31	; 49
     c12:	19 f0       	breq	.+6      	; 0xc1a <main+0x140>
     c14:	82 33       	cpi	r24, 0x32	; 50
     c16:	31 f0       	breq	.+12     	; 0xc24 <main+0x14a>
     c18:	76 c0       	rjmp	.+236    	; 0xd06 <main+0x22c>
						{
							case CW_CHOICE:DCMotor_MoveCW(&DcMotor); break;
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 00 02 	call	0x400	; 0x400 <DCMotor_MoveCW>
     c22:	71 c0       	rjmp	.+226    	; 0xd06 <main+0x22c>
							case CCW_CHOICE:DCMotor_MoveCCW(&DcMotor); break;
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 40 02 	call	0x480	; 0x480 <DCMotor_MoveCCW>
     c2c:	6c c0       	rjmp	.+216    	; 0xd06 <main+0x22c>
						/*Temp sensor*/
						EnterdOption = 0;
					}
					
				}
				else if (EnterdOption == TURN_OFF_CHOICE)
     c2e:	82 33       	cpi	r24, 0x32	; 50
     c30:	09 f0       	breq	.+2      	; 0xc34 <main+0x15a>
     c32:	69 c0       	rjmp	.+210    	; 0xd06 <main+0x22c>
				{
					DCMotor_Stop(&DcMotor);
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 80 02 	call	0x500	; 0x500 <DCMotor_Stop>
     c3c:	64 c0       	rjmp	.+200    	; 0xd06 <main+0x22c>
				}
			}
			/*Servo angle*/
			else if (EnterdOption == SERVO_MOTOR_CHOICE || UserID == ASSISTANT2_ID)
     c3e:	82 33       	cpi	r24, 0x32	; 50
     c40:	11 f0       	breq	.+4      	; 0xc46 <main+0x16c>
     c42:	9b 3d       	cpi	r25, 0xDB	; 219
     c44:	c1 f4       	brne	.+48     	; 0xc76 <main+0x19c>
			{
				EnterdOption = 0;
     c46:	1f 86       	std	Y+15, r1	; 0x0f
				PrintScreen(SERVO_MOTOR_TYPE,SCREEN_1);
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
				GetAngle(&MotorAngle,&Buzzer);
     c50:	be 01       	movw	r22, r28
     c52:	64 5f       	subi	r22, 0xF4	; 244
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	ce 01       	movw	r24, r28
     c58:	40 96       	adiw	r24, 0x10	; 16
     c5a:	0e 94 c7 08 	call	0x118e	; 0x118e <GetAngle>
				Servo_WriteAngle(&ServoMotor , MotorAngle);
     c5e:	68 89       	ldd	r22, Y+16	; 0x10
     c60:	ce 01       	movw	r24, r28
     c62:	0a 96       	adiw	r24, 0x0a	; 10
     c64:	0e 94 4a 09 	call	0x1294	; 0x1294 <Servo_WriteAngle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c68:	8f e3       	ldi	r24, 0x3F	; 63
     c6a:	9c e9       	ldi	r25, 0x9C	; 156
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <main+0x192>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <main+0x198>
     c72:	00 00       	nop
     c74:	48 c0       	rjmp	.+144    	; 0xd06 <main+0x22c>
				_delay_ms(20);
				
			}
			else if (EnterdOption == STEPPER_MOTOR_CHOICE || UserID == ASSISTANT3_ID)
     c76:	83 33       	cpi	r24, 0x33	; 51
     c78:	19 f0       	breq	.+6      	; 0xc80 <main+0x1a6>
     c7a:	94 36       	cpi	r25, 0x64	; 100
     c7c:	09 f0       	breq	.+2      	; 0xc80 <main+0x1a6>
     c7e:	43 c0       	rjmp	.+134    	; 0xd06 <main+0x22c>
			{
				EnterdOption = 0;
     c80:	1f 86       	std	Y+15, r1	; 0x0f
				PrintScreen(STEPPER_MOTOR_TYPE,SCREEN_1);
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
				while(EnterdOption == 0)
     c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8c:	81 11       	cpse	r24, r1
     c8e:	0a c0       	rjmp	.+20     	; 0xca4 <main+0x1ca>
				{
					GetChoice(&EnterdOption , &Buzzer);
     c90:	be 01       	movw	r22, r28
     c92:	64 5f       	subi	r22, 0xF4	; 244
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	ce 01       	movw	r24, r28
     c98:	0f 96       	adiw	r24, 0x0f	; 15
     c9a:	0e 94 19 08 	call	0x1032	; 0x1032 <GetChoice>
			}
			else if (EnterdOption == STEPPER_MOTOR_CHOICE || UserID == ASSISTANT3_ID)
			{
				EnterdOption = 0;
				PrintScreen(STEPPER_MOTOR_TYPE,SCREEN_1);
				while(EnterdOption == 0)
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	88 23       	and	r24, r24
     ca2:	b1 f3       	breq	.-20     	; 0xc90 <main+0x1b6>
				{
					GetChoice(&EnterdOption , &Buzzer);
				}
				if (EnterdOption == CW_CHOICE)
     ca4:	81 33       	cpi	r24, 0x31	; 49
     ca6:	41 f5       	brne	.+80     	; 0xcf8 <main+0x21e>
				{
					EnterdOption = 0;
     ca8:	1f 86       	std	Y+15, r1	; 0x0f
					PrintScreen(STEPPER_MOTOR_TYPE,SCREEN_2);
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
					while(EnterdOption == 0)
     cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb4:	81 11       	cpse	r24, r1
     cb6:	44 c0       	rjmp	.+136    	; 0xd40 <main+0x266>
					{
						GetChoice(&EnterdOption , &Buzzer);
     cb8:	be 01       	movw	r22, r28
     cba:	64 5f       	subi	r22, 0xF4	; 244
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	ce 01       	movw	r24, r28
     cc0:	0f 96       	adiw	r24, 0x0f	; 15
     cc2:	0e 94 19 08 	call	0x1032	; 0x1032 <GetChoice>
				}
				if (EnterdOption == CW_CHOICE)
				{
					EnterdOption = 0;
					PrintScreen(STEPPER_MOTOR_TYPE,SCREEN_2);
					while(EnterdOption == 0)
     cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc8:	88 23       	and	r24, r24
     cca:	b1 f3       	breq	.-20     	; 0xcb8 <main+0x1de>
					{
						GetChoice(&EnterdOption , &Buzzer);
					}
					if (EnterdOption == TURN_ON_CHOICE)
     ccc:	81 33       	cpi	r24, 0x31	; 49
     cce:	d9 f4       	brne	.+54     	; 0xd06 <main+0x22c>
					{
						EnterdOption = 0;
     cd0:	1f 86       	std	Y+15, r1	; 0x0f
						PrintScreen(STEPPER_MOTOR_TYPE,SCREEN_3);
     cd2:	63 e0       	ldi	r22, 0x03	; 3
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
						GetAngle(&MotorAngle,&Buzzer);
     cda:	be 01       	movw	r22, r28
     cdc:	64 5f       	subi	r22, 0xF4	; 244
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	ce 01       	movw	r24, r28
     ce2:	40 96       	adiw	r24, 0x10	; 16
     ce4:	0e 94 c7 08 	call	0x118e	; 0x118e <GetAngle>
						Stepper_Move(&StepperMotor,STEPPER_CW,MotorAngle);
     ce8:	48 89       	ldd	r20, Y+16	; 0x10
     cea:	59 89       	ldd	r21, Y+17	; 0x11
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	ce 01       	movw	r24, r28
     cf0:	04 96       	adiw	r24, 0x04	; 4
     cf2:	0e 94 8d 09 	call	0x131a	; 0x131a <Stepper_Move>
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <main+0x22c>
						PrintScreen(STEPPER_MOTOR_TYPE,SCREEN_3);
						GetAngle(&MotorAngle,&Buzzer);
						Stepper_Move(&StepperMotor,STEPPER_CCW,MotorAngle);
					}
				}
				else if (EnterdOption == TURN_OFF_CHOICE)
     cf8:	82 33       	cpi	r24, 0x32	; 50
     cfa:	29 f4       	brne	.+10     	; 0xd06 <main+0x22c>
				{
					EnterdOption = 0;
     cfc:	1f 86       	std	Y+15, r1	; 0x0f
					Stepper_Stop(&StepperMotor);
     cfe:	ce 01       	movw	r24, r28
     d00:	04 96       	adiw	r24, 0x04	; 4
     d02:	0e 94 94 0b 	call	0x1728	; 0x1728 <Stepper_Stop>
				}
			}
			/*Reset*/
			UserID = 0;
     d06:	1e 86       	std	Y+14, r1	; 0x0e
			EnterdOption = 0;
     d08:	1f 86       	std	Y+15, r1	; 0x0f
			MotorAngle = 0;
     d0a:	19 8a       	std	Y+17, r1	; 0x11
     d0c:	18 8a       	std	Y+16, r1	; 0x10
			MotorAngle = 0;
     d0e:	1b cf       	rjmp	.-458    	; 0xb46 <main+0x6c>
		}
		else
		{
			CLCD_PrintString("ERROR ID");
     d10:	87 e7       	ldi	r24, 0x77	; 119
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     d18:	9f ef       	ldi	r25, 0xFF	; 255
     d1a:	29 e6       	ldi	r18, 0x69	; 105
     d1c:	88 e1       	ldi	r24, 0x18	; 24
     d1e:	91 50       	subi	r25, 0x01	; 1
     d20:	20 40       	sbci	r18, 0x00	; 0
     d22:	80 40       	sbci	r24, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <main+0x244>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <main+0x24e>
     d28:	00 00       	nop
			_delay_ms(1000);
			/*Reset*/
			UserID = 0;
     d2a:	1e 86       	std	Y+14, r1	; 0x0e
			EnterdOption = 0;
     d2c:	1f 86       	std	Y+15, r1	; 0x0f
			MotorAngle = 0;
     d2e:	19 8a       	std	Y+17, r1	; 0x11
     d30:	18 8a       	std	Y+16, r1	; 0x10
     d32:	09 cf       	rjmp	.-494    	; 0xb46 <main+0x6c>
			}
			
			/*DC motor*/
			if (EnterdOption == DC_MOTOR_CHOICE || UserID == ASSISTANT1_ID)
			{
				PrintScreen(DC_MOTOR_TYPE,SCREEN_1);
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PrintScreen>
				EnterdOption = 0;
     d3c:	1f 86       	std	Y+15, r1	; 0x0f
     d3e:	35 cf       	rjmp	.-406    	; 0xbaa <main+0xd0>
					PrintScreen(STEPPER_MOTOR_TYPE,SCREEN_2);
					while(EnterdOption == 0)
					{
						GetChoice(&EnterdOption , &Buzzer);
					}
					if (EnterdOption == TURN_ON_CHOICE)
     d40:	81 33       	cpi	r24, 0x31	; 49
     d42:	09 f7       	brne	.-62     	; 0xd06 <main+0x22c>
     d44:	c5 cf       	rjmp	.-118    	; 0xcd0 <main+0x1f6>

00000d46 <LoginSystem>:
#include "MotorDashBoard_Config.h"
#include "MotorDashBoard.h"

void LoginSystem(void)
{
	CLCD_ClearCLCD();
     d46:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     d4a:	8f e1       	ldi	r24, 0x1F	; 31
     d4c:	9e e4       	ldi	r25, 0x4E	; 78
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <LoginSystem+0x8>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <LoginSystem+0xe>
     d54:	00 00       	nop
	_delay_ms(10);
	CLCD_SetCursor(0,0);
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
	CLCD_PrintString("Welcome to Motor");
     d5e:	80 e8       	ldi	r24, 0x80	; 128
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
	CLCD_SetCursor(1,1);
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
	CLCD_PrintString("board control");
     d6e:	81 e9       	ldi	r24, 0x91	; 145
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     d76:	9f ef       	ldi	r25, 0xFF	; 255
     d78:	24 e3       	ldi	r18, 0x34	; 52
     d7a:	8c e0       	ldi	r24, 0x0C	; 12
     d7c:	91 50       	subi	r25, 0x01	; 1
     d7e:	20 40       	sbci	r18, 0x00	; 0
     d80:	80 40       	sbci	r24, 0x00	; 0
     d82:	e1 f7       	brne	.-8      	; 0xd7c <LoginSystem+0x36>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <LoginSystem+0x40>
     d86:	00 00       	nop
	_delay_ms(500);
	CLCD_ClearCLCD();
     d88:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     d8c:	8f e1       	ldi	r24, 0x1F	; 31
     d8e:	9e e4       	ldi	r25, 0x4E	; 78
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <LoginSystem+0x4a>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <LoginSystem+0x50>
     d96:	00 00       	nop
	_delay_ms(10);
	CLCD_SetCursor(0,0);
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
	CLCD_PrintString("Enter your ID: ");
     da0:	8f e9       	ldi	r24, 0x9F	; 159
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
	CLCD_SetCursor(0,1);
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     db0:	08 95       	ret

00000db2 <PrintUserName>:
}
void PrintUserName(uint8 Indicator)
{
     db2:	cf 93       	push	r28
     db4:	c8 2f       	mov	r28, r24
	CLCD_ClearCLCD();
     db6:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     dba:	8f e1       	ldi	r24, 0x1F	; 31
     dbc:	9e e4       	ldi	r25, 0x4E	; 78
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <PrintUserName+0xc>
     dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <PrintUserName+0x12>
     dc4:	00 00       	nop
	_delay_ms(10);
	switch(Indicator)
     dc6:	c4 36       	cpi	r28, 0x64	; 100
     dc8:	e1 f1       	breq	.+120    	; 0xe42 <PrintUserName+0x90>
     dca:	18 f4       	brcc	.+6      	; 0xdd2 <PrintUserName+0x20>
     dcc:	c9 31       	cpi	r28, 0x19	; 25
     dce:	b9 f0       	breq	.+46     	; 0xdfe <PrintUserName+0x4c>
     dd0:	48 c0       	rjmp	.+144    	; 0xe62 <PrintUserName+0xb0>
     dd2:	cb 37       	cpi	r28, 0x7B	; 123
     dd4:	19 f0       	breq	.+6      	; 0xddc <PrintUserName+0x2a>
     dd6:	cb 3d       	cpi	r28, 0xDB	; 219
     dd8:	19 f1       	breq	.+70     	; 0xe20 <PrintUserName+0x6e>
     dda:	43 c0       	rjmp	.+134    	; 0xe62 <PrintUserName+0xb0>
	{
		case MASTER_ID : CLCD_SetCursor(0,0); CLCD_PrintString("Welcome Mr:"); CLCD_SetCursor(0,1);CLCD_PrintString(MASTER_NAME);break;
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     de4:	8f ea       	ldi	r24, 0xAF	; 175
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     df4:	8b eb       	ldi	r24, 0xBB	; 187
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     dfc:	32 c0       	rjmp	.+100    	; 0xe62 <PrintUserName+0xb0>
		case ASSISTANT1_ID: CLCD_SetCursor(0,0); CLCD_PrintString("Welcome Mr:"); CLCD_SetCursor(0,1);CLCD_PrintString(ASSISTANT1_NAME); break;
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     e06:	8f ea       	ldi	r24, 0xAF	; 175
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     e16:	80 ec       	ldi	r24, 0xC0	; 192
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     e1e:	21 c0       	rjmp	.+66     	; 0xe62 <PrintUserName+0xb0>
		case ASSISTANT2_ID: CLCD_SetCursor(0,0); CLCD_PrintString("Welcome Mr:"); CLCD_SetCursor(0,1);CLCD_PrintString(ASSISTANT2_NAME); break;
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     e28:	8f ea       	ldi	r24, 0xAF	; 175
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     e38:	87 ec       	ldi	r24, 0xC7	; 199
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     e40:	10 c0       	rjmp	.+32     	; 0xe62 <PrintUserName+0xb0>
		case ASSISTANT3_ID: CLCD_SetCursor(0,0); CLCD_PrintString("Welcome Mr:"); CLCD_SetCursor(0,1);CLCD_PrintString(ASSISTANT3_NAME); break;
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     e4a:	8f ea       	ldi	r24, 0xAF	; 175
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
     e5a:	8d ec       	ldi	r24, 0xCD	; 205
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	29 e6       	ldi	r18, 0x69	; 105
     e66:	88 e1       	ldi	r24, 0x18	; 24
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	20 40       	sbci	r18, 0x00	; 0
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <PrintUserName+0xb6>
     e70:	00 c0       	rjmp	.+0      	; 0xe72 <PrintUserName+0xc0>
     e72:	00 00       	nop
	}
	_delay_ms(1000);
}
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <PrintMasterMsg>:

void PrintMasterMsg(void)
{
	CLCD_SetCursor(0,0);
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
	CLCD_PrintString("Motor: 1)DC");
     e80:	85 ed       	ldi	r24, 0xD5	; 213
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     e88:	8f ec       	ldi	r24, 0xCF	; 207
     e8a:	97 e0       	ldi	r25, 0x07	; 7
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <PrintMasterMsg+0x14>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <PrintMasterMsg+0x1a>
     e92:	00 00       	nop
	_delay_ms(1);
	CLCD_SetCursor(0,1);
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
	CLCD_PrintString("2)Servo 3)Steppr");
     e9c:	81 ee       	ldi	r24, 0xE1	; 225
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
     ea4:	8f ec       	ldi	r24, 0xCF	; 207
     ea6:	97 e0       	ldi	r25, 0x07	; 7
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <PrintMasterMsg+0x30>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <PrintMasterMsg+0x36>
     eae:	00 00       	nop
     eb0:	08 95       	ret

00000eb2 <PrintScreen>:
	_delay_ms(1);
}

void PrintScreen(uint8 MotorType, uint8 ScreenNumber)
{
	if (MotorType == DC_MOTOR_TYPE)
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <PrintScreen+0x6>
     eb6:	52 c0       	rjmp	.+164    	; 0xf5c <PrintScreen+0xaa>
	{
		switch(ScreenNumber)
     eb8:	62 30       	cpi	r22, 0x02	; 2
     eba:	f1 f0       	breq	.+60     	; 0xef8 <PrintScreen+0x46>
     ebc:	63 30       	cpi	r22, 0x03	; 3
     ebe:	a9 f1       	breq	.+106    	; 0xf2a <PrintScreen+0x78>
     ec0:	61 30       	cpi	r22, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <PrintScreen+0x14>
     ec4:	b5 c0       	rjmp	.+362    	; 0x1030 <PrintScreen+0x17e>
		{
			case SCREEN_1: 
							CLCD_ClearCLCD();
     ec6:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     eca:	8f e1       	ldi	r24, 0x1F	; 31
     ecc:	9e e4       	ldi	r25, 0x4E	; 78
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <PrintScreen+0x1c>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <PrintScreen+0x22>
     ed4:	00 00       	nop
							_delay_ms(10);
							CLCD_SetCursor(0,0);
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("1) Turn ON");
     ede:	82 ef       	ldi	r24, 0xF2	; 242
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							CLCD_SetCursor(0,1);
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("2) Turn OFF");
     eee:	8d ef       	ldi	r24, 0xFD	; 253
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							break;
     ef6:	08 95       	ret
			case SCREEN_2:
							CLCD_ClearCLCD();
     ef8:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     efc:	8f e1       	ldi	r24, 0x1F	; 31
     efe:	9e e4       	ldi	r25, 0x4E	; 78
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <PrintScreen+0x4e>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <PrintScreen+0x54>
     f06:	00 00       	nop
							_delay_ms(10);
							CLCD_SetCursor(0,0);
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("1)Full Speed");
     f10:	89 e0       	ldi	r24, 0x09	; 9
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							CLCD_SetCursor(0,1);
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("2)Pot  3)Lm35"); 
     f20:	86 e1       	ldi	r24, 0x16	; 22
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							break;
     f28:	08 95       	ret
			case SCREEN_3:
							CLCD_ClearCLCD();
     f2a:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     f2e:	8f e1       	ldi	r24, 0x1F	; 31
     f30:	9e e4       	ldi	r25, 0x4E	; 78
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <PrintScreen+0x80>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <PrintScreen+0x86>
     f38:	00 00       	nop
							_delay_ms(10);
							CLCD_SetCursor(0,0);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("Direction");
     f42:	84 e2       	ldi	r24, 0x24	; 36
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							CLCD_SetCursor(0,1);
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("1)CW  2)CCW");
     f52:	8e e2       	ldi	r24, 0x2E	; 46
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							break;								
     f5a:	08 95       	ret
		}
	}
	else if (MotorType == SERVO_MOTOR_TYPE)
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	c1 f4       	brne	.+48     	; 0xf90 <PrintScreen+0xde>
	{
		switch(ScreenNumber)
     f60:	61 30       	cpi	r22, 0x01	; 1
     f62:	09 f0       	breq	.+2      	; 0xf66 <PrintScreen+0xb4>
     f64:	65 c0       	rjmp	.+202    	; 0x1030 <PrintScreen+0x17e>
		{
			case SCREEN_1:
							CLCD_ClearCLCD();
     f66:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     f6a:	8f e1       	ldi	r24, 0x1F	; 31
     f6c:	9e e4       	ldi	r25, 0x4E	; 78
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <PrintScreen+0xbc>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <PrintScreen+0xc2>
     f74:	00 00       	nop
							_delay_ms(10);
							CLCD_SetCursor(0,0);
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("Servo angle:");
     f7e:	8a e3       	ldi	r24, 0x3A	; 58
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							CLCD_SetCursor(0,1);
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							break;
     f8e:	08 95       	ret
		}
		
	}
	else if (MotorType == STEPPER_MOTOR_TYPE)
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	09 f0       	breq	.+2      	; 0xf96 <PrintScreen+0xe4>
     f94:	4d c0       	rjmp	.+154    	; 0x1030 <PrintScreen+0x17e>
	{
		switch(ScreenNumber)
     f96:	62 30       	cpi	r22, 0x02	; 2
     f98:	f1 f0       	breq	.+60     	; 0xfd6 <PrintScreen+0x124>
     f9a:	63 30       	cpi	r22, 0x03	; 3
     f9c:	a9 f1       	breq	.+106    	; 0x1008 <PrintScreen+0x156>
     f9e:	61 30       	cpi	r22, 0x01	; 1
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <PrintScreen+0xf2>
     fa2:	46 c0       	rjmp	.+140    	; 0x1030 <PrintScreen+0x17e>
		{
			case SCREEN_1:
							CLCD_ClearCLCD();
     fa4:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     fa8:	8f e1       	ldi	r24, 0x1F	; 31
     faa:	9e e4       	ldi	r25, 0x4E	; 78
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <PrintScreen+0xfa>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <PrintScreen+0x100>
     fb2:	00 00       	nop
							_delay_ms(10);
							CLCD_SetCursor(0,0);
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("1) Turn ON");
     fbc:	82 ef       	ldi	r24, 0xF2	; 242
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							CLCD_SetCursor(0,1);
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("2) Turn OFF");
     fcc:	8d ef       	ldi	r24, 0xFD	; 253
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							break;
     fd4:	08 95       	ret
			case SCREEN_2:
							CLCD_ClearCLCD();
     fd6:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
     fda:	8f e1       	ldi	r24, 0x1F	; 31
     fdc:	9e e4       	ldi	r25, 0x4E	; 78
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <PrintScreen+0x12c>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <PrintScreen+0x132>
     fe4:	00 00       	nop
							_delay_ms(10);
							CLCD_SetCursor(0,0);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("1) CW");
     fee:	87 e4       	ldi	r24, 0x47	; 71
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							CLCD_SetCursor(0,1);
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("2) CCW");
     ffe:	8d e4       	ldi	r24, 0x4D	; 77
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							break;
    1006:	08 95       	ret
			case SCREEN_3:
							CLCD_ClearCLCD();
    1008:	0e 94 b3 01 	call	0x366	; 0x366 <CLCD_ClearCLCD>
    100c:	8f e1       	ldi	r24, 0x1F	; 31
    100e:	9e e4       	ldi	r25, 0x4E	; 78
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <PrintScreen+0x15e>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <PrintScreen+0x164>
    1016:	00 00       	nop
							_delay_ms(10);
							CLCD_SetCursor(0,0);
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
							CLCD_PrintString("Stepper Angle");
    1020:	84 e5       	ldi	r24, 0x54	; 84
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 87 01 	call	0x30e	; 0x30e <CLCD_PrintString>
							CLCD_SetCursor(0,1);
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 9c 01 	call	0x338	; 0x338 <CLCD_SetCursor>
    1030:	08 95       	ret

00001032 <GetChoice>:
								
	}
}	

void GetChoice(uint8 *EnteredOption , Buzzer_t *Buzzer)
{
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	1f 92       	push	r1
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	7c 01       	movw	r14, r24
    1046:	8b 01       	movw	r16, r22
	uint8 PressedKey = KEYPAD_NOT_PRESSED;
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	89 83       	std	Y+1, r24	; 0x01
	KeyPad_GetValue(&PressedKey);
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 cd 04 	call	0x99a	; 0x99a <KeyPad_GetValue>
    1054:	2f e7       	ldi	r18, 0x7F	; 127
    1056:	88 e3       	ldi	r24, 0x38	; 56
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	21 50       	subi	r18, 0x01	; 1
    105c:	80 40       	sbci	r24, 0x00	; 0
    105e:	90 40       	sbci	r25, 0x00	; 0
    1060:	e1 f7       	brne	.-8      	; 0x105a <GetChoice+0x28>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <GetChoice+0x32>
    1064:	00 00       	nop
	_delay_ms(50);
	if (PressedKey != KEYPAD_NOT_PRESSED && PressedKey != 'O')
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	8f 3f       	cpi	r24, 0xFF	; 255
    106a:	f9 f0       	breq	.+62     	; 0x10aa <GetChoice+0x78>
    106c:	8f 34       	cpi	r24, 0x4F	; 79
    106e:	21 f0       	breq	.+8      	; 0x1078 <GetChoice+0x46>
	{
		*EnteredOption = PressedKey;
    1070:	f7 01       	movw	r30, r14
    1072:	80 83       	st	Z, r24
	}
	while (PressedKey != KEYPAD_NOT_PRESSED)
    1074:	8f 3f       	cpi	r24, 0xFF	; 255
    1076:	c9 f0       	breq	.+50     	; 0x10aa <GetChoice+0x78>
	{
		KeyPad_GetValue(&PressedKey);
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 cd 04 	call	0x99a	; 0x99a <KeyPad_GetValue>
    1080:	ff e7       	ldi	r31, 0x7F	; 127
    1082:	28 e3       	ldi	r18, 0x38	; 56
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	f1 50       	subi	r31, 0x01	; 1
    1088:	20 40       	sbci	r18, 0x00	; 0
    108a:	80 40       	sbci	r24, 0x00	; 0
    108c:	e1 f7       	brne	.-8      	; 0x1086 <GetChoice+0x54>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <GetChoice+0x5e>
    1090:	00 00       	nop
		_delay_ms(50);
		Buzzer_TurnOn(Buzzer);
    1092:	c8 01       	movw	r24, r16
    1094:	0e 94 82 00 	call	0x104	; 0x104 <Buzzer_TurnOn>
    1098:	ef e1       	ldi	r30, 0x1F	; 31
    109a:	fe e4       	ldi	r31, 0x4E	; 78
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <GetChoice+0x6a>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <GetChoice+0x70>
    10a2:	00 00       	nop
	_delay_ms(50);
	if (PressedKey != KEYPAD_NOT_PRESSED && PressedKey != 'O')
	{
		*EnteredOption = PressedKey;
	}
	while (PressedKey != KEYPAD_NOT_PRESSED)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	39 f7       	brne	.-50     	; 0x1078 <GetChoice+0x46>
		KeyPad_GetValue(&PressedKey);
		_delay_ms(50);
		Buzzer_TurnOn(Buzzer);
		_delay_ms(10);
	}
	Buzzer_TurnOff(Buzzer);
    10aa:	c8 01       	movw	r24, r16
    10ac:	0e 94 89 00 	call	0x112	; 0x112 <Buzzer_TurnOff>
}
    10b0:	0f 90       	pop	r0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	08 95       	ret

000010c0 <GetUserID>:
void GetUserID (uint8 *UserID , Buzzer_t *Buzzer)
{
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	1f 92       	push	r1
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	7c 01       	movw	r14, r24
    10d4:	8b 01       	movw	r16, r22
	uint8 PressedKey = KEYPAD_NOT_PRESSED;
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		KeyPad_GetValue(&PressedKey);
    10da:	ce 01       	movw	r24, r28
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	0e 94 cd 04 	call	0x99a	; 0x99a <KeyPad_GetValue>
    10e2:	2f e7       	ldi	r18, 0x7F	; 127
    10e4:	88 e3       	ldi	r24, 0x38	; 56
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <GetUserID+0x28>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <GetUserID+0x32>
    10f2:	00 00       	nop
		_delay_ms(50);
		if (PressedKey != KEYPAD_NOT_PRESSED && PressedKey != 'O')
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	8f 3f       	cpi	r24, 0xFF	; 255
    10f8:	f1 f1       	breq	.+124    	; 0x1176 <GetUserID+0xb6>
    10fa:	8f 34       	cpi	r24, 0x4F	; 79
    10fc:	99 f0       	breq	.+38     	; 0x1124 <GetUserID+0x64>
		{
			*UserID = (PressedKey - '0') + ((*UserID) * 10);
    10fe:	80 53       	subi	r24, 0x30	; 48
    1100:	f7 01       	movw	r30, r14
    1102:	90 81       	ld	r25, Z
    1104:	99 0f       	add	r25, r25
    1106:	29 2f       	mov	r18, r25
    1108:	22 0f       	add	r18, r18
    110a:	22 0f       	add	r18, r18
    110c:	92 0f       	add	r25, r18
    110e:	98 0f       	add	r25, r24
    1110:	90 83       	st	Z, r25
			CLCD_PrintChar('*');
    1112:	8a e2       	ldi	r24, 0x2A	; 42
    1114:	0e 94 b0 01 	call	0x360	; 0x360 <CLCD_PrintChar>
		}
		if (PressedKey == 'O')
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 34       	cpi	r24, 0x4F	; 79
    111c:	19 f0       	breq	.+6      	; 0x1124 <GetUserID+0x64>
		{
			Buzzer_TurnOn(Buzzer);
			_delay_ms(200);
			break;
		}
		while(PressedKey != KEYPAD_NOT_PRESSED)
    111e:	8f 3f       	cpi	r24, 0xFF	; 255
    1120:	89 f4       	brne	.+34     	; 0x1144 <GetUserID+0x84>
    1122:	29 c0       	rjmp	.+82     	; 0x1176 <GetUserID+0xb6>
			*UserID = (PressedKey - '0') + ((*UserID) * 10);
			CLCD_PrintChar('*');
		}
		if (PressedKey == 'O')
		{
			Buzzer_TurnOn(Buzzer);
    1124:	c8 01       	movw	r24, r16
    1126:	0e 94 82 00 	call	0x104	; 0x104 <Buzzer_TurnOn>
    112a:	ff ef       	ldi	r31, 0xFF	; 255
    112c:	21 ee       	ldi	r18, 0xE1	; 225
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	f1 50       	subi	r31, 0x01	; 1
    1132:	20 40       	sbci	r18, 0x00	; 0
    1134:	80 40       	sbci	r24, 0x00	; 0
    1136:	e1 f7       	brne	.-8      	; 0x1130 <GetUserID+0x70>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <GetUserID+0x7a>
    113a:	00 00       	nop
			Buzzer_TurnOn(Buzzer);
			_delay_ms(10);
		}
		Buzzer_TurnOff(Buzzer);
	}
	Buzzer_TurnOff(Buzzer);
    113c:	c8 01       	movw	r24, r16
    113e:	0e 94 89 00 	call	0x112	; 0x112 <Buzzer_TurnOff>
    1142:	1d c0       	rjmp	.+58     	; 0x117e <GetUserID+0xbe>
			_delay_ms(200);
			break;
		}
		while(PressedKey != KEYPAD_NOT_PRESSED)
		{
			KeyPad_GetValue(&PressedKey);
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	0e 94 cd 04 	call	0x99a	; 0x99a <KeyPad_GetValue>
    114c:	9f e7       	ldi	r25, 0x7F	; 127
    114e:	e8 e3       	ldi	r30, 0x38	; 56
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	91 50       	subi	r25, 0x01	; 1
    1154:	e0 40       	sbci	r30, 0x00	; 0
    1156:	f0 40       	sbci	r31, 0x00	; 0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <GetUserID+0x92>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <GetUserID+0x9c>
    115c:	00 00       	nop
			_delay_ms(50);
			Buzzer_TurnOn(Buzzer);
    115e:	c8 01       	movw	r24, r16
    1160:	0e 94 82 00 	call	0x104	; 0x104 <Buzzer_TurnOn>
    1164:	8f e1       	ldi	r24, 0x1F	; 31
    1166:	9e e4       	ldi	r25, 0x4E	; 78
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <GetUserID+0xa8>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <GetUserID+0xae>
    116e:	00 00       	nop
		{
			Buzzer_TurnOn(Buzzer);
			_delay_ms(200);
			break;
		}
		while(PressedKey != KEYPAD_NOT_PRESSED)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	8f 3f       	cpi	r24, 0xFF	; 255
    1174:	39 f7       	brne	.-50     	; 0x1144 <GetUserID+0x84>
			KeyPad_GetValue(&PressedKey);
			_delay_ms(50);
			Buzzer_TurnOn(Buzzer);
			_delay_ms(10);
		}
		Buzzer_TurnOff(Buzzer);
    1176:	c8 01       	movw	r24, r16
    1178:	0e 94 89 00 	call	0x112	; 0x112 <Buzzer_TurnOff>
	}
    117c:	ae cf       	rjmp	.-164    	; 0x10da <GetUserID+0x1a>
	Buzzer_TurnOff(Buzzer);
}
    117e:	0f 90       	pop	r0
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	08 95       	ret

0000118e <GetAngle>:

void GetAngle(uint16 *Angle , Buzzer_t *Buzzer)
{
    118e:	ef 92       	push	r14
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	1f 92       	push	r1
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	7c 01       	movw	r14, r24
    11a2:	8b 01       	movw	r16, r22
	uint8 PressedKey;
	*Angle = 0;
    11a4:	fc 01       	movw	r30, r24
    11a6:	11 82       	std	Z+1, r1	; 0x01
    11a8:	10 82       	st	Z, r1
	while(1)
	{
		KeyPad_GetValue(&PressedKey);
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	0e 94 cd 04 	call	0x99a	; 0x99a <KeyPad_GetValue>
    11b2:	ff e7       	ldi	r31, 0x7F	; 127
    11b4:	28 e3       	ldi	r18, 0x38	; 56
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	f1 50       	subi	r31, 0x01	; 1
    11ba:	20 40       	sbci	r18, 0x00	; 0
    11bc:	80 40       	sbci	r24, 0x00	; 0
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <GetAngle+0x2a>
    11c0:	00 c0       	rjmp	.+0      	; 0x11c2 <GetAngle+0x34>
    11c2:	00 00       	nop
		_delay_ms(50);
		if (PressedKey != KEYPAD_NOT_PRESSED && PressedKey != 'O')
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	8f 3f       	cpi	r24, 0xFF	; 255
    11c8:	b9 f1       	breq	.+110    	; 0x1238 <GetAngle+0xaa>
    11ca:	8f 34       	cpi	r24, 0x4F	; 79
    11cc:	c9 f1       	breq	.+114    	; 0x1240 <GetAngle+0xb2>
		{
			CLCD_PrintChar(PressedKey);
    11ce:	0e 94 b0 01 	call	0x360	; 0x360 <CLCD_PrintChar>
			*Angle = (PressedKey - '0') + ((*Angle) * 10);
    11d2:	69 81       	ldd	r22, Y+1	; 0x01
    11d4:	86 2f       	mov	r24, r22
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	c0 97       	sbiw	r24, 0x30	; 48
    11da:	f7 01       	movw	r30, r14
    11dc:	20 81       	ld	r18, Z
    11de:	31 81       	ldd	r19, Z+1	; 0x01
    11e0:	a9 01       	movw	r20, r18
    11e2:	44 0f       	add	r20, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	22 0f       	add	r18, r18
    11ec:	33 1f       	adc	r19, r19
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	24 0f       	add	r18, r20
    11f4:	35 1f       	adc	r19, r21
    11f6:	28 0f       	add	r18, r24
    11f8:	39 1f       	adc	r19, r25
    11fa:	31 83       	std	Z+1, r19	; 0x01
    11fc:	20 83       	st	Z, r18
		}
		if(PressedKey == 'O')
    11fe:	6f 34       	cpi	r22, 0x4F	; 79
    1200:	f9 f0       	breq	.+62     	; 0x1240 <GetAngle+0xb2>
		{
			break;
		}
		while (PressedKey != KEYPAD_NOT_PRESSED)
    1202:	6f 3f       	cpi	r22, 0xFF	; 255
    1204:	c9 f0       	breq	.+50     	; 0x1238 <GetAngle+0xaa>
		{
			KeyPad_GetValue(&PressedKey);
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 cd 04 	call	0x99a	; 0x99a <KeyPad_GetValue>
    120e:	ff e7       	ldi	r31, 0x7F	; 127
    1210:	28 e3       	ldi	r18, 0x38	; 56
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	f1 50       	subi	r31, 0x01	; 1
    1216:	20 40       	sbci	r18, 0x00	; 0
    1218:	80 40       	sbci	r24, 0x00	; 0
    121a:	e1 f7       	brne	.-8      	; 0x1214 <GetAngle+0x86>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <GetAngle+0x90>
    121e:	00 00       	nop
			_delay_ms(50);
			Buzzer_TurnOn(Buzzer);
    1220:	c8 01       	movw	r24, r16
    1222:	0e 94 82 00 	call	0x104	; 0x104 <Buzzer_TurnOn>
    1226:	ef e1       	ldi	r30, 0x1F	; 31
    1228:	fe e4       	ldi	r31, 0x4E	; 78
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <GetAngle+0x9c>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <GetAngle+0xa2>
    1230:	00 00       	nop
		}
		if(PressedKey == 'O')
		{
			break;
		}
		while (PressedKey != KEYPAD_NOT_PRESSED)
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	8f 3f       	cpi	r24, 0xFF	; 255
    1236:	39 f7       	brne	.-50     	; 0x1206 <GetAngle+0x78>
			KeyPad_GetValue(&PressedKey);
			_delay_ms(50);
			Buzzer_TurnOn(Buzzer);
			_delay_ms(10);
		}
		Buzzer_TurnOff(Buzzer);
    1238:	c8 01       	movw	r24, r16
    123a:	0e 94 89 00 	call	0x112	; 0x112 <Buzzer_TurnOff>
	}
    123e:	b5 cf       	rjmp	.-150    	; 0x11aa <GetAngle+0x1c>
    1240:	0f 90       	pop	r0
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <Servo_Setup>:
#include "DIO.h"
#include "Timers.h"
#include "Servo.h"

Error_t Servo_Setup(Servo_t *MyServo)
{
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	/*Set pin as output pin*/
	ReturnedError = DIO_SetPinDirection(MyServo->ServoPort,MyServo->ServoPin,DIO_OUTPUT_PIN);
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	69 81       	ldd	r22, Y+1	; 0x01
    125c:	88 81       	ld	r24, Y
    125e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
    1262:	18 2f       	mov	r17, r24
	/*Initiate Timer1*/
	Timer1_Initiate();
    1264:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Timer1_Initiate>
	/*Check for Hardware PWM signal*/
		/*OC1B pin*/
		if((MyServo->ServoPort == PORTD) && (MyServo-> ServoPin == PIN4))
    1268:	88 81       	ld	r24, Y
    126a:	84 30       	cpi	r24, 0x04	; 4
    126c:	71 f4       	brne	.+28     	; 0x128a <Servo_Setup+0x3a>
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	29 f4       	brne	.+10     	; 0x127e <Servo_Setup+0x2e>
		{
			Timer1_SetICRValue(20000);
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	9e e4       	ldi	r25, 0x4E	; 78
    1278:	0e 94 8f 0c 	call	0x191e	; 0x191e <Timer1_SetICRValue>
    127c:	06 c0       	rjmp	.+12     	; 0x128a <Servo_Setup+0x3a>
		}
		/*OC1A pin*/
		else if ((MyServo->ServoPort == PORTD) && (MyServo-> ServoPin == PIN5))
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	21 f4       	brne	.+8      	; 0x128a <Servo_Setup+0x3a>
		{
			Timer1_SetICRValue(20000);
    1282:	80 e2       	ldi	r24, 0x20	; 32
    1284:	9e e4       	ldi	r25, 0x4E	; 78
    1286:	0e 94 8f 0c 	call	0x191e	; 0x191e <Timer1_SetICRValue>
		else /*Software PWM*/
		{

		}
	return ReturnedError;
}
    128a:	81 2f       	mov	r24, r17
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	08 95       	ret

00001294 <Servo_WriteAngle>:
Error_t Servo_WriteAngle (Servo_t *MyServo, uint8 Angle)
{
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	uint16 ConvertedValueFromAngleToTime = (5.55556 * Angle) + 1000;
	/*Check for Hardware PWM signal*/
	/*OC1B pin*/
	if((MyServo->ServoPort == PORTD) && (MyServo-> ServoPin == PIN4))
    129a:	88 81       	ld	r24, Y
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	f9 f4       	brne	.+62     	; 0x12de <Servo_WriteAngle+0x4a>
	return ReturnedError;
}
Error_t Servo_WriteAngle (Servo_t *MyServo, uint8 Angle)
{
	Error_t ReturnedError = NoError;
	uint16 ConvertedValueFromAngleToTime = (5.55556 * Angle) + 1000;
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__floatsisf>
    12aa:	26 e2       	ldi	r18, 0x26	; 38
    12ac:	37 ec       	ldi	r19, 0xC7	; 199
    12ae:	41 eb       	ldi	r20, 0xB1	; 177
    12b0:	50 e4       	ldi	r21, 0x40	; 64
    12b2:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__mulsf3>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a e7       	ldi	r20, 0x7A	; 122
    12bc:	54 e4       	ldi	r21, 0x44	; 68
    12be:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3>
    12c2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
	/*Check for Hardware PWM signal*/
	/*OC1B pin*/
	if((MyServo->ServoPort == PORTD) && (MyServo-> ServoPin == PIN4))
    12c6:	29 81       	ldd	r18, Y+1	; 0x01
    12c8:	24 30       	cpi	r18, 0x04	; 4
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <Servo_WriteAngle+0x40>
	{
		Timer1_PWM_OC1BPin(ConvertedValueFromAngleToTime);
    12cc:	cb 01       	movw	r24, r22
    12ce:	0e 94 95 0c 	call	0x192a	; 0x192a <Timer1_PWM_OC1BPin>
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <Servo_WriteAngle+0x4a>
	}
	/*OC1A pin*/
	else if ((MyServo->ServoPort == PORTD) && (MyServo-> ServoPin == PIN5))
    12d4:	25 30       	cpi	r18, 0x05	; 5
    12d6:	19 f4       	brne	.+6      	; 0x12de <Servo_WriteAngle+0x4a>
	{
		Timer1_PWM_OC1APin(ConvertedValueFromAngleToTime);
    12d8:	cb 01       	movw	r24, r22
    12da:	0e 94 92 0c 	call	0x1924	; 0x1924 <Timer1_PWM_OC1APin>
	else /*Software PWM*/
	{
		/*TODO: Will implemented later*/
	}
	return ReturnedError;
}
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <Stepper_Setup>:
#include "DIO.h"
#include "Stepper.h"
#include <util/delay.h>

Error_t Stepper_Setup(Stepper_t *MyStepper)
{
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
	/*Set pins as output pins*/
	ReturnedError = DIO_SetPinDirection(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_OUTPUT_PIN);
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	69 81       	ldd	r22, Y+1	; 0x01
    12f0:	88 81       	ld	r24, Y
    12f2:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	ReturnedError = DIO_SetPinDirection(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_OUTPUT_PIN);
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	6a 81       	ldd	r22, Y+2	; 0x02
    12fa:	88 81       	ld	r24, Y
    12fc:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	ReturnedError = DIO_SetPinDirection(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_OUTPUT_PIN);
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	6b 81       	ldd	r22, Y+3	; 0x03
    1304:	88 81       	ld	r24, Y
    1306:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	ReturnedError = DIO_SetPinDirection(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_OUTPUT_PIN);
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	6c 81       	ldd	r22, Y+4	; 0x04
    130e:	88 81       	ld	r24, Y
    1310:	0e 94 90 02 	call	0x520	; 0x520 <DIO_SetPinDirection>
	return ReturnedError;
}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <Stepper_Move>:
Error_t Stepper_Move(Stepper_t *MyStepper , uint8 Direction , uint16 Angle)
{
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	ec 01       	movw	r28, r24
    1328:	16 2f       	mov	r17, r22
	Error_t ReturnedError = NoError;
	uint16 NumberOfIterations = 0;
	uint16 i = 0;
	switch(MyStepper->StepperMode)
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	88 23       	and	r24, r24
    132e:	21 f0       	breq	.+8      	; 0x1338 <Stepper_Move+0x1e>
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	09 f4       	brne	.+2      	; 0x1336 <Stepper_Move+0x1c>
    1334:	f7 c0       	rjmp	.+494    	; 0x1524 <Stepper_Move+0x20a>
    1336:	ec c1       	rjmp	.+984    	; 0x1710 <Stepper_Move+0x3f6>
	{
		case STEPPER_FULL_STEP_MODE:
									NumberOfIterations = (float)Angle / 0.7032;
    1338:	ba 01       	movw	r22, r20
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__floatunsisf>
    1342:	2a ee       	ldi	r18, 0xEA	; 234
    1344:	34 e0       	ldi	r19, 0x04	; 4
    1346:	44 e3       	ldi	r20, 0x34	; 52
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__divsf3>
    134e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
    1352:	7b 01       	movw	r14, r22
									if(Direction == STEPPER_CW)
    1354:	12 30       	cpi	r17, 0x02	; 2
    1356:	09 f0       	breq	.+2      	; 0x135a <Stepper_Move+0x40>
    1358:	71 c0       	rjmp	.+226    	; 0x143c <Stepper_Move+0x122>
    135a:	00 e0       	ldi	r16, 0x00	; 0
    135c:	10 e0       	ldi	r17, 0x00	; 0
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
										{
											/*step 1*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_LOW_PIN);
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	69 81       	ldd	r22, Y+1	; 0x01
    1362:	88 81       	ld	r24, Y
    1364:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	6a 81       	ldd	r22, Y+2	; 0x02
    136c:	88 81       	ld	r24, Y
    136e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	6b 81       	ldd	r22, Y+3	; 0x03
    1376:	88 81       	ld	r24, Y
    1378:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	6c 81       	ldd	r22, Y+4	; 0x04
    1380:	88 81       	ld	r24, Y
    1382:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    1386:	8f e1       	ldi	r24, 0x1F	; 31
    1388:	9e e4       	ldi	r25, 0x4E	; 78
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <Stepper_Move+0x70>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <Stepper_Move+0x76>
    1390:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 2*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	69 81       	ldd	r22, Y+1	; 0x01
    1396:	88 81       	ld	r24, Y
    1398:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_LOW_PIN);
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	6a 81       	ldd	r22, Y+2	; 0x02
    13a0:	88 81       	ld	r24, Y
    13a2:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	6b 81       	ldd	r22, Y+3	; 0x03
    13aa:	88 81       	ld	r24, Y
    13ac:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	6c 81       	ldd	r22, Y+4	; 0x04
    13b4:	88 81       	ld	r24, Y
    13b6:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    13ba:	ef e1       	ldi	r30, 0x1F	; 31
    13bc:	fe e4       	ldi	r31, 0x4E	; 78
    13be:	31 97       	sbiw	r30, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <Stepper_Move+0xa4>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <Stepper_Move+0xaa>
    13c4:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 3*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	69 81       	ldd	r22, Y+1	; 0x01
    13ca:	88 81       	ld	r24, Y
    13cc:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	6a 81       	ldd	r22, Y+2	; 0x02
    13d4:	88 81       	ld	r24, Y
    13d6:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_LOW_PIN);
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	6b 81       	ldd	r22, Y+3	; 0x03
    13de:	88 81       	ld	r24, Y
    13e0:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	6c 81       	ldd	r22, Y+4	; 0x04
    13e8:	88 81       	ld	r24, Y
    13ea:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    13ee:	8f e1       	ldi	r24, 0x1F	; 31
    13f0:	9e e4       	ldi	r25, 0x4E	; 78
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <Stepper_Move+0xd8>
    13f6:	00 c0       	rjmp	.+0      	; 0x13f8 <Stepper_Move+0xde>
    13f8:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 4*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	69 81       	ldd	r22, Y+1	; 0x01
    13fe:	88 81       	ld	r24, Y
    1400:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	6a 81       	ldd	r22, Y+2	; 0x02
    1408:	88 81       	ld	r24, Y
    140a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	6b 81       	ldd	r22, Y+3	; 0x03
    1412:	88 81       	ld	r24, Y
    1414:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_LOW_PIN);
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	6c 81       	ldd	r22, Y+4	; 0x04
    141c:	88 81       	ld	r24, Y
    141e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    1422:	ef e1       	ldi	r30, 0x1F	; 31
    1424:	fe e4       	ldi	r31, 0x4E	; 78
    1426:	31 97       	sbiw	r30, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <Stepper_Move+0x10c>
    142a:	00 c0       	rjmp	.+0      	; 0x142c <Stepper_Move+0x112>
    142c:	00 00       	nop
	{
		case STEPPER_FULL_STEP_MODE:
									NumberOfIterations = (float)Angle / 0.7032;
									if(Direction == STEPPER_CW)
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
    142e:	0f 5f       	subi	r16, 0xFF	; 255
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	e0 16       	cp	r14, r16
    1434:	f1 06       	cpc	r15, r17
    1436:	08 f0       	brcs	.+2      	; 0x143a <Stepper_Move+0x120>
    1438:	92 cf       	rjmp	.-220    	; 0x135e <Stepper_Move+0x44>
    143a:	6f c1       	rjmp	.+734    	; 0x171a <Stepper_Move+0x400>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_LOW_PIN);
											_delay_ms(STEPPER_DELAY_MS);
										}
									}
									else if (Direction == STEPPER_CCW)
    143c:	13 30       	cpi	r17, 0x03	; 3
    143e:	09 f0       	breq	.+2      	; 0x1442 <Stepper_Move+0x128>
    1440:	69 c1       	rjmp	.+722    	; 0x1714 <Stepper_Move+0x3fa>
    1442:	00 e0       	ldi	r16, 0x00	; 0
    1444:	10 e0       	ldi	r17, 0x00	; 0
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
										{
											/*step 4*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	69 81       	ldd	r22, Y+1	; 0x01
    144a:	88 81       	ld	r24, Y
    144c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	6a 81       	ldd	r22, Y+2	; 0x02
    1454:	88 81       	ld	r24, Y
    1456:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	6b 81       	ldd	r22, Y+3	; 0x03
    145e:	88 81       	ld	r24, Y
    1460:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_LOW_PIN);
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	6c 81       	ldd	r22, Y+4	; 0x04
    1468:	88 81       	ld	r24, Y
    146a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    146e:	8f e1       	ldi	r24, 0x1F	; 31
    1470:	9e e4       	ldi	r25, 0x4E	; 78
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <Stepper_Move+0x158>
    1476:	00 c0       	rjmp	.+0      	; 0x1478 <Stepper_Move+0x15e>
    1478:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 3*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	69 81       	ldd	r22, Y+1	; 0x01
    147e:	88 81       	ld	r24, Y
    1480:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    1484:	41 e0       	ldi	r20, 0x01	; 1
    1486:	6a 81       	ldd	r22, Y+2	; 0x02
    1488:	88 81       	ld	r24, Y
    148a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_LOW_PIN);
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	6b 81       	ldd	r22, Y+3	; 0x03
    1492:	88 81       	ld	r24, Y
    1494:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    1498:	41 e0       	ldi	r20, 0x01	; 1
    149a:	6c 81       	ldd	r22, Y+4	; 0x04
    149c:	88 81       	ld	r24, Y
    149e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    14a2:	ef e1       	ldi	r30, 0x1F	; 31
    14a4:	fe e4       	ldi	r31, 0x4E	; 78
    14a6:	31 97       	sbiw	r30, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <Stepper_Move+0x18c>
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <Stepper_Move+0x192>
    14ac:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 2*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	69 81       	ldd	r22, Y+1	; 0x01
    14b2:	88 81       	ld	r24, Y
    14b4:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_LOW_PIN);
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	6a 81       	ldd	r22, Y+2	; 0x02
    14bc:	88 81       	ld	r24, Y
    14be:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	6b 81       	ldd	r22, Y+3	; 0x03
    14c6:	88 81       	ld	r24, Y
    14c8:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    14cc:	41 e0       	ldi	r20, 0x01	; 1
    14ce:	6c 81       	ldd	r22, Y+4	; 0x04
    14d0:	88 81       	ld	r24, Y
    14d2:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    14d6:	8f e1       	ldi	r24, 0x1F	; 31
    14d8:	9e e4       	ldi	r25, 0x4E	; 78
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <Stepper_Move+0x1c0>
    14de:	00 c0       	rjmp	.+0      	; 0x14e0 <Stepper_Move+0x1c6>
    14e0:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 1*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_LOW_PIN);
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	69 81       	ldd	r22, Y+1	; 0x01
    14e6:	88 81       	ld	r24, Y
    14e8:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	6a 81       	ldd	r22, Y+2	; 0x02
    14f0:	88 81       	ld	r24, Y
    14f2:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	6b 81       	ldd	r22, Y+3	; 0x03
    14fa:	88 81       	ld	r24, Y
    14fc:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	6c 81       	ldd	r22, Y+4	; 0x04
    1504:	88 81       	ld	r24, Y
    1506:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    150a:	ef e1       	ldi	r30, 0x1F	; 31
    150c:	fe e4       	ldi	r31, 0x4E	; 78
    150e:	31 97       	sbiw	r30, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <Stepper_Move+0x1f4>
    1512:	00 c0       	rjmp	.+0      	; 0x1514 <Stepper_Move+0x1fa>
    1514:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
										}
									}
									else if (Direction == STEPPER_CCW)
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
    1516:	0f 5f       	subi	r16, 0xFF	; 255
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	e0 16       	cp	r14, r16
    151c:	f1 06       	cpc	r15, r17
    151e:	08 f0       	brcs	.+2      	; 0x1522 <Stepper_Move+0x208>
    1520:	92 cf       	rjmp	.-220    	; 0x1446 <Stepper_Move+0x12c>
    1522:	fb c0       	rjmp	.+502    	; 0x171a <Stepper_Move+0x400>
										}
									}
									
									break;
		case STEPPER_HALF_STEP_MODE:
									NumberOfIterations = (float)Angle / 1.4064;
    1524:	ba 01       	movw	r22, r20
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__floatunsisf>
    152e:	2a ee       	ldi	r18, 0xEA	; 234
    1530:	34 e0       	ldi	r19, 0x04	; 4
    1532:	44 eb       	ldi	r20, 0xB4	; 180
    1534:	5f e3       	ldi	r21, 0x3F	; 63
    1536:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__divsf3>
    153a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
    153e:	7b 01       	movw	r14, r22
									if(Direction == STEPPER_CW)
    1540:	12 30       	cpi	r17, 0x02	; 2
    1542:	09 f0       	breq	.+2      	; 0x1546 <Stepper_Move+0x22c>
    1544:	71 c0       	rjmp	.+226    	; 0x1628 <Stepper_Move+0x30e>
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	10 e0       	ldi	r17, 0x00	; 0
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
										{
											/*step 1*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_LOW_PIN);
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	69 81       	ldd	r22, Y+1	; 0x01
    154e:	88 81       	ld	r24, Y
    1550:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	6a 81       	ldd	r22, Y+2	; 0x02
    1558:	88 81       	ld	r24, Y
    155a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	6b 81       	ldd	r22, Y+3	; 0x03
    1562:	88 81       	ld	r24, Y
    1564:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	6c 81       	ldd	r22, Y+4	; 0x04
    156c:	88 81       	ld	r24, Y
    156e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    1572:	8f e1       	ldi	r24, 0x1F	; 31
    1574:	9e e4       	ldi	r25, 0x4E	; 78
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <Stepper_Move+0x25c>
    157a:	00 c0       	rjmp	.+0      	; 0x157c <Stepper_Move+0x262>
    157c:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 2*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	69 81       	ldd	r22, Y+1	; 0x01
    1582:	88 81       	ld	r24, Y
    1584:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_LOW_PIN);
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	6a 81       	ldd	r22, Y+2	; 0x02
    158c:	88 81       	ld	r24, Y
    158e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	6b 81       	ldd	r22, Y+3	; 0x03
    1596:	88 81       	ld	r24, Y
    1598:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	6c 81       	ldd	r22, Y+4	; 0x04
    15a0:	88 81       	ld	r24, Y
    15a2:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    15a6:	ef e1       	ldi	r30, 0x1F	; 31
    15a8:	fe e4       	ldi	r31, 0x4E	; 78
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <Stepper_Move+0x290>
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <Stepper_Move+0x296>
    15b0:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 3*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	69 81       	ldd	r22, Y+1	; 0x01
    15b6:	88 81       	ld	r24, Y
    15b8:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	6a 81       	ldd	r22, Y+2	; 0x02
    15c0:	88 81       	ld	r24, Y
    15c2:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_LOW_PIN);
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	6b 81       	ldd	r22, Y+3	; 0x03
    15ca:	88 81       	ld	r24, Y
    15cc:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	6c 81       	ldd	r22, Y+4	; 0x04
    15d4:	88 81       	ld	r24, Y
    15d6:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    15da:	8f e1       	ldi	r24, 0x1F	; 31
    15dc:	9e e4       	ldi	r25, 0x4E	; 78
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <Stepper_Move+0x2c4>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <Stepper_Move+0x2ca>
    15e4:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
											/*step 4*/
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	69 81       	ldd	r22, Y+1	; 0x01
    15ea:	88 81       	ld	r24, Y
    15ec:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	6a 81       	ldd	r22, Y+2	; 0x02
    15f4:	88 81       	ld	r24, Y
    15f6:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	6b 81       	ldd	r22, Y+3	; 0x03
    15fe:	88 81       	ld	r24, Y
    1600:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_LOW_PIN);
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	6c 81       	ldd	r22, Y+4	; 0x04
    1608:	88 81       	ld	r24, Y
    160a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    160e:	ef e1       	ldi	r30, 0x1F	; 31
    1610:	fe e4       	ldi	r31, 0x4E	; 78
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <Stepper_Move+0x2f8>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <Stepper_Move+0x2fe>
    1618:	00 00       	nop
									break;
		case STEPPER_HALF_STEP_MODE:
									NumberOfIterations = (float)Angle / 1.4064;
									if(Direction == STEPPER_CW)
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
    161a:	0f 5f       	subi	r16, 0xFF	; 255
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	e0 16       	cp	r14, r16
    1620:	f1 06       	cpc	r15, r17
    1622:	08 f0       	brcs	.+2      	; 0x1626 <Stepper_Move+0x30c>
    1624:	92 cf       	rjmp	.-220    	; 0x154a <Stepper_Move+0x230>
    1626:	79 c0       	rjmp	.+242    	; 0x171a <Stepper_Move+0x400>
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
											ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_LOW_PIN);
											_delay_ms(STEPPER_DELAY_MS);
										}
									}
									else if (Direction == STEPPER_CCW)
    1628:	13 30       	cpi	r17, 0x03	; 3
    162a:	09 f0       	breq	.+2      	; 0x162e <Stepper_Move+0x314>
    162c:	75 c0       	rjmp	.+234    	; 0x1718 <Stepper_Move+0x3fe>
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	10 e0       	ldi	r17, 0x00	; 0
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
										{
											/*step 4*/
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	69 81       	ldd	r22, Y+1	; 0x01
    1636:	88 81       	ld	r24, Y
    1638:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    163c:	41 e0       	ldi	r20, 0x01	; 1
    163e:	6a 81       	ldd	r22, Y+2	; 0x02
    1640:	88 81       	ld	r24, Y
    1642:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	6b 81       	ldd	r22, Y+3	; 0x03
    164a:	88 81       	ld	r24, Y
    164c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_LOW_PIN);
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	6c 81       	ldd	r22, Y+4	; 0x04
    1654:	88 81       	ld	r24, Y
    1656:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    165a:	8f e1       	ldi	r24, 0x1F	; 31
    165c:	9e e4       	ldi	r25, 0x4E	; 78
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <Stepper_Move+0x344>
    1662:	00 c0       	rjmp	.+0      	; 0x1664 <Stepper_Move+0x34a>
    1664:	00 00       	nop
											 _delay_ms(STEPPER_DELAY_MS);
											 /*step 3*/
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	69 81       	ldd	r22, Y+1	; 0x01
    166a:	88 81       	ld	r24, Y
    166c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	6a 81       	ldd	r22, Y+2	; 0x02
    1674:	88 81       	ld	r24, Y
    1676:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_LOW_PIN);
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	6b 81       	ldd	r22, Y+3	; 0x03
    167e:	88 81       	ld	r24, Y
    1680:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	6c 81       	ldd	r22, Y+4	; 0x04
    1688:	88 81       	ld	r24, Y
    168a:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    168e:	ef e1       	ldi	r30, 0x1F	; 31
    1690:	fe e4       	ldi	r31, 0x4E	; 78
    1692:	31 97       	sbiw	r30, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <Stepper_Move+0x378>
    1696:	00 c0       	rjmp	.+0      	; 0x1698 <Stepper_Move+0x37e>
    1698:	00 00       	nop
											 _delay_ms(STEPPER_DELAY_MS);
											 /*step 2*/
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	69 81       	ldd	r22, Y+1	; 0x01
    169e:	88 81       	ld	r24, Y
    16a0:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_LOW_PIN);
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	6a 81       	ldd	r22, Y+2	; 0x02
    16a8:	88 81       	ld	r24, Y
    16aa:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	6b 81       	ldd	r22, Y+3	; 0x03
    16b2:	88 81       	ld	r24, Y
    16b4:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	6c 81       	ldd	r22, Y+4	; 0x04
    16bc:	88 81       	ld	r24, Y
    16be:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    16c2:	8f e1       	ldi	r24, 0x1F	; 31
    16c4:	9e e4       	ldi	r25, 0x4E	; 78
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <Stepper_Move+0x3ac>
    16ca:	00 c0       	rjmp	.+0      	; 0x16cc <Stepper_Move+0x3b2>
    16cc:	00 00       	nop
											 _delay_ms(STEPPER_DELAY_MS);
											/*step 1*/
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_LOW_PIN);
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	69 81       	ldd	r22, Y+1	; 0x01
    16d2:	88 81       	ld	r24, Y
    16d4:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	6a 81       	ldd	r22, Y+2	; 0x02
    16dc:	88 81       	ld	r24, Y
    16de:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	6b 81       	ldd	r22, Y+3	; 0x03
    16e6:	88 81       	ld	r24, Y
    16e8:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
											 ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	6c 81       	ldd	r22, Y+4	; 0x04
    16f0:	88 81       	ld	r24, Y
    16f2:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    16f6:	ef e1       	ldi	r30, 0x1F	; 31
    16f8:	fe e4       	ldi	r31, 0x4E	; 78
    16fa:	31 97       	sbiw	r30, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <Stepper_Move+0x3e0>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <Stepper_Move+0x3e6>
    1700:	00 00       	nop
											_delay_ms(STEPPER_DELAY_MS);
										}
									}
									else if (Direction == STEPPER_CCW)
									{
										for(i = 0 ; i <= NumberOfIterations ; i++)
    1702:	0f 5f       	subi	r16, 0xFF	; 255
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	e0 16       	cp	r14, r16
    1708:	f1 06       	cpc	r15, r17
    170a:	08 f0       	brcs	.+2      	; 0x170e <Stepper_Move+0x3f4>
    170c:	92 cf       	rjmp	.-220    	; 0x1632 <Stepper_Move+0x318>
    170e:	05 c0       	rjmp	.+10     	; 0x171a <Stepper_Move+0x400>
											_delay_ms(STEPPER_DELAY_MS);
											
										}
									}
									break;
		default: ReturnedError = FunctionParameterError; 
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	03 c0       	rjmp	.+6      	; 0x171a <Stepper_Move+0x400>
	ReturnedError = DIO_SetPinDirection(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_OUTPUT_PIN);
	return ReturnedError;
}
Error_t Stepper_Move(Stepper_t *MyStepper , uint8 Direction , uint16 Angle)
{
	Error_t ReturnedError = NoError;
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	01 c0       	rjmp	.+2      	; 0x171a <Stepper_Move+0x400>
    1718:	80 e0       	ldi	r24, 0x00	; 0
									}
									break;
		default: ReturnedError = FunctionParameterError; 
	}
	return ReturnedError;
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	08 95       	ret

00001728 <Stepper_Stop>:

Error_t Stepper_Stop(Stepper_t *MyStepper)
{
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	ec 01       	movw	r28, r24
	Error_t ReturnedError = NoError;
		/*step 4*/
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	69 81       	ldd	r22, Y+1	; 0x01
    1732:	88 81       	ld	r24, Y
    1734:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	6a 81       	ldd	r22, Y+2	; 0x02
    173c:	88 81       	ld	r24, Y
    173e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	6b 81       	ldd	r22, Y+3	; 0x03
    1746:	88 81       	ld	r24, Y
    1748:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	6c 81       	ldd	r22, Y+4	; 0x04
    1750:	88 81       	ld	r24, Y
    1752:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    1756:	8f e1       	ldi	r24, 0x1F	; 31
    1758:	9e e4       	ldi	r25, 0x4E	; 78
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <Stepper_Stop+0x32>
    175e:	00 c0       	rjmp	.+0      	; 0x1760 <Stepper_Stop+0x38>
    1760:	00 00       	nop
		_delay_ms(STEPPER_DELAY_MS);
		/*step 3*/
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	69 81       	ldd	r22, Y+1	; 0x01
    1766:	88 81       	ld	r24, Y
    1768:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	6a 81       	ldd	r22, Y+2	; 0x02
    1770:	88 81       	ld	r24, Y
    1772:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	6b 81       	ldd	r22, Y+3	; 0x03
    177a:	88 81       	ld	r24, Y
    177c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	6c 81       	ldd	r22, Y+4	; 0x04
    1784:	88 81       	ld	r24, Y
    1786:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    178a:	ef e1       	ldi	r30, 0x1F	; 31
    178c:	fe e4       	ldi	r31, 0x4E	; 78
    178e:	31 97       	sbiw	r30, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <Stepper_Stop+0x66>
    1792:	00 c0       	rjmp	.+0      	; 0x1794 <Stepper_Stop+0x6c>
    1794:	00 00       	nop
		_delay_ms(STEPPER_DELAY_MS);
		/*step 2*/
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	69 81       	ldd	r22, Y+1	; 0x01
    179a:	88 81       	ld	r24, Y
    179c:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	6a 81       	ldd	r22, Y+2	; 0x02
    17a4:	88 81       	ld	r24, Y
    17a6:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	6b 81       	ldd	r22, Y+3	; 0x03
    17ae:	88 81       	ld	r24, Y
    17b0:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	6c 81       	ldd	r22, Y+4	; 0x04
    17b8:	88 81       	ld	r24, Y
    17ba:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    17be:	8f e1       	ldi	r24, 0x1F	; 31
    17c0:	9e e4       	ldi	r25, 0x4E	; 78
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <Stepper_Stop+0x9a>
    17c6:	00 c0       	rjmp	.+0      	; 0x17c8 <Stepper_Stop+0xa0>
    17c8:	00 00       	nop
		_delay_ms(STEPPER_DELAY_MS);
		/*step 1*/
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil1Pin,DIO_HIGH_PIN);
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	69 81       	ldd	r22, Y+1	; 0x01
    17ce:	88 81       	ld	r24, Y
    17d0:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil2Pin,DIO_HIGH_PIN);
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	6a 81       	ldd	r22, Y+2	; 0x02
    17d8:	88 81       	ld	r24, Y
    17da:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil3Pin,DIO_HIGH_PIN);
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	6b 81       	ldd	r22, Y+3	; 0x03
    17e2:	88 81       	ld	r24, Y
    17e4:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
		ReturnedError = DIO_WritePin(MyStepper->StepperPort,MyStepper->Coil4Pin,DIO_HIGH_PIN);
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	6c 81       	ldd	r22, Y+4	; 0x04
    17ec:	88 81       	ld	r24, Y
    17ee:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_WritePin>
    17f2:	ef e1       	ldi	r30, 0x1F	; 31
    17f4:	fe e4       	ldi	r31, 0x4E	; 78
    17f6:	31 97       	sbiw	r30, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <Stepper_Stop+0xce>
    17fa:	00 c0       	rjmp	.+0      	; 0x17fc <Stepper_Stop+0xd4>
    17fc:	00 00       	nop
		_delay_ms(STEPPER_DELAY_MS);
		return ReturnedError;
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <Timer0_Initiate>:
			CLEAR_BIT(TIMSK_REG,TIMSK_OCIE0_BIT);
		#else
			#error "Error in TIMER0_INTERRUPT_ENABLE config"
		#endif /*TIMER0_INTERRUPT_ENABLE*/
	#elif TIMER0_OPERATION_MODE == TIMER0_FAST_PWM
		SET_BIT(TCCR0_REG,TCCR0_WGM01_BIT);
    1804:	83 b7       	in	r24, 0x33	; 51
    1806:	88 60       	ori	r24, 0x08	; 8
    1808:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG,TCCR0_WGM00_BIT);
    180a:	83 b7       	in	r24, 0x33	; 51
    180c:	80 64       	ori	r24, 0x40	; 64
    180e:	83 bf       	out	0x33, r24	; 51
		#if     TIMER0_COMPARE_OUTPUT_MODE == TIMER0_NON_INVERTING_MODE
			SET_BIT(TCCR0_REG,TCCR0_COM01_BIT);
    1810:	83 b7       	in	r24, 0x33	; 51
    1812:	80 62       	ori	r24, 0x20	; 32
    1814:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0_REG,TCCR0_COM00_BIT);
    1816:	83 b7       	in	r24, 0x33	; 51
    1818:	8f 7e       	andi	r24, 0xEF	; 239
    181a:	83 bf       	out	0x33, r24	; 51
			SET_BIT(DDRB_REG,PIN3); /*Set pin as output pin*/
    181c:	bb 9a       	sbi	0x17, 3	; 23
	#if TIMER0_FREQUENCY == TIMER0_FOSC
		CLEAR_BIT(TCCR0_REG,TCCR0_CS02_BIT);
		CLEAR_BIT(TCCR0_REG,TCCR0_CS01_BIT);
		SET_BIT(TCCR0_REG,TCCR0_CS00_BIT);
	#elif TIMER0_FREQUENCY == TIMER0_FOSC_OVER_8
		CLEAR_BIT(TCCR0_REG,TCCR0_CS02_BIT);
    181e:	83 b7       	in	r24, 0x33	; 51
    1820:	8b 7f       	andi	r24, 0xFB	; 251
    1822:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG,TCCR0_CS01_BIT);
    1824:	83 b7       	in	r24, 0x33	; 51
    1826:	82 60       	ori	r24, 0x02	; 2
    1828:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0_REG,TCCR0_CS00_BIT);
    182a:	83 b7       	in	r24, 0x33	; 51
    182c:	8e 7f       	andi	r24, 0xFE	; 254
    182e:	83 bf       	out	0x33, r24	; 51
    1830:	08 95       	ret

00001832 <__vector_11>:
}

/* ISR Function for Timer0 OverFlow event */
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1832:	1f 92       	push	r1
    1834:	0f 92       	push	r0
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	0f 92       	push	r0
    183a:	11 24       	eor	r1, r1
    183c:	2f 93       	push	r18
    183e:	3f 93       	push	r19
    1840:	4f 93       	push	r20
    1842:	5f 93       	push	r21
    1844:	6f 93       	push	r22
    1846:	7f 93       	push	r23
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
	if(GlobalPointer_Timer0_OverFlowEvent != NULL)
    1854:	e0 91 72 01 	lds	r30, 0x0172
    1858:	f0 91 73 01 	lds	r31, 0x0173
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	09 f0       	breq	.+2      	; 0x1862 <__vector_11+0x30>
	{
		GlobalPointer_Timer0_OverFlowEvent();
    1860:	09 95       	icall
	}
}
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <__vector_10>:

/* ISR Function for Timer0 ComapreMatch event */
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    1884:	1f 92       	push	r1
    1886:	0f 92       	push	r0
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	0f 92       	push	r0
    188c:	11 24       	eor	r1, r1
    188e:	2f 93       	push	r18
    1890:	3f 93       	push	r19
    1892:	4f 93       	push	r20
    1894:	5f 93       	push	r21
    1896:	6f 93       	push	r22
    1898:	7f 93       	push	r23
    189a:	8f 93       	push	r24
    189c:	9f 93       	push	r25
    189e:	af 93       	push	r26
    18a0:	bf 93       	push	r27
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31
	if(GlobalPointer_Timer0_CompareMatchEvent != NULL)
    18a6:	e0 91 74 01 	lds	r30, 0x0174
    18aa:	f0 91 75 01 	lds	r31, 0x0175
    18ae:	30 97       	sbiw	r30, 0x00	; 0
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <__vector_10+0x30>
	{
		GlobalPointer_Timer0_CompareMatchEvent();
    18b2:	09 95       	icall
	}
}
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	0f 90       	pop	r0
    18d2:	1f 90       	pop	r1
    18d4:	18 95       	reti

000018d6 <Timer1_Initiate>:
				SET_BIT(TCCR1A_REG,TCCR1A_WGM11_BIT);
				SET_BIT(TCCR1B_REG,TCCR1B_WGM12_BIT);
				CLEAR_BIT(TCCR1B_REG,TCCR1B_WGM13_BIT);
			#elif TIMER1_WAVE_GENERATION_MODE == TIMER1_FAST_PWM_TOP_ICR1
				/*Activate mode*/
				CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM10_BIT);
    18d6:	8f b5       	in	r24, 0x2f	; 47
    18d8:	8e 7f       	andi	r24, 0xFE	; 254
    18da:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A_REG,TCCR1A_WGM11_BIT);
    18dc:	8f b5       	in	r24, 0x2f	; 47
    18de:	82 60       	ori	r24, 0x02	; 2
    18e0:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1B_REG,TCCR1B_WGM12_BIT);
    18e2:	8e b5       	in	r24, 0x2e	; 46
    18e4:	88 60       	ori	r24, 0x08	; 8
    18e6:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(TCCR1B_REG,TCCR1B_WGM13_BIT);
    18e8:	8e b5       	in	r24, 0x2e	; 46
    18ea:	80 61       	ori	r24, 0x10	; 16
    18ec:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(TCCR1A_REG,TCCR1A_WGM11_BIT);
				SET_BIT(TCCR1B_REG,TCCR1B_WGM12_BIT);
				SET_BIT(TCCR1B_REG,TCCR1B_WGM13_BIT);
			#endif /*TIMER1_WAVE_GENERATION_MODE*/
			#if TIMER1_COMPARE_OUTPUT_MODE_OC1A == TIMER1_NON_INVERTING_MODE_OC1A
				SET_BIT(TCCR1A_REG,TCCR1A_COM1A1_BIT);
    18ee:	8f b5       	in	r24, 0x2f	; 47
    18f0:	80 68       	ori	r24, 0x80	; 128
    18f2:	8f bd       	out	0x2f, r24	; 47
				CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A0_BIT);
    18f4:	8f b5       	in	r24, 0x2f	; 47
    18f6:	8f 7b       	andi	r24, 0xBF	; 191
    18f8:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(DDRD_REG,PIN5);
    18fa:	8d 9a       	sbi	0x11, 5	; 17
			#elif TIMER1_COMPARE_OUTPUT_MODE_OC1B == TIMER1_INVERTING_MODE_OC1B
				SET_BIT(TCCR1A_REG,TCCR1A_COM1B1_BIT);
				SET_BIT(TCCR1A_REG,TCCR1A_COM1B0_BIT);
				SET_BIT(DDRD_REG,PIN4);
			#elif TIMER1_COMPARE_OUTPUT_MODE_OC1B == TIMER1_DISCONNECT_OC1B
				CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B1_BIT);
    18fc:	8f b5       	in	r24, 0x2f	; 47
    18fe:	8f 7d       	andi	r24, 0xDF	; 223
    1900:	8f bd       	out	0x2f, r24	; 47
				CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B0_BIT);
    1902:	8f b5       	in	r24, 0x2f	; 47
    1904:	8f 7e       	andi	r24, 0xEF	; 239
    1906:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(DDRD_REG,PIN4);
    1908:	8c 9a       	sbi	0x11, 4	; 17
	#if TIMER1_FREQUENCY == TIMER1_FOSC
		CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12_BIT);
		CLEAR_BIT(TCCR1B_REG,TCCR1B_CS11_BIT);
		SET_BIT(TCCR1B_REG,TCCR1B_CS10_BIT);
	#elif TIMER1_FREQUENCY == TIMER1_FOSC_OVER_8
		CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12_BIT);
    190a:	8e b5       	in	r24, 0x2e	; 46
    190c:	8b 7f       	andi	r24, 0xFB	; 251
    190e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,TCCR1B_CS11_BIT);
    1910:	8e b5       	in	r24, 0x2e	; 46
    1912:	82 60       	ori	r24, 0x02	; 2
    1914:	8e bd       	out	0x2e, r24	; 46
		CLEAR_BIT(TCCR1B_REG,TCCR1B_CS10_BIT);
    1916:	8e b5       	in	r24, 0x2e	; 46
    1918:	8e 7f       	andi	r24, 0xFE	; 254
    191a:	8e bd       	out	0x2e, r24	; 46
    191c:	08 95       	ret

0000191e <Timer1_SetICRValue>:
	OCR1BH_REG = value >> 8;
	OCR1BL_REG = (uint8) value;
}
void Timer1_SetICRValue(uint16 Value)
{
	ICR1H_REG = Value >> 8;
    191e:	97 bd       	out	0x27, r25	; 39
	ICR1L_REG = (uint8) Value;
    1920:	86 bd       	out	0x26, r24	; 38
    1922:	08 95       	ret

00001924 <Timer1_PWM_OC1APin>:
}

void Timer1_PWM_OC1APin(uint16 CompareMatchAValue)
{
	/*Set the value*/
	OCR1AH_REG = CompareMatchAValue >> 8;
    1924:	9b bd       	out	0x2b, r25	; 43
	OCR1AL_REG = (uint8) CompareMatchAValue;
    1926:	8a bd       	out	0x2a, r24	; 42
    1928:	08 95       	ret

0000192a <Timer1_PWM_OC1BPin>:
}
void Timer1_PWM_OC1BPin(uint16 CompareMatchBValue)
{
	/*Set the value*/
	OCR1BH_REG = CompareMatchBValue >> 8;
    192a:	99 bd       	out	0x29, r25	; 41
	OCR1BL_REG = (uint8) CompareMatchBValue;
    192c:	88 bd       	out	0x28, r24	; 40
    192e:	08 95       	ret

00001930 <__vector_9>:
	}
}
/* ISR Function for Timer1 overflow event */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
    1930:	1f 92       	push	r1
    1932:	0f 92       	push	r0
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	0f 92       	push	r0
    1938:	11 24       	eor	r1, r1
    193a:	2f 93       	push	r18
    193c:	3f 93       	push	r19
    193e:	4f 93       	push	r20
    1940:	5f 93       	push	r21
    1942:	6f 93       	push	r22
    1944:	7f 93       	push	r23
    1946:	8f 93       	push	r24
    1948:	9f 93       	push	r25
    194a:	af 93       	push	r26
    194c:	bf 93       	push	r27
    194e:	ef 93       	push	r30
    1950:	ff 93       	push	r31
	if(GlobalPointer_Timer1_OverFlowEvent != NULL)
    1952:	e0 91 70 01 	lds	r30, 0x0170
    1956:	f0 91 71 01 	lds	r31, 0x0171
    195a:	30 97       	sbiw	r30, 0x00	; 0
    195c:	09 f0       	breq	.+2      	; 0x1960 <__vector_9+0x30>
	{
		GlobalPointer_Timer1_OverFlowEvent();
    195e:	09 95       	icall
	}
}
    1960:	ff 91       	pop	r31
    1962:	ef 91       	pop	r30
    1964:	bf 91       	pop	r27
    1966:	af 91       	pop	r26
    1968:	9f 91       	pop	r25
    196a:	8f 91       	pop	r24
    196c:	7f 91       	pop	r23
    196e:	6f 91       	pop	r22
    1970:	5f 91       	pop	r21
    1972:	4f 91       	pop	r20
    1974:	3f 91       	pop	r19
    1976:	2f 91       	pop	r18
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <__vector_8>:

/* ISR Function for Timer1 ComapreMatch-B event */
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
    1982:	1f 92       	push	r1
    1984:	0f 92       	push	r0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	0f 92       	push	r0
    198a:	11 24       	eor	r1, r1
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
	if(GlobalPointer_Timer1_CompareMatchBEvent != NULL)
    19a4:	e0 91 6c 01 	lds	r30, 0x016C
    19a8:	f0 91 6d 01 	lds	r31, 0x016D
    19ac:	30 97       	sbiw	r30, 0x00	; 0
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <__vector_8+0x30>
	{
		GlobalPointer_Timer1_CompareMatchBEvent();
    19b0:	09 95       	icall
	}
}
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	0f 90       	pop	r0
    19d0:	1f 90       	pop	r1
    19d2:	18 95       	reti

000019d4 <__vector_7>:

/* ISR Function for Timer1 ComapreMatch-A event */
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	2f 93       	push	r18
    19e0:	3f 93       	push	r19
    19e2:	4f 93       	push	r20
    19e4:	5f 93       	push	r21
    19e6:	6f 93       	push	r22
    19e8:	7f 93       	push	r23
    19ea:	8f 93       	push	r24
    19ec:	9f 93       	push	r25
    19ee:	af 93       	push	r26
    19f0:	bf 93       	push	r27
    19f2:	ef 93       	push	r30
    19f4:	ff 93       	push	r31
	if(GlobalPointer_Timer1_CompareMatchAEvent != NULL)
    19f6:	e0 91 6e 01 	lds	r30, 0x016E
    19fa:	f0 91 6f 01 	lds	r31, 0x016F
    19fe:	30 97       	sbiw	r30, 0x00	; 0
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <__vector_7+0x30>
	{
		GlobalPointer_Timer1_CompareMatchAEvent();
    1a02:	09 95       	icall
	}
}
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	0f 90       	pop	r0
    1a22:	1f 90       	pop	r1
    1a24:	18 95       	reti

00001a26 <__vector_6>:
/* ISR Function for Timer1 Capture event */
void __vector_6(void)  __attribute__((signal));
void __vector_6(void)
{
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
	if(GlobalPointer_Timer1_CaptureEvent != NULL)
    1a48:	e0 91 6a 01 	lds	r30, 0x016A
    1a4c:	f0 91 6b 01 	lds	r31, 0x016B
    1a50:	30 97       	sbiw	r30, 0x00	; 0
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <__vector_6+0x30>
	{
		GlobalPointer_Timer1_CaptureEvent();
    1a54:	09 95       	icall
	}
}
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <Timer2_Initiate>:
			CLEAR_BIT(TIMSK_REG,TIMSK_OCIE2_BIT);
		#else
			#error "Error in TIMER2_INTERRUPT_ENABLE config"
		#endif /*TIMER2_INTERRUPT_ENABLE*/
	#elif TIMER2_OPERATION_MODE == TIMER2_FAST_PWM
		SET_BIT(TCCR2_REG,TCCR2_WGM21_BIT);
    1a78:	85 b5       	in	r24, 0x25	; 37
    1a7a:	88 60       	ori	r24, 0x08	; 8
    1a7c:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2_REG,TCCR2_WGM20_BIT);
    1a7e:	85 b5       	in	r24, 0x25	; 37
    1a80:	80 64       	ori	r24, 0x40	; 64
    1a82:	85 bd       	out	0x25, r24	; 37
		#if     TIMER2_COMPARE_OUTPUT_MODE == TIMER2_NON_INVERTING_MODE
			SET_BIT(TCCR2_REG,TCCR2_COM21_BIT);
    1a84:	85 b5       	in	r24, 0x25	; 37
    1a86:	80 62       	ori	r24, 0x20	; 32
    1a88:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2_REG,TCCR2_COM20_BIT);
    1a8a:	85 b5       	in	r24, 0x25	; 37
    1a8c:	8f 7e       	andi	r24, 0xEF	; 239
    1a8e:	85 bd       	out	0x25, r24	; 37
			SET_BIT(DDRD_REG,PIN7); /*Set pin as output pin*/
    1a90:	8f 9a       	sbi	0x11, 7	; 17
	#if TIMER2_FREQUENCY == TIMER2_FOSC
		CLEAR_BIT(TCCR2_REG,TCCR2_CS22_BIT);
		CLEAR_BIT(TCCR2_REG,TCCR2_CS21_BIT);
		SET_BIT(TCCR2_REG,TCCR2_CS20_BIT);
	#elif TIMER2_FREQUENCY == TIMER2_FOSC_OVER_8
		CLEAR_BIT(TCCR2_REG,TCCR2_CS22_BIT);
    1a92:	85 b5       	in	r24, 0x25	; 37
    1a94:	8b 7f       	andi	r24, 0xFB	; 251
    1a96:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2_REG,TCCR2_CS21_BIT);
    1a98:	85 b5       	in	r24, 0x25	; 37
    1a9a:	82 60       	ori	r24, 0x02	; 2
    1a9c:	85 bd       	out	0x25, r24	; 37
		CLEAR_BIT(TCCR2_REG,TCCR2_CS20_BIT);
    1a9e:	85 b5       	in	r24, 0x25	; 37
    1aa0:	8e 7f       	andi	r24, 0xFE	; 254
    1aa2:	85 bd       	out	0x25, r24	; 37
    1aa4:	08 95       	ret

00001aa6 <__vector_5>:
}

/* ISR Function for Timer2 OverFlow event */
void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
	if(GlobalPointer_Timer2_OverFlowEvent != NULL)
    1ac8:	e0 91 66 01 	lds	r30, 0x0166
    1acc:	f0 91 67 01 	lds	r31, 0x0167
    1ad0:	30 97       	sbiw	r30, 0x00	; 0
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <__vector_5+0x30>
	{
		GlobalPointer_Timer2_OverFlowEvent();
    1ad4:	09 95       	icall
	}
}
    1ad6:	ff 91       	pop	r31
    1ad8:	ef 91       	pop	r30
    1ada:	bf 91       	pop	r27
    1adc:	af 91       	pop	r26
    1ade:	9f 91       	pop	r25
    1ae0:	8f 91       	pop	r24
    1ae2:	7f 91       	pop	r23
    1ae4:	6f 91       	pop	r22
    1ae6:	5f 91       	pop	r21
    1ae8:	4f 91       	pop	r20
    1aea:	3f 91       	pop	r19
    1aec:	2f 91       	pop	r18
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_4>:

/* ISR Function for Timer2 ComapreMatch event */
void __vector_4(void)  __attribute__((signal));
void __vector_4(void)
{
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	2f 93       	push	r18
    1b04:	3f 93       	push	r19
    1b06:	4f 93       	push	r20
    1b08:	5f 93       	push	r21
    1b0a:	6f 93       	push	r22
    1b0c:	7f 93       	push	r23
    1b0e:	8f 93       	push	r24
    1b10:	9f 93       	push	r25
    1b12:	af 93       	push	r26
    1b14:	bf 93       	push	r27
    1b16:	ef 93       	push	r30
    1b18:	ff 93       	push	r31
	if(GlobalPointer_Timer2_CompareMatchEvent != NULL)
    1b1a:	e0 91 68 01 	lds	r30, 0x0168
    1b1e:	f0 91 69 01 	lds	r31, 0x0169
    1b22:	30 97       	sbiw	r30, 0x00	; 0
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <__vector_4+0x30>
	{
		GlobalPointer_Timer2_CompareMatchEvent();
    1b26:	09 95       	icall
	}
}
    1b28:	ff 91       	pop	r31
    1b2a:	ef 91       	pop	r30
    1b2c:	bf 91       	pop	r27
    1b2e:	af 91       	pop	r26
    1b30:	9f 91       	pop	r25
    1b32:	8f 91       	pop	r24
    1b34:	7f 91       	pop	r23
    1b36:	6f 91       	pop	r22
    1b38:	5f 91       	pop	r21
    1b3a:	4f 91       	pop	r20
    1b3c:	3f 91       	pop	r19
    1b3e:	2f 91       	pop	r18
    1b40:	0f 90       	pop	r0
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	0f 90       	pop	r0
    1b46:	1f 90       	pop	r1
    1b48:	18 95       	reti

00001b4a <Timer0_DisableOC0>:
	
}

void Timer0_DisableOC0(void)
{
	CLEAR_BIT(TCCR0_REG,TCCR0_COM01_BIT);
    1b4a:	83 b7       	in	r24, 0x33	; 51
    1b4c:	8f 7d       	andi	r24, 0xDF	; 223
    1b4e:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_REG,TCCR0_COM00_BIT);
    1b50:	83 b7       	in	r24, 0x33	; 51
    1b52:	8f 7e       	andi	r24, 0xEF	; 239
    1b54:	83 bf       	out	0x33, r24	; 51
    1b56:	08 95       	ret

00001b58 <Timer1_DisableOC1A>:
}
void Timer1_DisableOC1A(void)
{
	CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A1_BIT);
    1b58:	8f b5       	in	r24, 0x2f	; 47
    1b5a:	8f 77       	andi	r24, 0x7F	; 127
    1b5c:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A0_BIT);
    1b5e:	8f b5       	in	r24, 0x2f	; 47
    1b60:	8f 7b       	andi	r24, 0xBF	; 191
    1b62:	8f bd       	out	0x2f, r24	; 47
    1b64:	08 95       	ret

00001b66 <Timer1_DisableOC1B>:
}
void Timer1_DisableOC1B(void)
{
	CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B1_BIT);
    1b66:	8f b5       	in	r24, 0x2f	; 47
    1b68:	8f 7d       	andi	r24, 0xDF	; 223
    1b6a:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B0_BIT);
    1b6c:	8f b5       	in	r24, 0x2f	; 47
    1b6e:	8f 7e       	andi	r24, 0xEF	; 239
    1b70:	8f bd       	out	0x2f, r24	; 47
    1b72:	08 95       	ret

00001b74 <Timer2_DisableOC2>:
}
void Timer2_DisableOC2(void)
{
	CLEAR_BIT(TCCR2_REG,TCCR2_COM21_BIT);
    1b74:	85 b5       	in	r24, 0x25	; 37
    1b76:	8f 7d       	andi	r24, 0xDF	; 223
    1b78:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2_REG,TCCR2_COM20_BIT);
    1b7a:	85 b5       	in	r24, 0x25	; 37
    1b7c:	8f 7e       	andi	r24, 0xEF	; 239
    1b7e:	85 bd       	out	0x25, r24	; 37
    1b80:	08 95       	ret

00001b82 <__subsf3>:
    1b82:	50 58       	subi	r21, 0x80	; 128

00001b84 <__addsf3>:
    1b84:	bb 27       	eor	r27, r27
    1b86:	aa 27       	eor	r26, r26
    1b88:	0e d0       	rcall	.+28     	; 0x1ba6 <__addsf3x>
    1b8a:	48 c1       	rjmp	.+656    	; 0x1e1c <__fp_round>
    1b8c:	39 d1       	rcall	.+626    	; 0x1e00 <__fp_pscA>
    1b8e:	30 f0       	brcs	.+12     	; 0x1b9c <__addsf3+0x18>
    1b90:	3e d1       	rcall	.+636    	; 0x1e0e <__fp_pscB>
    1b92:	20 f0       	brcs	.+8      	; 0x1b9c <__addsf3+0x18>
    1b94:	31 f4       	brne	.+12     	; 0x1ba2 <__addsf3+0x1e>
    1b96:	9f 3f       	cpi	r25, 0xFF	; 255
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <__addsf3+0x1a>
    1b9a:	1e f4       	brtc	.+6      	; 0x1ba2 <__addsf3+0x1e>
    1b9c:	2e c1       	rjmp	.+604    	; 0x1dfa <__fp_nan>
    1b9e:	0e f4       	brtc	.+2      	; 0x1ba2 <__addsf3+0x1e>
    1ba0:	e0 95       	com	r30
    1ba2:	e7 fb       	bst	r30, 7
    1ba4:	24 c1       	rjmp	.+584    	; 0x1dee <__fp_inf>

00001ba6 <__addsf3x>:
    1ba6:	e9 2f       	mov	r30, r25
    1ba8:	4a d1       	rcall	.+660    	; 0x1e3e <__fp_split3>
    1baa:	80 f3       	brcs	.-32     	; 0x1b8c <__addsf3+0x8>
    1bac:	ba 17       	cp	r27, r26
    1bae:	62 07       	cpc	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	84 07       	cpc	r24, r20
    1bb4:	95 07       	cpc	r25, r21
    1bb6:	18 f0       	brcs	.+6      	; 0x1bbe <__addsf3x+0x18>
    1bb8:	71 f4       	brne	.+28     	; 0x1bd6 <__addsf3x+0x30>
    1bba:	9e f5       	brtc	.+102    	; 0x1c22 <__addsf3x+0x7c>
    1bbc:	62 c1       	rjmp	.+708    	; 0x1e82 <__fp_zero>
    1bbe:	0e f4       	brtc	.+2      	; 0x1bc2 <__addsf3x+0x1c>
    1bc0:	e0 95       	com	r30
    1bc2:	0b 2e       	mov	r0, r27
    1bc4:	ba 2f       	mov	r27, r26
    1bc6:	a0 2d       	mov	r26, r0
    1bc8:	0b 01       	movw	r0, r22
    1bca:	b9 01       	movw	r22, r18
    1bcc:	90 01       	movw	r18, r0
    1bce:	0c 01       	movw	r0, r24
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	a0 01       	movw	r20, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	ff 27       	eor	r31, r31
    1bd8:	59 1b       	sub	r21, r25
    1bda:	99 f0       	breq	.+38     	; 0x1c02 <__addsf3x+0x5c>
    1bdc:	59 3f       	cpi	r21, 0xF9	; 249
    1bde:	50 f4       	brcc	.+20     	; 0x1bf4 <__addsf3x+0x4e>
    1be0:	50 3e       	cpi	r21, 0xE0	; 224
    1be2:	68 f1       	brcs	.+90     	; 0x1c3e <__addsf3x+0x98>
    1be4:	1a 16       	cp	r1, r26
    1be6:	f0 40       	sbci	r31, 0x00	; 0
    1be8:	a2 2f       	mov	r26, r18
    1bea:	23 2f       	mov	r18, r19
    1bec:	34 2f       	mov	r19, r20
    1bee:	44 27       	eor	r20, r20
    1bf0:	58 5f       	subi	r21, 0xF8	; 248
    1bf2:	f3 cf       	rjmp	.-26     	; 0x1bda <__addsf3x+0x34>
    1bf4:	46 95       	lsr	r20
    1bf6:	37 95       	ror	r19
    1bf8:	27 95       	ror	r18
    1bfa:	a7 95       	ror	r26
    1bfc:	f0 40       	sbci	r31, 0x00	; 0
    1bfe:	53 95       	inc	r21
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__addsf3x+0x4e>
    1c02:	7e f4       	brtc	.+30     	; 0x1c22 <__addsf3x+0x7c>
    1c04:	1f 16       	cp	r1, r31
    1c06:	ba 0b       	sbc	r27, r26
    1c08:	62 0b       	sbc	r22, r18
    1c0a:	73 0b       	sbc	r23, r19
    1c0c:	84 0b       	sbc	r24, r20
    1c0e:	ba f0       	brmi	.+46     	; 0x1c3e <__addsf3x+0x98>
    1c10:	91 50       	subi	r25, 0x01	; 1
    1c12:	a1 f0       	breq	.+40     	; 0x1c3c <__addsf3x+0x96>
    1c14:	ff 0f       	add	r31, r31
    1c16:	bb 1f       	adc	r27, r27
    1c18:	66 1f       	adc	r22, r22
    1c1a:	77 1f       	adc	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	c2 f7       	brpl	.-16     	; 0x1c10 <__addsf3x+0x6a>
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <__addsf3x+0x98>
    1c22:	ba 0f       	add	r27, r26
    1c24:	62 1f       	adc	r22, r18
    1c26:	73 1f       	adc	r23, r19
    1c28:	84 1f       	adc	r24, r20
    1c2a:	48 f4       	brcc	.+18     	; 0x1c3e <__addsf3x+0x98>
    1c2c:	87 95       	ror	r24
    1c2e:	77 95       	ror	r23
    1c30:	67 95       	ror	r22
    1c32:	b7 95       	ror	r27
    1c34:	f7 95       	ror	r31
    1c36:	9e 3f       	cpi	r25, 0xFE	; 254
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <__addsf3x+0x96>
    1c3a:	b3 cf       	rjmp	.-154    	; 0x1ba2 <__addsf3+0x1e>
    1c3c:	93 95       	inc	r25
    1c3e:	88 0f       	add	r24, r24
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <__addsf3x+0x9e>
    1c42:	99 27       	eor	r25, r25
    1c44:	ee 0f       	add	r30, r30
    1c46:	97 95       	ror	r25
    1c48:	87 95       	ror	r24
    1c4a:	08 95       	ret

00001c4c <__divsf3>:
    1c4c:	0c d0       	rcall	.+24     	; 0x1c66 <__divsf3x>
    1c4e:	e6 c0       	rjmp	.+460    	; 0x1e1c <__fp_round>
    1c50:	de d0       	rcall	.+444    	; 0x1e0e <__fp_pscB>
    1c52:	40 f0       	brcs	.+16     	; 0x1c64 <__divsf3+0x18>
    1c54:	d5 d0       	rcall	.+426    	; 0x1e00 <__fp_pscA>
    1c56:	30 f0       	brcs	.+12     	; 0x1c64 <__divsf3+0x18>
    1c58:	21 f4       	brne	.+8      	; 0x1c62 <__divsf3+0x16>
    1c5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <__divsf3+0x18>
    1c5e:	c7 c0       	rjmp	.+398    	; 0x1dee <__fp_inf>
    1c60:	51 11       	cpse	r21, r1
    1c62:	10 c1       	rjmp	.+544    	; 0x1e84 <__fp_szero>
    1c64:	ca c0       	rjmp	.+404    	; 0x1dfa <__fp_nan>

00001c66 <__divsf3x>:
    1c66:	eb d0       	rcall	.+470    	; 0x1e3e <__fp_split3>
    1c68:	98 f3       	brcs	.-26     	; 0x1c50 <__divsf3+0x4>

00001c6a <__divsf3_pse>:
    1c6a:	99 23       	and	r25, r25
    1c6c:	c9 f3       	breq	.-14     	; 0x1c60 <__divsf3+0x14>
    1c6e:	55 23       	and	r21, r21
    1c70:	b1 f3       	breq	.-20     	; 0x1c5e <__divsf3+0x12>
    1c72:	95 1b       	sub	r25, r21
    1c74:	55 0b       	sbc	r21, r21
    1c76:	bb 27       	eor	r27, r27
    1c78:	aa 27       	eor	r26, r26
    1c7a:	62 17       	cp	r22, r18
    1c7c:	73 07       	cpc	r23, r19
    1c7e:	84 07       	cpc	r24, r20
    1c80:	38 f0       	brcs	.+14     	; 0x1c90 <__divsf3_pse+0x26>
    1c82:	9f 5f       	subi	r25, 0xFF	; 255
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	44 1f       	adc	r20, r20
    1c8c:	aa 1f       	adc	r26, r26
    1c8e:	a9 f3       	breq	.-22     	; 0x1c7a <__divsf3_pse+0x10>
    1c90:	33 d0       	rcall	.+102    	; 0x1cf8 <__divsf3_pse+0x8e>
    1c92:	0e 2e       	mov	r0, r30
    1c94:	3a f0       	brmi	.+14     	; 0x1ca4 <__divsf3_pse+0x3a>
    1c96:	e0 e8       	ldi	r30, 0x80	; 128
    1c98:	30 d0       	rcall	.+96     	; 0x1cfa <__divsf3_pse+0x90>
    1c9a:	91 50       	subi	r25, 0x01	; 1
    1c9c:	50 40       	sbci	r21, 0x00	; 0
    1c9e:	e6 95       	lsr	r30
    1ca0:	00 1c       	adc	r0, r0
    1ca2:	ca f7       	brpl	.-14     	; 0x1c96 <__divsf3_pse+0x2c>
    1ca4:	29 d0       	rcall	.+82     	; 0x1cf8 <__divsf3_pse+0x8e>
    1ca6:	fe 2f       	mov	r31, r30
    1ca8:	27 d0       	rcall	.+78     	; 0x1cf8 <__divsf3_pse+0x8e>
    1caa:	66 0f       	add	r22, r22
    1cac:	77 1f       	adc	r23, r23
    1cae:	88 1f       	adc	r24, r24
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	26 17       	cp	r18, r22
    1cb4:	37 07       	cpc	r19, r23
    1cb6:	48 07       	cpc	r20, r24
    1cb8:	ab 07       	cpc	r26, r27
    1cba:	b0 e8       	ldi	r27, 0x80	; 128
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <__divsf3_pse+0x56>
    1cbe:	bb 0b       	sbc	r27, r27
    1cc0:	80 2d       	mov	r24, r0
    1cc2:	bf 01       	movw	r22, r30
    1cc4:	ff 27       	eor	r31, r31
    1cc6:	93 58       	subi	r25, 0x83	; 131
    1cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cca:	2a f0       	brmi	.+10     	; 0x1cd6 <__divsf3_pse+0x6c>
    1ccc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cce:	51 05       	cpc	r21, r1
    1cd0:	68 f0       	brcs	.+26     	; 0x1cec <__divsf3_pse+0x82>
    1cd2:	8d c0       	rjmp	.+282    	; 0x1dee <__fp_inf>
    1cd4:	d7 c0       	rjmp	.+430    	; 0x1e84 <__fp_szero>
    1cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd8:	ec f3       	brlt	.-6      	; 0x1cd4 <__divsf3_pse+0x6a>
    1cda:	98 3e       	cpi	r25, 0xE8	; 232
    1cdc:	dc f3       	brlt	.-10     	; 0x1cd4 <__divsf3_pse+0x6a>
    1cde:	86 95       	lsr	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	b7 95       	ror	r27
    1ce6:	f7 95       	ror	r31
    1ce8:	9f 5f       	subi	r25, 0xFF	; 255
    1cea:	c9 f7       	brne	.-14     	; 0x1cde <__divsf3_pse+0x74>
    1cec:	88 0f       	add	r24, r24
    1cee:	91 1d       	adc	r25, r1
    1cf0:	96 95       	lsr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	97 f9       	bld	r25, 7
    1cf6:	08 95       	ret
    1cf8:	e1 e0       	ldi	r30, 0x01	; 1
    1cfa:	66 0f       	add	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	bb 1f       	adc	r27, r27
    1d02:	62 17       	cp	r22, r18
    1d04:	73 07       	cpc	r23, r19
    1d06:	84 07       	cpc	r24, r20
    1d08:	ba 07       	cpc	r27, r26
    1d0a:	20 f0       	brcs	.+8      	; 0x1d14 <__divsf3_pse+0xaa>
    1d0c:	62 1b       	sub	r22, r18
    1d0e:	73 0b       	sbc	r23, r19
    1d10:	84 0b       	sbc	r24, r20
    1d12:	ba 0b       	sbc	r27, r26
    1d14:	ee 1f       	adc	r30, r30
    1d16:	88 f7       	brcc	.-30     	; 0x1cfa <__divsf3_pse+0x90>
    1d18:	e0 95       	com	r30
    1d1a:	08 95       	ret

00001d1c <__fixunssfsi>:
    1d1c:	98 d0       	rcall	.+304    	; 0x1e4e <__fp_splitA>
    1d1e:	88 f0       	brcs	.+34     	; 0x1d42 <__fixunssfsi+0x26>
    1d20:	9f 57       	subi	r25, 0x7F	; 127
    1d22:	90 f0       	brcs	.+36     	; 0x1d48 <__fixunssfsi+0x2c>
    1d24:	b9 2f       	mov	r27, r25
    1d26:	99 27       	eor	r25, r25
    1d28:	b7 51       	subi	r27, 0x17	; 23
    1d2a:	a0 f0       	brcs	.+40     	; 0x1d54 <__fixunssfsi+0x38>
    1d2c:	d1 f0       	breq	.+52     	; 0x1d62 <__fixunssfsi+0x46>
    1d2e:	66 0f       	add	r22, r22
    1d30:	77 1f       	adc	r23, r23
    1d32:	88 1f       	adc	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	1a f0       	brmi	.+6      	; 0x1d3e <__fixunssfsi+0x22>
    1d38:	ba 95       	dec	r27
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__fixunssfsi+0x12>
    1d3c:	12 c0       	rjmp	.+36     	; 0x1d62 <__fixunssfsi+0x46>
    1d3e:	b1 30       	cpi	r27, 0x01	; 1
    1d40:	81 f0       	breq	.+32     	; 0x1d62 <__fixunssfsi+0x46>
    1d42:	9f d0       	rcall	.+318    	; 0x1e82 <__fp_zero>
    1d44:	b1 e0       	ldi	r27, 0x01	; 1
    1d46:	08 95       	ret
    1d48:	9c c0       	rjmp	.+312    	; 0x1e82 <__fp_zero>
    1d4a:	67 2f       	mov	r22, r23
    1d4c:	78 2f       	mov	r23, r24
    1d4e:	88 27       	eor	r24, r24
    1d50:	b8 5f       	subi	r27, 0xF8	; 248
    1d52:	39 f0       	breq	.+14     	; 0x1d62 <__fixunssfsi+0x46>
    1d54:	b9 3f       	cpi	r27, 0xF9	; 249
    1d56:	cc f3       	brlt	.-14     	; 0x1d4a <__fixunssfsi+0x2e>
    1d58:	86 95       	lsr	r24
    1d5a:	77 95       	ror	r23
    1d5c:	67 95       	ror	r22
    1d5e:	b3 95       	inc	r27
    1d60:	d9 f7       	brne	.-10     	; 0x1d58 <__fixunssfsi+0x3c>
    1d62:	3e f4       	brtc	.+14     	; 0x1d72 <__fixunssfsi+0x56>
    1d64:	90 95       	com	r25
    1d66:	80 95       	com	r24
    1d68:	70 95       	com	r23
    1d6a:	61 95       	neg	r22
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	08 95       	ret

00001d74 <__floatunsisf>:
    1d74:	e8 94       	clt
    1d76:	09 c0       	rjmp	.+18     	; 0x1d8a <__floatsisf+0x12>

00001d78 <__floatsisf>:
    1d78:	97 fb       	bst	r25, 7
    1d7a:	3e f4       	brtc	.+14     	; 0x1d8a <__floatsisf+0x12>
    1d7c:	90 95       	com	r25
    1d7e:	80 95       	com	r24
    1d80:	70 95       	com	r23
    1d82:	61 95       	neg	r22
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	99 23       	and	r25, r25
    1d8c:	a9 f0       	breq	.+42     	; 0x1db8 <__floatsisf+0x40>
    1d8e:	f9 2f       	mov	r31, r25
    1d90:	96 e9       	ldi	r25, 0x96	; 150
    1d92:	bb 27       	eor	r27, r27
    1d94:	93 95       	inc	r25
    1d96:	f6 95       	lsr	r31
    1d98:	87 95       	ror	r24
    1d9a:	77 95       	ror	r23
    1d9c:	67 95       	ror	r22
    1d9e:	b7 95       	ror	r27
    1da0:	f1 11       	cpse	r31, r1
    1da2:	f8 cf       	rjmp	.-16     	; 0x1d94 <__floatsisf+0x1c>
    1da4:	fa f4       	brpl	.+62     	; 0x1de4 <__floatsisf+0x6c>
    1da6:	bb 0f       	add	r27, r27
    1da8:	11 f4       	brne	.+4      	; 0x1dae <__floatsisf+0x36>
    1daa:	60 ff       	sbrs	r22, 0
    1dac:	1b c0       	rjmp	.+54     	; 0x1de4 <__floatsisf+0x6c>
    1dae:	6f 5f       	subi	r22, 0xFF	; 255
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	8f 4f       	sbci	r24, 0xFF	; 255
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	16 c0       	rjmp	.+44     	; 0x1de4 <__floatsisf+0x6c>
    1db8:	88 23       	and	r24, r24
    1dba:	11 f0       	breq	.+4      	; 0x1dc0 <__floatsisf+0x48>
    1dbc:	96 e9       	ldi	r25, 0x96	; 150
    1dbe:	11 c0       	rjmp	.+34     	; 0x1de2 <__floatsisf+0x6a>
    1dc0:	77 23       	and	r23, r23
    1dc2:	21 f0       	breq	.+8      	; 0x1dcc <__floatsisf+0x54>
    1dc4:	9e e8       	ldi	r25, 0x8E	; 142
    1dc6:	87 2f       	mov	r24, r23
    1dc8:	76 2f       	mov	r23, r22
    1dca:	05 c0       	rjmp	.+10     	; 0x1dd6 <__floatsisf+0x5e>
    1dcc:	66 23       	and	r22, r22
    1dce:	71 f0       	breq	.+28     	; 0x1dec <__floatsisf+0x74>
    1dd0:	96 e8       	ldi	r25, 0x86	; 134
    1dd2:	86 2f       	mov	r24, r22
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	2a f0       	brmi	.+10     	; 0x1de4 <__floatsisf+0x6c>
    1dda:	9a 95       	dec	r25
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	da f7       	brpl	.-10     	; 0x1dda <__floatsisf+0x62>
    1de4:	88 0f       	add	r24, r24
    1de6:	96 95       	lsr	r25
    1de8:	87 95       	ror	r24
    1dea:	97 f9       	bld	r25, 7
    1dec:	08 95       	ret

00001dee <__fp_inf>:
    1dee:	97 f9       	bld	r25, 7
    1df0:	9f 67       	ori	r25, 0x7F	; 127
    1df2:	80 e8       	ldi	r24, 0x80	; 128
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	08 95       	ret

00001dfa <__fp_nan>:
    1dfa:	9f ef       	ldi	r25, 0xFF	; 255
    1dfc:	80 ec       	ldi	r24, 0xC0	; 192
    1dfe:	08 95       	ret

00001e00 <__fp_pscA>:
    1e00:	00 24       	eor	r0, r0
    1e02:	0a 94       	dec	r0
    1e04:	16 16       	cp	r1, r22
    1e06:	17 06       	cpc	r1, r23
    1e08:	18 06       	cpc	r1, r24
    1e0a:	09 06       	cpc	r0, r25
    1e0c:	08 95       	ret

00001e0e <__fp_pscB>:
    1e0e:	00 24       	eor	r0, r0
    1e10:	0a 94       	dec	r0
    1e12:	12 16       	cp	r1, r18
    1e14:	13 06       	cpc	r1, r19
    1e16:	14 06       	cpc	r1, r20
    1e18:	05 06       	cpc	r0, r21
    1e1a:	08 95       	ret

00001e1c <__fp_round>:
    1e1c:	09 2e       	mov	r0, r25
    1e1e:	03 94       	inc	r0
    1e20:	00 0c       	add	r0, r0
    1e22:	11 f4       	brne	.+4      	; 0x1e28 <__fp_round+0xc>
    1e24:	88 23       	and	r24, r24
    1e26:	52 f0       	brmi	.+20     	; 0x1e3c <__fp_round+0x20>
    1e28:	bb 0f       	add	r27, r27
    1e2a:	40 f4       	brcc	.+16     	; 0x1e3c <__fp_round+0x20>
    1e2c:	bf 2b       	or	r27, r31
    1e2e:	11 f4       	brne	.+4      	; 0x1e34 <__fp_round+0x18>
    1e30:	60 ff       	sbrs	r22, 0
    1e32:	04 c0       	rjmp	.+8      	; 0x1e3c <__fp_round+0x20>
    1e34:	6f 5f       	subi	r22, 0xFF	; 255
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	08 95       	ret

00001e3e <__fp_split3>:
    1e3e:	57 fd       	sbrc	r21, 7
    1e40:	90 58       	subi	r25, 0x80	; 128
    1e42:	44 0f       	add	r20, r20
    1e44:	55 1f       	adc	r21, r21
    1e46:	59 f0       	breq	.+22     	; 0x1e5e <__fp_splitA+0x10>
    1e48:	5f 3f       	cpi	r21, 0xFF	; 255
    1e4a:	71 f0       	breq	.+28     	; 0x1e68 <__fp_splitA+0x1a>
    1e4c:	47 95       	ror	r20

00001e4e <__fp_splitA>:
    1e4e:	88 0f       	add	r24, r24
    1e50:	97 fb       	bst	r25, 7
    1e52:	99 1f       	adc	r25, r25
    1e54:	61 f0       	breq	.+24     	; 0x1e6e <__fp_splitA+0x20>
    1e56:	9f 3f       	cpi	r25, 0xFF	; 255
    1e58:	79 f0       	breq	.+30     	; 0x1e78 <__fp_splitA+0x2a>
    1e5a:	87 95       	ror	r24
    1e5c:	08 95       	ret
    1e5e:	12 16       	cp	r1, r18
    1e60:	13 06       	cpc	r1, r19
    1e62:	14 06       	cpc	r1, r20
    1e64:	55 1f       	adc	r21, r21
    1e66:	f2 cf       	rjmp	.-28     	; 0x1e4c <__fp_split3+0xe>
    1e68:	46 95       	lsr	r20
    1e6a:	f1 df       	rcall	.-30     	; 0x1e4e <__fp_splitA>
    1e6c:	08 c0       	rjmp	.+16     	; 0x1e7e <__fp_splitA+0x30>
    1e6e:	16 16       	cp	r1, r22
    1e70:	17 06       	cpc	r1, r23
    1e72:	18 06       	cpc	r1, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	f1 cf       	rjmp	.-30     	; 0x1e5a <__fp_splitA+0xc>
    1e78:	86 95       	lsr	r24
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	61 05       	cpc	r22, r1
    1e7e:	08 94       	sec
    1e80:	08 95       	ret

00001e82 <__fp_zero>:
    1e82:	e8 94       	clt

00001e84 <__fp_szero>:
    1e84:	bb 27       	eor	r27, r27
    1e86:	66 27       	eor	r22, r22
    1e88:	77 27       	eor	r23, r23
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	97 f9       	bld	r25, 7
    1e8e:	08 95       	ret

00001e90 <__mulsf3>:
    1e90:	0b d0       	rcall	.+22     	; 0x1ea8 <__mulsf3x>
    1e92:	c4 cf       	rjmp	.-120    	; 0x1e1c <__fp_round>
    1e94:	b5 df       	rcall	.-150    	; 0x1e00 <__fp_pscA>
    1e96:	28 f0       	brcs	.+10     	; 0x1ea2 <__mulsf3+0x12>
    1e98:	ba df       	rcall	.-140    	; 0x1e0e <__fp_pscB>
    1e9a:	18 f0       	brcs	.+6      	; 0x1ea2 <__mulsf3+0x12>
    1e9c:	95 23       	and	r25, r21
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <__mulsf3+0x12>
    1ea0:	a6 cf       	rjmp	.-180    	; 0x1dee <__fp_inf>
    1ea2:	ab cf       	rjmp	.-170    	; 0x1dfa <__fp_nan>
    1ea4:	11 24       	eor	r1, r1
    1ea6:	ee cf       	rjmp	.-36     	; 0x1e84 <__fp_szero>

00001ea8 <__mulsf3x>:
    1ea8:	ca df       	rcall	.-108    	; 0x1e3e <__fp_split3>
    1eaa:	a0 f3       	brcs	.-24     	; 0x1e94 <__mulsf3+0x4>

00001eac <__mulsf3_pse>:
    1eac:	95 9f       	mul	r25, r21
    1eae:	d1 f3       	breq	.-12     	; 0x1ea4 <__mulsf3+0x14>
    1eb0:	95 0f       	add	r25, r21
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	55 1f       	adc	r21, r21
    1eb6:	62 9f       	mul	r22, r18
    1eb8:	f0 01       	movw	r30, r0
    1eba:	72 9f       	mul	r23, r18
    1ebc:	bb 27       	eor	r27, r27
    1ebe:	f0 0d       	add	r31, r0
    1ec0:	b1 1d       	adc	r27, r1
    1ec2:	63 9f       	mul	r22, r19
    1ec4:	aa 27       	eor	r26, r26
    1ec6:	f0 0d       	add	r31, r0
    1ec8:	b1 1d       	adc	r27, r1
    1eca:	aa 1f       	adc	r26, r26
    1ecc:	64 9f       	mul	r22, r20
    1ece:	66 27       	eor	r22, r22
    1ed0:	b0 0d       	add	r27, r0
    1ed2:	a1 1d       	adc	r26, r1
    1ed4:	66 1f       	adc	r22, r22
    1ed6:	82 9f       	mul	r24, r18
    1ed8:	22 27       	eor	r18, r18
    1eda:	b0 0d       	add	r27, r0
    1edc:	a1 1d       	adc	r26, r1
    1ede:	62 1f       	adc	r22, r18
    1ee0:	73 9f       	mul	r23, r19
    1ee2:	b0 0d       	add	r27, r0
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	62 1f       	adc	r22, r18
    1ee8:	83 9f       	mul	r24, r19
    1eea:	a0 0d       	add	r26, r0
    1eec:	61 1d       	adc	r22, r1
    1eee:	22 1f       	adc	r18, r18
    1ef0:	74 9f       	mul	r23, r20
    1ef2:	33 27       	eor	r19, r19
    1ef4:	a0 0d       	add	r26, r0
    1ef6:	61 1d       	adc	r22, r1
    1ef8:	23 1f       	adc	r18, r19
    1efa:	84 9f       	mul	r24, r20
    1efc:	60 0d       	add	r22, r0
    1efe:	21 1d       	adc	r18, r1
    1f00:	82 2f       	mov	r24, r18
    1f02:	76 2f       	mov	r23, r22
    1f04:	6a 2f       	mov	r22, r26
    1f06:	11 24       	eor	r1, r1
    1f08:	9f 57       	subi	r25, 0x7F	; 127
    1f0a:	50 40       	sbci	r21, 0x00	; 0
    1f0c:	8a f0       	brmi	.+34     	; 0x1f30 <__mulsf3_pse+0x84>
    1f0e:	e1 f0       	breq	.+56     	; 0x1f48 <__mulsf3_pse+0x9c>
    1f10:	88 23       	and	r24, r24
    1f12:	4a f0       	brmi	.+18     	; 0x1f26 <__mulsf3_pse+0x7a>
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	bb 1f       	adc	r27, r27
    1f1a:	66 1f       	adc	r22, r22
    1f1c:	77 1f       	adc	r23, r23
    1f1e:	88 1f       	adc	r24, r24
    1f20:	91 50       	subi	r25, 0x01	; 1
    1f22:	50 40       	sbci	r21, 0x00	; 0
    1f24:	a9 f7       	brne	.-22     	; 0x1f10 <__mulsf3_pse+0x64>
    1f26:	9e 3f       	cpi	r25, 0xFE	; 254
    1f28:	51 05       	cpc	r21, r1
    1f2a:	70 f0       	brcs	.+28     	; 0x1f48 <__mulsf3_pse+0x9c>
    1f2c:	60 cf       	rjmp	.-320    	; 0x1dee <__fp_inf>
    1f2e:	aa cf       	rjmp	.-172    	; 0x1e84 <__fp_szero>
    1f30:	5f 3f       	cpi	r21, 0xFF	; 255
    1f32:	ec f3       	brlt	.-6      	; 0x1f2e <__mulsf3_pse+0x82>
    1f34:	98 3e       	cpi	r25, 0xE8	; 232
    1f36:	dc f3       	brlt	.-10     	; 0x1f2e <__mulsf3_pse+0x82>
    1f38:	86 95       	lsr	r24
    1f3a:	77 95       	ror	r23
    1f3c:	67 95       	ror	r22
    1f3e:	b7 95       	ror	r27
    1f40:	f7 95       	ror	r31
    1f42:	e7 95       	ror	r30
    1f44:	9f 5f       	subi	r25, 0xFF	; 255
    1f46:	c1 f7       	brne	.-16     	; 0x1f38 <__mulsf3_pse+0x8c>
    1f48:	fe 2b       	or	r31, r30
    1f4a:	88 0f       	add	r24, r24
    1f4c:	91 1d       	adc	r25, r1
    1f4e:	96 95       	lsr	r25
    1f50:	87 95       	ror	r24
    1f52:	97 f9       	bld	r25, 7
    1f54:	08 95       	ret

00001f56 <_exit>:
    1f56:	f8 94       	cli

00001f58 <__stop_program>:
    1f58:	ff cf       	rjmp	.-2      	; 0x1f58 <__stop_program>
